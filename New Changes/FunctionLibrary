package wrappers;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.net.InetAddress;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.jacob.com.LibraryLoader;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.univocity.parsers.csv.CsvParser;
import com.univocity.parsers.csv.CsvParserSettings;

import autoitx4java.AutoItX;
import report.ExtentTestManager;
import utils.ReadExcel;

/**
 * 
 * <h1>FunctionLibrary</h1>
 * 
 * <p>
 * Class holds all Low Level Functions 
 * 
 * @author Lakshman A
 * @since OCT 1, 2016
 *
 */

public class FunctionLibrary {

	protected RemoteWebDriver driver;

	//private String primaryWindowHandle,sHubUrl,sHubPort;
	protected static Logger log = Logger.getLogger(FunctionLibrary.class.getName());
	protected String testDataFilePathStatic;
	protected String  testComponentNameStatic;
	protected int gblrecordsCounterStatic;
	
	protected boolean testCaseStatus;
	protected String firstFailureStatus;
	

	String getDisplayTimeout = null;
	String getAlertTimeout = null;
	int intElementDisplayTimeout = 0;

	//Common Properties for full Project
	public static Properties property;
	public static Properties sysProperty;
	public static Properties Runtimevalue;
	public static Properties browserProperty;
	public static Properties GAFValue;
	
	//DB Connections:
		private Connection con;
		private Statement stmt;
		Connection con_TT;
		Statement stmt_TT;
		Connection EshopConnection;
		Statement EShopstmt;
		Connection rrbsconnection;
		Statement rrbsstatement; 
		Connection exibsconnection;
		Statement exibsstatement; 
		Connection hlrConnection;
		Statement hlrStatement; 
		Connection imgConnection;
		Statement imgStatement;
		Connection msAcsConnection;
		Statement msAcsStatement;

		
		//Unix object variable declaration
		
		JSch jsch=null;
		Session JSHsession=null;
		Properties Jschconfig=null;		
		Channel channel=null;
		boolean connectionStatus=false;
		boolean disconnectedStatus=false;
		boolean Executionstatus=false;
		
	/***************************************************BASE CODE STARTED**********************************************************/	
		
	public void initializeFiles() {

		try {

			property =new Properties();
			property.load(new FileInputStream(new File("./src/properties/Env.properties")));

			sysProperty =new Properties();
			sysProperty.load(new FileInputStream(new File("./src/properties/SystemConfig.properties")));

			Runtimevalue=new Properties();
		
			GAFValue =new Properties();
			GAFValue.load(new FileInputStream(new File("./src/properties/GlobalAddressFinderValues.properties")));

			PropertyConfigurator.configure(sysProperty.getProperty("log4jConfPath"));
			log.info("Initialized all the files...");
			
			browserProperty =new Properties();
			browserProperty.load(new FileInputStream(new File("./src/properties/browser.properties")));

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public synchronized String getTestData(String testDataFilePath, String testComponentName, String colName, int gblrecordsCounter) throws Exception{

		String testData=null;
		try{

			ReadExcel readTestData= new ReadExcel(testDataFilePath);
			testData = readTestData.getCellData(testComponentName, colName, gblrecordsCounter);

		}catch(Exception e){
			ExtentTestManager.reportStepError("Error in reading the value from test data sheet's Column '" + colName + "' .");
			throw e;
		}
		if(testData==null){
			ExtentTestManager.reportStepError("Column Name'" + colName + "' is not available in '"+testComponentName+"' Component Sheet.");
			throw new RuntimeException("Column Name'" + colName + "' is not available in '"+testComponentName+"' Component Sheet.");
		}
		return testData;
	}

	public synchronized String RetrieveTestDataValue(String testDataFilePath, String testComponentName, String colName, int gblrecordsCounter) throws Exception{

		String testData=null;
		try{

			ReadExcel readTestData= new ReadExcel(testDataFilePath);
			testData = readTestData.getCellData(testComponentName, colName, gblrecordsCounter);

		}catch(Exception e){
			ExtentTestManager.reportStepError("Error in reading the value from test data sheet's Column '" + colName + "' .");
			throw e;
		}
		if(testData==null){
			ExtentTestManager.reportStepError("Column Name'" + colName + "' is not available in '"+testComponentName+"' Component Sheet.");
			throw new RuntimeException("Column Name'" + colName + "' is not available in '"+testComponentName+"' Component Sheet.");
		}
		return testData;
	}

	
	public synchronized WebElement selectByLocatorType(String getValueFromPOM){

		WebElement element = null;
		if(getValueFromPOM==null){
			ExtentTestManager.reportStepFail(driver, "Given Locator or key is not available in the Page Object Class. Check Component or POM.", false);
			return null;
		}
		
		String locatorFromPOM=getValueFromPOM;

		try{
			String locatorType = getValueFromPOM.split("#")[0];
			String locatorValue = getValueFromPOM.split("#")[1];
			
			String loc = locatorType;
			switch(loc.toLowerCase()){
			case "id":
				element = driver.findElement(By.id(locatorValue));
				break;
			case "xpath":
				element = driver.findElement(By.xpath(locatorValue));
				break;
			case "css":
				element = driver.findElement(By.cssSelector(locatorValue));
				break;
			case "classname":
				element = driver.findElement(By.className(locatorValue));
				break;
			case "name":
				element = driver.findElement(By.name(locatorValue));
				break;
			case "linktext":
				element = driver.findElement(By.linkText(locatorValue));
				break;
			case "tagname":
				element = driver.findElement(By.tagName(locatorValue));
				break;
			case "partiallinktext":
				element = driver.findElement(By.partialLinkText(locatorValue));
				break;
			default:
				throw new IllegalArgumentException("Check the given locator Type in POM");
			}	
		}catch(StaleElementReferenceException e){
			return selectByLocatorType(locatorFromPOM);
		}catch (NoSuchElementException e) {
			ExtentTestManager.reportStepInfo("No such element '"+ getValueFromPOM +"' found or dislayed");
			//return (WebElement) e;
			return null;
		}catch (Exception e) {
			ExtentTestManager.reportStepInfo("Exception occured while finding the element'"+ getValueFromPOM +"'. Exception is "+e);
			//return (WebElement) e;
			return null;
		}

		//for ie browser and chrome bring the element to view and perform any actions
		if(element!=null){
			String browserName = browserProperty.getProperty("testBrowser");
			if (browserName.equalsIgnoreCase("firefox")||browserName.equalsIgnoreCase("ie")) {
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {}
			}
		}

		return element;
	}

	public boolean copyFileFromSourceToDest(String sourcePath,String destPath){
		File source = new File(sourcePath);
		File dest = new File(destPath);
		try {
		    FileUtils.copyFile(source, dest);
		    return true;
		} catch (Exception e) {
		    e.printStackTrace();
		    return false;
		}
	}
	
	public synchronized boolean pageLoadCheck(){

		//do nothing
		//return true;

		String browserName=browserProperty.getProperty("testBrowser");
		if (browserName.equalsIgnoreCase("chrome")||browserName.equalsIgnoreCase("ie")) {
			try {
				Thread.sleep(1500);
			} catch (InterruptedException e2) {
				e2.printStackTrace();
			}
			Date s = new GregorianCalendar().getTime();
			ExtentTestManager.reportStepPass("Page load Start Time " + s);
			//Report_Functions.ReportEventSuccess(doc,"4","","Page load Start Time " + s,3);
			int flag = 0;
			String docStatus;
			JavascriptExecutor js = (JavascriptExecutor) driver;
			try {
				for (int i = 0; i < 60; i++) {
					if (js.executeScript("return document.readyState").toString().equals("complete")) {

						flag = 1;
						break;
					}

					else {
						docStatus = js.executeScript("return document.readyState").toString();
						Thread.sleep(1000);
						// Report_Functions.ReportEventSuccess(doc,"4","","Else condition page loading status :" +docStatus, 3);
						ExtentTestManager.reportStepPass("Else condition page loading status :" + docStatus);
					}

				}

			} catch (InterruptedException e) {
				log.info("InterruptedException Occured " + e);

			} catch (Exception e1) {
				log.info("Exception Occured " + e1);
			}
			if (flag == 1) {
				Date s2 = new GregorianCalendar().getTime();
				//Report_Functions.ReportEventSuccess(doc,"Page is loaded successfully",3);
				ExtentTestManager.reportStepPass("Page is loaded successfully");
				//Report_Functions.ReportEventSuccess(doc,"4","","Page load End Time " + s2,3);
				ExtentTestManager.reportStepPass("Page load End Time " + s2);
				return true;
			} else {
				Date s1 = new GregorianCalendar().getTime();
				ExtentTestManager.reportStepFail(driver, "Page doesn't loaded Successfully, Load time :" + s1 + "",
						true);
				//Report_Functions.ReportEventFailure(doc,"","Page doesn't loaded Successfully, Load time :"+s1+"" , true);
				ExtentTestManager.reportStepFail(driver, "Page load End Time " + s1, true);
				//Report_Functions.ReportEventSuccess(doc,"4","","Page load End Time " + s1,3);
				return false;
			} 
		}else if(browserName.equalsIgnoreCase("firefox")){
			//Do Nothing
			return true;
		}else{
			return false;
		}

	}

	@SuppressWarnings("deprecation")
	public synchronized void launchAppWithTimeout()
			throws InterruptedException {

		Thread thread = new Thread(new Runnable() {
			@Override
			public void run() {

				try {
					log.info("Starting the IE Browser with Thread ID - "+(int) Thread.currentThread().getId());
					System.setProperty("webdriver.ie.driver", "./BrowserDrivers/IEDriverServer.exe");
					DesiredCapabilities capabilities = DesiredCapabilities.internetExplorer();
					capabilities.setCapability("ignoreZoomSetting", true);
					capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS,true);
					driver = new InternetExplorerDriver(capabilities);
					log.info("Driver started in launchAppWithTimeout");
				} catch (Exception e) {
					e.printStackTrace();
					log.info("Exception#Error occured in the launchAppWithTimeout");
				}

			}
		});

		thread.start();
		long endTimeMillis = System.currentTimeMillis() + 15000;

		while (thread.isAlive()) {
			if (System.currentTimeMillis() > endTimeMillis) {
				break;
			}
			try {
				Thread.sleep(500);
			}
			catch (InterruptedException t) {}
		}

		thread.stop();
		log.info("Thread Stopped after the action done! ID "+(int) Thread.currentThread().getId());
	}
	
	public synchronized boolean LaunchApplication(String strAppURL,int strExecEventFlag ) throws InterruptedException {
		String urlToLaunch=null;
		String urlEnvVariableNameFromExcel=null;
		String browserName=null;

		try {
			if(strExecEventFlag==1){
				urlEnvVariableNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, strAppURL, gblrecordsCounterStatic);
			}

			urlToLaunch=property.getProperty(urlEnvVariableNameFromExcel);
			browserName=browserProperty.getProperty("testBrowser");
			
			if (browserName.equalsIgnoreCase("firefox")) {
				driver = new FirefoxDriver();
				driver.manage().window().maximize();
				driver.get(urlToLaunch);
				//driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			
			} else if (browserName.equalsIgnoreCase("chrome")) {
				System.setProperty("webdriver.chrome.driver", "./BrowserDrivers/chromedriver.exe");
				driver = new ChromeDriver();
				driver.manage().window().maximize();
				driver.get(urlToLaunch);
				//Do not un-comment the below line or u may face - 'cannot determine loading status from timeout' issue
				//driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			
			} else if (browserName.equalsIgnoreCase("ie")) {
				launchAppWithTimeout();
				log.info("After First launchAppWithTimeout Trigger. Now IE Driver should be NULL or May have value.");
				if(driver==null){
					log.info("IE Driver which was initialized before was having blank Page!. So triggering LaunchappTimeout once again...");
					launchAppWithTimeout();
				}else{
					log.info("IE Driver instantiated successfully at the first time itself.");
				}
			}

			if (browserName.equalsIgnoreCase("ie")) {
			driver.manage().window().maximize();
			driver.get(urlToLaunch);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			}

			ExtentTestManager.reportStepPass("'" + browserName.toUpperCase() + "' Browser lauched with URL '" + urlToLaunch + "' successfully." );
			return  true;

		} catch(WebDriverException e){
			e.printStackTrace();
			ExtentTestManager.reportStepFail(driver,"'Webdriver Exception : " + browserName.toUpperCase() + "' Browser failed to launch with URL '" + urlToLaunch + "'. Exception is : "+e,true);
			log.info("Webdriver Exception : "+e.getMessage());
			//return LaunchApplication(strAppURL, strExecEventFlag);
			return false;
		} catch (Exception e) {
			e.printStackTrace();
			ExtentTestManager.reportStepFail(driver,"'" + browserName.toUpperCase() + "' Browser failed to launch with URL '" + urlToLaunch + "'. Exception is : "+e,true);
			return false;
		}
	}

	public synchronized boolean waitUntilExist(String strLocator,  String strTestObject) {
		boolean functionStatus= false;
		WebElement element = null;
		
		try{
			
			String locatorType = strLocator.split("#")[0];
			String locatorValue = strLocator.split("#")[1];
			
			intElementDisplayTimeout=Integer.parseInt(sysProperty.getProperty("elementDisplayTimeout"));
			WebDriverWait wait = new WebDriverWait(driver,intElementDisplayTimeout);
			
			switch(locatorType.toLowerCase()){

			case "id":	element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "xpath": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "css": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "classname": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "name": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "linktext": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "tagname": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.tagName(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "partiallinktext": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.partialLinkText(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;
			default:
				functionStatus = false;
				throw new IllegalArgumentException("Check the Given Locator Type");
			}

		}catch(NullPointerException e){
			ExtentTestManager.reportStepFail(driver,"Exception occured while locationg the Locator '"+strLocator+"'. Exception is "+e,false);
			return false;
		}catch(StaleElementReferenceException e){
			log.info("Exception is : "+e);
			return waitUntilExist(strLocator, strTestObject);
		}catch(TimeoutException e){
			e.printStackTrace();
			ExtentTestManager.reportStepFail(driver,"Timed out after "+intElementDisplayTimeout+" seconds waiting for visibility of Element '"+ strTestObject +"'",true);
			return false;
		}catch(Exception e){
			e.printStackTrace();
			ExtentTestManager.reportStepFail(driver,"Exception occured while waiting for visibility of Element '"+ strTestObject +"'",true);
			return false;
		}

		if(functionStatus){
			ExtentTestManager.reportStepPass("Element '"+ strTestObject +"' is displayed successfully within "+intElementDisplayTimeout+" seconds" );
		}else{
			ExtentTestManager.reportStepFail(driver,"Timed out after "+intElementDisplayTimeout+" seconds waiting for visibility of Element '"+ strTestObject +"'",true);
		}

		return functionStatus;
	}
	
	public synchronized boolean waitUntilExistZoomOut(String strLocator,  String strTestObject) {
		boolean functionStatus= false;
		WebElement element = null;
		
		try{
			
			String browserName = browserProperty.getProperty("testBrowser");
			try {
				if (browserName.equalsIgnoreCase("firefox")||browserName.equalsIgnoreCase("ie")) {

					WebElement html = driver.findElement(By.tagName("html"));
					html.sendKeys(Keys.chord(Keys.CONTROL, Keys.ADD));
					Thread.sleep(200);
					html.sendKeys(Keys.chord(Keys.CONTROL, Keys.SUBTRACT));

				}else if (browserName.equalsIgnoreCase("chrome")) {

					JavascriptExecutor js = (JavascriptExecutor) driver;
					js.executeScript("document.body.style.zoom='90%'");
					Thread.sleep(200);
					js.executeScript("document.body.style.zoom='100%'");

				}
			} catch (Exception e) {
				e.printStackTrace();
				log.info("Exception is :"+e);
			} 
			
			String locatorType = strLocator.split("#")[0];
			String locatorValue = strLocator.split("#")[1];
			
			intElementDisplayTimeout=Integer.parseInt(sysProperty.getProperty("elementDisplayTimeout"));
			WebDriverWait wait = new WebDriverWait(driver,intElementDisplayTimeout);
			
			switch(locatorType.toLowerCase()){

			case "id":	element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "xpath": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "css": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "classname": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "name": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "linktext": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "tagname": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.tagName(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;

			case "partiallinktext": element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.partialLinkText(locatorValue)));
			if(element.isDisplayed()) functionStatus = true;
			else functionStatus = false;
			break;
			default:
				functionStatus = false;
				throw new IllegalArgumentException("Check the Given Locator Type");
			}

		}catch(NullPointerException e){
			ExtentTestManager.reportStepFail(driver,"Exception occured while locationg the Locator '"+strLocator+"'. Exception is "+e,false);
			return false;
		}catch(StaleElementReferenceException e){
			log.info("Exception is : "+e);
			return waitUntilExist(strLocator, strTestObject);
		}catch(TimeoutException e){
			e.printStackTrace();
			ExtentTestManager.reportStepFail(driver,"Timed out after "+intElementDisplayTimeout+" seconds waiting for visibility of Element '"+ strTestObject +"'",true);
			return false;
		}catch(Exception e){
			e.printStackTrace();
			ExtentTestManager.reportStepFail(driver,"Exception occured while waiting for visibility of Element '"+ strTestObject +"'",true);
			return false;
		}

		if(functionStatus){
			ExtentTestManager.reportStepPass("Element '"+ strTestObject +"' is displayed successfully within "+intElementDisplayTimeout+" seconds" );
		}else{
			ExtentTestManager.reportStepFail(driver,"Timed out after "+intElementDisplayTimeout+" seconds waiting for visibility of Element '"+ strTestObject +"'",true);
		}

		return functionStatus;
	}

	public synchronized boolean WebEditEnterUsername(String strLocator, String strTestObject,String strtestData,int strExecEventFlag ) {

		boolean functionStatus= false;
		String testData=null;
		String strUserID=null;
		try {
			if(strExecEventFlag==1){
				testData= getTestData(testDataFilePathStatic, testComponentNameStatic, strtestData, gblrecordsCounterStatic);
			}else{
				testData=strtestData;
			}
			if(testData==null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in the data sheet.",false);
				return false;
			}
			if(property.getProperty("Use_ENV_UserID_Password").equalsIgnoreCase("Yes")){
				ExtentTestManager.reportStepPass("Username is fetched from the Property file with Key '"+testData+"'");
				strUserID=property.getProperty(testData);
			}else{
				strUserID=testData;
			}
			if(strUserID==null){
				ExtentTestManager.reportStepFail(driver,"Username is NULL. No NULL value can be entered in the '"+ strTestObject +"'.",false);
				return false;
			}
			selectByLocatorType(strLocator).sendKeys(strUserID);
			ExtentTestManager.reportStepPass("Username '" +  strUserID + "' is successfully entered in the textBox '"+strTestObject+"'");
			functionStatus = true;
		}catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"Username '" +  strUserID + "' is not entered in the textBox '"+strTestObject+"'",true);
			functionStatus = false;
		}
		return functionStatus;
	}

	public synchronized boolean WebEditEnterPassword(String strLocator, String strTestObject,String strtestData,int strExecEventFlag ) {

		boolean functionStatus= false;
		String testData=null;
		String strPwd=null;
		try {
			if(strExecEventFlag==1){
				testData= getTestData(testDataFilePathStatic, testComponentNameStatic, strtestData, gblrecordsCounterStatic);
			}else{
				testData=strtestData;
			}
			if(testData==null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in the data sheet.",false);
				return false;
			}
			if(property.getProperty("Use_ENV_UserID_Password").equalsIgnoreCase("Yes")){
				ExtentTestManager.reportStepPass("Password is fetched from the Property file with Key '"+testData+"'");
				strPwd=property.getProperty(testData);
			}else{
				strPwd=testData;
			}
			if(strPwd==null){
				ExtentTestManager.reportStepFail(driver,"Password is NULL. No NULL value can be entered in the '"+ strTestObject +"'.",false);
				return false;
			}
			selectByLocatorType(strLocator).clear();
			selectByLocatorType(strLocator).sendKeys(strPwd);
			Thread.sleep(2000L);
			ExtentTestManager.reportStepPass("Password '*******' is successfully entered in the textBox '"+strTestObject+"'");
			functionStatus = true;
		}catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"Password '*******' is not entered in the textBox '"+strTestObject+"'",true);
			functionStatus = false;
		}
		return functionStatus;
	}

	public synchronized boolean WebElementClick(String strLocator, String elementName) {
		try{
			String browserName = browserProperty.getProperty("testBrowser");
			if (browserName.equalsIgnoreCase("firefox")||browserName.equalsIgnoreCase("ie")||browserName.equalsIgnoreCase("chrome")) {
				WebElement element = selectByLocatorType(strLocator);
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
				Thread.sleep(200);
				element = selectByLocatorType(strLocator);
				element.click();
			}else{
				WebElement element = selectByLocatorType(strLocator);
				element.click();
			}
			ExtentTestManager.reportStepPass("Element '"+elementName+"' is clicked successfully.");
			return true;
		}catch (StaleElementReferenceException e) {
			log.info("Exception occured in Webelement click Exception is "+e.getStackTrace());
			return WebElementClick(strLocator, elementName);
		} catch (Exception e) {
			log.info("Exception occured in Webelement click Exception is "+e.getStackTrace());
			ExtentTestManager.reportStepFail(driver,"Element '"+elementName+"' is not clicked.",true);
			return false;
		}
	}

	public synchronized List<WebElement> listSelectByLocatorType(String getValueFromPOM){

		List<WebElement> element = null;
		String locatorType = getValueFromPOM.split("#")[0];
		String locatorValue = getValueFromPOM.split("#")[1];

		try{
			switch(locatorType.toLowerCase()){
			case "id":
				element = driver.findElements(By.id(locatorValue));
				break;
			case "xpath":
				element = driver.findElements(By.xpath(locatorValue));
				break;
			case "css":
				element = driver.findElements(By.cssSelector(locatorValue));
				break;
			case "classname":	
				element = driver.findElements(By.className(locatorValue));
				break;
			case "name":
				element = driver.findElements(By.name(locatorValue));
				break;
			case "linktext":
				element = driver.findElements(By.linkText(locatorValue));
				break;
			case "tagname":
				element = driver.findElements(By.tagName(locatorValue));
				break;
			case "partiallinktext":
				element = driver.findElements(By.partialLinkText(locatorValue));
				break;
			default:
				throw new IllegalArgumentException("Unable to found");
			}	
		}catch(StaleElementReferenceException e1){
			listSelectByLocatorType(getValueFromPOM);
		}catch (Exception e) {
			log.info("Exception: Element is not found ;"+ e);
			return null;
		}	
		return element;
	}

	public synchronized boolean enterValuesAndClickEnterBtn(String getValueFromPOM, String strTestObject, String strtestData, int strExecEventFlag){

		boolean functionStatus= false;
		String testData=null;
		try {

			if(strExecEventFlag==1){
				testData= getTestData(testDataFilePathStatic, testComponentNameStatic, strtestData, gblrecordsCounterStatic);
			}else{
				testData=strtestData;
			}

			selectByLocatorType(getValueFromPOM).clear();
			selectByLocatorType(getValueFromPOM).sendKeys(testData);
			selectByLocatorType(getValueFromPOM).sendKeys(Keys.ENTER);
			ExtentTestManager.reportStepPass("Key '" +  testData + "' is entered in the Textbox '"+strTestObject+"' and 'ENTER' key is pressed successfully.");
			functionStatus = true;

		} catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver,"Key '" +  testData + "' is not entered in the Textbox '"+strTestObject+"' and 'ENTER' key is not pressed successfully.",true);
			functionStatus = false;
			log.info("No Element Found to enter text : " + e);
		}
		return functionStatus;
	}

	public synchronized boolean doubleClickOnElement(String getValueFromPOM, String strTestObject){
		try {
			if(browserProperty.getProperty("testBrowser").equalsIgnoreCase("chrome")|| (browserProperty.getProperty("testBrowser").equalsIgnoreCase("ie")) ){
				WebElement element = selectByLocatorType(getValueFromPOM);
				Actions action = new Actions(driver);
				action.doubleClick(element).build().perform();
				ExtentTestManager.reportStepPass("'"+strTestObject+"' is double clicked successfully");
				return true;
			}else if( (browserProperty.getProperty("testBrowser").equalsIgnoreCase("firefox")) ){
				
			/*	WebElement element = selectByLocatorType(getValueFromPOM);
				log.info("Object :"+element);
				((JavascriptExecutor)driver).executeScript("arguments[0].dblClick();", element);
				Thread.sleep(500);
				
				WebElement element = selectByLocatorType(getValueFromPOM);
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
				Thread.sleep(700);
				element = selectByLocatorType(getValueFromPOM);
				element.click();
				//Thread.sleep(500); 
				//((JavascriptExecutor)driver).executeScript("arguments[0].dblclick();", element);
				//((JavascriptExecutor)driver).executeScript("arguments[0].dblclick;", element);
				Actions action = new Actions(driver);
				action.doubleClick(element).build().perform();
				Thread.sleep(200); */
				
				WebElement element = selectByLocatorType(getValueFromPOM);
				Actions action = new Actions(driver);
				action.doubleClick(element).build().perform();
				ExtentTestManager.reportStepPass("'"+strTestObject+"' is double clicked successfully");
				return true;
			
			}else{
				return false;
			}

		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"'"+strTestObject+"' was not double clicked",true);
			return false;
		}
	}

	public synchronized boolean alertAccept(String strTestObject){

		boolean functionStatus = false;
		try{
			Thread.sleep(1000);
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(ExpectedConditions.alertIsPresent());
			Alert alert = driver.switchTo().alert();
			//alert.getText();
			alert.accept();
			functionStatus=true;
			ExtentTestManager.reportStepPass("Displayed '"+strTestObject+"' Alert is accepted successfully");
		}catch(NoAlertPresentException e){
			log.info("Exception occurred, while accepting the alert :"+e.getMessage());
			ExtentTestManager.reportStepFail(driver,"No Alert is displayed to Accept",true);
		}catch(Exception e){
			log.info("Exception occurred, while accepting the alert :"+e.getMessage());
			ExtentTestManager.reportStepFail(driver,"'"+strTestObject+"' Alert is not accepted",true);
		}
		return functionStatus;
	}

	public synchronized boolean CloseWebBrowser(){

		boolean functionStatus=false;
		String strBrowserName=null;
		try{
			if(browserProperty.getProperty("testBrowser").equalsIgnoreCase("firefox"))
				strBrowserName = "Mozilla";
			else if(browserProperty.getProperty("testBrowser").equalsIgnoreCase("chrome"))
				strBrowserName = "chrome";
			else if(browserProperty.getProperty("testBrowser").equalsIgnoreCase("IE"))
				strBrowserName = "IE";
			try{
				driver.close();
				log.info("Closing the Focused Browser.");
			}catch(Exception e){
				log.info("close : "+e);
			}
			try{
				if(driver!=null){
					log.info("Quiting the Driver Session!");	
					Thread.sleep(1000);
					//Below function commented since this Window popup appears only while using the Selenium 3x and Gecko driver
					//Now we are currently using only Selenium 2x without Gecko
					/*if(browserProperty.getProperty("testBrowser").equalsIgnoreCase("firefox")){
						Runtime.getRuntime().exec("taskkill /F /IM plugin-container.exe");
						Thread.sleep(1000);
					}*/
					
//					driver.quit();
				}
			}catch(Exception e){
				log.info("quit : "+e);
			}

			ExtentTestManager.reportStepPass("Successfully Closed the browser "+ strBrowserName+"");
			functionStatus=true;
		}catch(Exception e){
			log.info("In Exception of close browser. Exception is : " + e);
			ExtentTestManager.reportStepFail(driver,"Unable to close the browser "+strBrowserName+"", false);
		}finally{
			driver=null;
		}
		return functionStatus;
	}

	public synchronized boolean WebListSelect(String getValueFromPOM, String strTestObject,String strtestData,int strExecEventFlag){
		String testData=null;

		try {
			if(strExecEventFlag==1){
				testData= getTestData(testDataFilePathStatic, testComponentNameStatic, strtestData, gblrecordsCounterStatic);
			}else{
				testData=strtestData;
			}
			if(testData==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			WebElement element = selectByLocatorType(getValueFromPOM);
			Select se = new Select(element);
			se.selectByVisibleText(testData);
			
			ExtentTestManager.reportStepPass("Item '" +  testData + "' is selected from the '"+strTestObject+"' List box successfully");
			return true;
		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"Item '" +  testData + "' was not selected from the  '"+strTestObject+"' List box ",true);
			return false;
		}
	}

	public synchronized boolean WebEditEnterText(String getValueFromPOM, String strTestObject,String strtestData,int strExecEventFlag ){

		boolean functionStatus= false;
		String testData=null;

		try {
			if(strExecEventFlag==1)
				testData= getTestData(testDataFilePathStatic, testComponentNameStatic, strtestData, gblrecordsCounterStatic);
			else
				testData=strtestData;

			if(testData==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			selectByLocatorType(getValueFromPOM).clear();
			selectByLocatorType(getValueFromPOM).sendKeys(testData);
			ExtentTestManager.reportStepPass("Text '" +  testData + "' is entered successfully in the textbox '"+strTestObject+"'");
			functionStatus=true;	

		} catch (Exception e) { 	
			ExtentTestManager.reportStepFail(driver,"Text '" + testData + "' was not entered in the textbox '"+strTestObject+"'", true);
			log.info("No Element Found to enter text : " + e);
		}
		return functionStatus;
	}
	
	public synchronized boolean WebElementTextCompare(String getValueFromPOM, String strTestObject,String strtestData, int strExecEventFlag ){
		String actualResult=null;
		boolean functionStatus= false;
		String testData=null;

		try{
			if(strExecEventFlag==1)
				testData= getTestData(testDataFilePathStatic, testComponentNameStatic, strtestData, gblrecordsCounterStatic);
			else
				testData=strtestData;

			if(testData==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			actualResult = selectByLocatorType(getValueFromPOM).getText();

		} catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while getting the text from the WebElement '"+strTestObject+"' . Error description is :"+e.getMessage(),true);
			functionStatus=false;
		}

		try{
			if((actualResult.trim()).equalsIgnoreCase(testData.trim())){
				ExtentTestManager.reportStepPass("Actual value '" +actualResult+ "' matches with the expected value '"+testData+ "' in the input field '"+strTestObject+"'");
				functionStatus=true;
			}else{
				System.out.println("actualResult.trim() --> "+actualResult.trim());
				System.out.println("testData.trim() --> "+testData.trim());
				ExtentTestManager.reportStepFail(driver,"Actual Value '" +actualResult+ "' does not match with the Expected value '"+testData+ "' in the input field '"+strTestObject+"'",true);
				functionStatus=false;
			}
		}catch (StaleElementReferenceException e){
			return WebElementTextCompare(getValueFromPOM, strTestObject, strtestData, strExecEventFlag);
		} catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing actual and expected values. Error description is :"+e.getMessage(), true);
			functionStatus=false;
		}
		return functionStatus;
	}
	
	public synchronized boolean WebElementTextContainsVerify(String getValueFromPOM, String strTestObject,String strtestData, int strExecEventFlag ){
		String actualResult=null;
		boolean functionStatus= false;
		String testData=null;

		try{
			if(strExecEventFlag==1)
				testData= getTestData(testDataFilePathStatic, testComponentNameStatic, strtestData, gblrecordsCounterStatic);
			else
				testData=strtestData;

			if(testData==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			actualResult = selectByLocatorType(getValueFromPOM).getText();

		} catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while getting the text from the WebElement '"+strTestObject+"' . Error description is :"+e.getMessage(),true);
			functionStatus=false;
		}

		try{
			if((actualResult.trim()).contains(testData.trim())){
				ExtentTestManager.reportStepPass("Actual value '" +actualResult+ "' contains the expected value '"+testData+ "' in the input field '"+strTestObject+"'");
				functionStatus=true;
			}else{
				System.out.println("actualResult.trim() --> "+actualResult.trim());
				System.out.println("testData.trim() --> "+testData.trim());
				ExtentTestManager.reportStepFail(driver,"Actual Value '" +actualResult+ "' does not contain the Expected value '"+testData+ "' in the input field '"+strTestObject+"'",true);
				functionStatus=false;
			}
		}catch (StaleElementReferenceException e){
			return WebElementTextCompare(getValueFromPOM, strTestObject, strtestData, strExecEventFlag);
		} catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing actual and expected values. Error description is :"+e.getMessage(), true);
			functionStatus=false;
		}
		return functionStatus;
	}
	
	public synchronized boolean WebRadioSelect(String getValueFromPOM, String strTestObject, String rdbOptions){
		try {
			selectByLocatorType(getValueFromPOM).click();
			ExtentTestManager.reportStepPass("Option '"+rdbOptions+"' is selected successfully from the Radio button '" + strTestObject + "'");		
			return true;
		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"Option '"+rdbOptions+"' is not Selected from the Radio button '" + strTestObject + "'", true); 	
			return false;
		}
	}

	public synchronized boolean PerformAction_MoveToElementAndClick(String getValueFromPOM, String strOject) {
		
		try{
			if(browserProperty.getProperty("testBrowser").equalsIgnoreCase("chrome")){
				/*WebElement element=selectByLocatorType(getValueFromPOM);
				Actions action = new Actions(driver);
				action.moveToElement(element).click().build().perform();
				ExtentTestManager.reportStepPass("Mouse moved to the element '"+strOject+"' and click action is done successfully");
				return true;*/
				
				WebElement element = selectByLocatorType(getValueFromPOM);
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
				Thread.sleep(700); 
				element = selectByLocatorType(getValueFromPOM);
				element.click();
				ExtentTestManager.reportStepPass("Mouse moved to the element '"+strOject+"' and click action is done successfully");
				return true;
				
			}else if(browserProperty.getProperty("testBrowser").equalsIgnoreCase("ie") || browserProperty.getProperty("testBrowser").equalsIgnoreCase("firefox")){
				WebElement element = selectByLocatorType(getValueFromPOM);
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
				Thread.sleep(700); 
				element = selectByLocatorType(getValueFromPOM);
				element.click();
				ExtentTestManager.reportStepPass("Mouse moved to the element '"+strOject+"' and click action is done successfully");
				return true;
			}else{
				return false;
			}

		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Mouse not  moved to the element '"+strOject+"' and click action is not performed", true);
			return false;
		}
		
	}

	public synchronized boolean noAction() {
		try{
			return true;
		}catch(Exception e){
			return false;
		}
	}

	public synchronized boolean javaScriptDatePicker(String getValueFromPOM, String strTestObject, String strColumnName, int strExecEventFlag){
		String elementValue = null;

		try{
			String elementFromPOM=null;
			elementFromPOM=getValueFromPOM;
			int count=elementFromPOM.split("#").length;
			//log.info("JS POM Count : "+count);
			if(count==2){
				getValueFromPOM=elementFromPOM.split("#")[1];
				//log.info("changed getValueFromPOM is : "+getValueFromPOM);
			}else{
				//log.info("Not changed getValueFromPOM is : "+getValueFromPOM);
			}
			
			if(strExecEventFlag==1){
				elementValue = getTestData(testDataFilePathStatic, testComponentNameStatic, strColumnName, gblrecordsCounterStatic);
			}
			if(elementValue==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}
			//Get the locatorType from POM during runtime
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("document.getElementById('"+getValueFromPOM+"').value = '"+elementValue+"'");
			ExtentTestManager.reportStepPass("Date picker value '"+elementValue+"' is entered for "+strTestObject+"");
			return true;

		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Date picker value '"+elementValue+"' is entered for "+strTestObject+". Exception is : "+e.getLocalizedMessage(), true);
			return false;

		}


	}

	public synchronized boolean javascriptWebElementClick(String getValueFromPOM, String strTestObject){

		boolean WebElementClick= false;
		try {
			JavascriptExecutor executor = (JavascriptExecutor)driver;
			executor.executeScript("arguments[0].click();", selectByLocatorType(getValueFromPOM));
			ExtentTestManager.reportStepPass("'"+strTestObject+"' is clicked successfully ");
			WebElementClick=true;
		}catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"'"+strTestObject+"' was not clicked" , true);
			WebElementClick=false;
		}
		return WebElementClick;
	}

	public synchronized boolean waitUntilDisappear(String getValueFromPOM, String strTestObject){
		boolean disappear =false;
		try{
			Thread.sleep(500);
			if(selectByLocatorType(getValueFromPOM).isDisplayed()){
				for(int i=0; i<90; i++){
					Thread.sleep(1000);
					if(!selectByLocatorType(getValueFromPOM).isDisplayed()){
						disappear = true;
						Thread.sleep(1000);
						ExtentTestManager.reportStepPass("'The Element '"+ strTestObject +"' is not appearing in the Page");
						break;
					}
				}
			}else{
				Thread.sleep(500);
				disappear = true;
				Thread.sleep(1000);
				ExtentTestManager.reportStepPass("'The Element '"+ strTestObject +"' is not displayed in the Page");
			}
		}catch(StaleElementReferenceException e){
			ExtentTestManager.reportStepPass("'The Element '"+ strTestObject +"' is not displayed in the Page");
			disappear= true;
		}catch(NoSuchElementException e){
			ExtentTestManager.reportStepPass("'The Element '"+ strTestObject +"' is not displayed in the Page");
			disappear= true;
		}
		catch(NullPointerException e){
			ExtentTestManager.reportStepPass("'The Element '"+ strTestObject +"' is not displayed in the Page");
			disappear= true;
		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Exception occured in wait until disappear of an Element. Error message is : "+ e +"." , true);
			disappear= false;
		}
		return disappear;
	}

	public synchronized boolean WebListSelectedValue(String getValueFromPOM, String strTestObject, String strColumnName, int strExecEventFlag) throws Exception{
		String strData = null;
		boolean WebListSelectedValue = false;
		String selectedValue = null;
		try{
			if(strExecEventFlag==1){
				strData = getTestData(testDataFilePathStatic, testComponentNameStatic, strColumnName, gblrecordsCounterStatic);
			}	
			if(strData==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}
			selectedValue = new Select(selectByLocatorType(getValueFromPOM)).getFirstSelectedOption().getText();
			if(selectedValue.trim().equalsIgnoreCase(strData.trim())){
				ExtentTestManager.reportStepPass(""+strTestObject +"'s selected dropdown value '"+selectedValue + "' matches with the expected value '"+strData+"'");
				WebListSelectedValue = true;
			}else{
				ExtentTestManager.reportStepFail(driver,""+strTestObject +"'s selected dropdown value '"+selectedValue + "' does not matches with the Expected Value '"+strData+"'"  , true); 
				WebListSelectedValue=false;
			}
		}catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"Error occured while verifying the dropdown value of object "+strTestObject +"'", true); 
			WebListSelectedValue=false;
		}
		return WebListSelectedValue;
	}

	public synchronized boolean deleteAllFileInPath(String filePath, int strExecEventFlag) throws Exception{
		boolean functionStatus = true;
		String path = null;
		int flag = 0;
		try{

			if(strExecEventFlag == 1){
				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, gblrecordsCounterStatic));
			}
			if(path==null ){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
			}
			File directory = new File("//\\" +path);
			for(File listOfFiles : directory.listFiles()){
				if(true){
					listOfFiles.delete();
					flag = 1;
				}
			}

		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occurred, while deleting the file in the Given Path"+path+"", false);
			functionStatus = false;
		}

		if(flag == 1){
			ExtentTestManager.reportStepPass("All files in the given folder path '"+path+"' are deleted sucessfully.");
		} else {
			ExtentTestManager.reportStepPass("No file available in the given folder path '"+path+"' to delete.");
		}

		return functionStatus;
	}

	public synchronized boolean WaitUntilPatternAppearsInLog(String filePath,String fileNameValue,String strLineContains,String strPatterToCheck,String envVariableName ,String strdateFormat,int strExecEventFlag){
		boolean result= false;
		String path = null;
		File[] listOfFile = null;
		String fileName = null;
		String fileNameFromExcel=null;
		Scanner in = null;
		boolean found=false;
		String lineContains=null;
		String patterToCheck=null;
		String dateFormat=null;
		String envVariable=null;

		try{
			if(strExecEventFlag == 1){
				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, gblrecordsCounterStatic));
				fileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic,fileNameValue, gblrecordsCounterStatic);
				lineContains= getTestData(testDataFilePathStatic, testComponentNameStatic, strLineContains, gblrecordsCounterStatic);
				patterToCheck= getTestData(testDataFilePathStatic, testComponentNameStatic, strPatterToCheck, gblrecordsCounterStatic);
				dateFormat= getTestData(testDataFilePathStatic, testComponentNameStatic, strdateFormat, gblrecordsCounterStatic);
				envVariable= getTestData(testDataFilePathStatic, testComponentNameStatic, envVariableName, gblrecordsCounterStatic);
			}

			if(path==null ||fileNameFromExcel==null ||lineContains==null||patterToCheck==null||dateFormat==null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
				return false;
			}
			if(fileNameFromExcel.trim().equalsIgnoreCase("DateFormat"))
				fileNameFromExcel=dateFormatter(dateFormat,".txt");
			log.info("File name to search is : "+fileNameFromExcel);
			File directory = new File("//\\" +path);

			boolean fileexist=false;
			int fileAppeartime=0;
			while(fileAppeartime<10){
				Thread.sleep(1000);
				listOfFile = directory.listFiles();
				if(listOfFile.length != 0){
					log.info("Directory has files");
					fileexist=true;
					break;
				}else{
					log.info("No File is available in directory. looping again with 60 secs");
				}
				log.info("No File is available in directory with 60 secs");
				fileAppeartime++;
			}

			if(fileexist){
				log.info("Files avialble in the directiory");
			}else{
				log.info("No File is available in directory for 60secs");
				ExtentTestManager.reportStepFail(driver,"No file is available in given directory "+path+"" , false);
				return false;
			}

			boolean foundstatus=false;
			int time=0;
			while(time<10){
				Thread.sleep(1000);	
				listOfFile = directory.listFiles();
				for(int i = 0; i<listOfFile.length; i++){
					if(listOfFile[i].isFile()){
						fileName = listOfFile[i].getName();
						log.info("Found a file and name is : "+fileName);
						if(fileName.equals(fileNameFromExcel)){
							log.info("FileName exact match : "+fileName);
							fileName=fileNameFromExcel;
							foundstatus=true;
							break;
						}
					}
				}

				if(foundstatus){
					log.info("FileName exact match is found. Braking the loop");
					break;
				}else{
					log.info("FileName not found in path. Continue the loop");
				}
				time++;
			}

			if(fileName == null){
				ExtentTestManager.reportStepFail(driver,"'"+fileNameFromExcel+"' file is not available in the directory" , false);
				log.info("Search File is not available in directory");
				return false;
			}

			if(!(fileName.equals(fileNameFromExcel))){
				ExtentTestManager.reportStepFail(driver,"'"+fileNameFromExcel+"' file is not available in the directory" , false);
				log.info("Search File is not available in directory");
				return false;
			}

			File file =new File("//\\" +path +fileName);
			log.info(file.getAbsolutePath()+" || "+file.getName());
			int i=0;
			while(i<10){
				Thread.sleep(1000);
				try {
					in = new Scanner(file);
					while(in.hasNext())	{
						String line=in.nextLine();
						if(line.contains(lineContains)){
							log.info("Line contains Match found. Line -> "+line);
							Pattern p = Pattern.compile(patterToCheck);
							Matcher m = p.matcher(line);

							while (m.find()){
								found=true;
								log.info("Pattern Match found in the Line!");
								log.info("Match is : "+m.group(0));
								ExtentTestManager.reportStepPass("Line containing the word '"+lineContains+"' has the Matched Expected Pattern '"+m.group(0) +"' in the Log");
								if(!(envVariable.trim().equalsIgnoreCase("NA"))){
									log.info("Storing the Pattern Matched in the Env Variable '"+envVariable+"'");
									Runtimevalue.setProperty(envVariable, m.group(0));
									ExtentTestManager.reportStepPass("The Dynamic Value '"+m.group(0)+"' is successfully stored in the Runtime Varaible '"+envVariable+"'.");
									in.close();
								}
								break;
							}
							if(found){
								log.info("Pattern Match found breaking the HasNext Loop");
								break;
							}else{
								log.info("Pattern Match not found. Checking teh next line that contains expected word");
							}
						}
					}
					if(found){
						log.info("Match found, Breaking the Time Loop");
						result=true;
						break;
					}else{
						log.info("Match not found. Continue the Loop...");
					}

				} catch (FileNotFoundException e) {
					log.info("FileNotFoundException occured match founder... :"+e);
				}catch (Exception e) {
					log.info("Excption occured match founder... : "+e);
					ExtentTestManager.reportStepFail(driver, "Error occured while finding the pattern from Winservice Log. Error description is : "+ e.getLocalizedMessage() +".", false);
					//e.printStackTrace();
				}

				i++;
			}

			if(result){
				ExtentTestManager.reportStepPass("Log file '"+fileNameFromExcel+"' from Path '"+path+"' contains the Expected Log Pattern '"+patterToCheck+"'");
			}else{
				ExtentTestManager.reportStepFail(driver,"Log file '"+fileNameFromExcel+"' from Path '"+path+"' does not contains the Expected Log Pattern '"+patterToCheck+"' within 60 secs", false);
			}

		} catch(Exception e) { 
			result=false;
			ExtentTestManager.reportStepFail(driver,"Error occured in the WinserviceWaitUntilPatternAppears. Error description is : "+ e.getLocalizedMessage() +".", false);
		}
		return result;
	}
	
	public static String dateFormatter(String format, String fileType){

		String expectedDate=null;

		try{
			if(format.trim().equalsIgnoreCase("ddMMyyyy") || (format.trim().equalsIgnoreCase("dMyyyy")) ){

				DateFormat dateFormat = new SimpleDateFormat("ddMMyyyy");
				Date date = new Date();

				dateFormat = new SimpleDateFormat("dd");
				String checkDate=dateFormat.format(date);
				int checkDateInt=Integer.parseInt(checkDate);
				expectedDate=String.valueOf(checkDateInt);

				dateFormat = new SimpleDateFormat("MM");
				String checkMonth=dateFormat.format(date);
				int checkDMonthInt=Integer.parseInt(checkMonth);
				expectedDate=expectedDate+String.valueOf(checkDMonthInt);

				dateFormat = new SimpleDateFormat("yyyy");
				String checkYear=dateFormat.format(date);
				expectedDate=expectedDate+checkYear+fileType;

				log.info("Needed Date is : "+expectedDate);
			}

		} catch(Exception e) { 
			log.info("Error in date formater : " + e);
		}
		return expectedDate;
	}

	public synchronized boolean WebElementValueCompare(String getValueFromPOM, String strTestObject,String strColumnName,int strExecEventFlag ){

		String actualResult=null;
		String strData=null;
		boolean WebElementValueCompare=false;
		try {
			if(strExecEventFlag==1){
				strData=getTestData(testDataFilePathStatic, testComponentNameStatic,strColumnName,gblrecordsCounterStatic);
			}
			if(strData==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the datasheet.", false);
				return false;
			}

			actualResult = selectByLocatorType(getValueFromPOM).getAttribute("value");

			if((actualResult.trim()).equalsIgnoreCase(strData.trim())){
				WebElementValueCompare=true;
				ExtentTestManager.reportStepPass("'"+strTestObject+"'  Actual Value '" + actualResult + "' matches the Expected value '" + strData + "'");
			}else{
				WebElementValueCompare=false;
				ExtentTestManager.reportStepFail(driver,"'"+strTestObject+"'  Actual Value '" + actualResult + "' does not match the Expected Value '" + strData + "'", true);
			}
		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"'"+strTestObject+"' Actual Value '" + actualResult + "' does not match the Expected Value '" + strData + "'", true);
			WebElementValueCompare=false;
		}
		return WebElementValueCompare;
	}

    public synchronized boolean deleteLogFile(String filePath, String fileName, int strExecEventFlag){

		boolean functionStatus = false;
		String path = null;
		String fileNameValue = null;
		String fileMovePath = null;
		int flag = 0;

		try{
			
			if(strExecEventFlag == 1){
				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, gblrecordsCounterStatic));
				fileNameValue = getTestData(testDataFilePathStatic, testComponentNameStatic, fileName, gblrecordsCounterStatic);
			}

			if(path==null || fileNameValue==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
			}
			
			
			
		}catch(Exception e){
			
			e.getMessage();
			
		}
		
		
		try{
			
			InputStream inStream = null;
			OutputStream outStream = null;
			
			Date date = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MMM.yyyy-hh_mm_ss");
			
			String todayDate = dateFormat.format(date);
			
			File directory = new File("//\\" +path);
			for(File listOfFiles : directory.listFiles()){
				if(listOfFiles.getName().equals(fileNameValue)){
					
					fileMovePath = property.getProperty("logFilesAlternatePath");
					File existFile = new File("//\\" +path+fileNameValue);
					File replaceFile = new File("//\\" +fileMovePath+todayDate+".log");
					
					inStream = new FileInputStream(existFile);
					outStream = new FileOutputStream(replaceFile);
					
					if(existFile.length() != 0){
					
					log.info("File is available");
					
					byte[] buffer = new byte[10240];
					
					int length;
					
					//Copy the file
					
					log.info("Going to move the files");
					
					while((length = inStream.read(buffer)) > 0){
						
						outStream.write(buffer, 0, length);
						
					}
					
						inStream.close();
						outStream.close();
						
						ExtentTestManager.reportStepPass("Log file is copied to path("+fileMovePath+") successfully and named with today's date");
						break;
						
					}
					
				}
			}
			
		}catch(FileNotFoundException e){
			
			ExtentTestManager.reportStepPass("Log file is not available");
			log.info(e.getMessage());
			
		}catch(Exception e){
			
			ExtentTestManager.reportStepPass("Log file is not available");
			log.info(e.getMessage());
			
		}
		
		
		
		
		try{

			File directory = new File("//\\" +path);

			if(directory.listFiles().length == 0){
				log.info("Files are not available");
				ExtentTestManager.reportStepPass("Expected Log file '"+fileNameValue+"' is not available in directory "+path+"");
				return true;
			}else {
				log.info("Files are available its going to delete the files");
			}

			for(File listOfFiles : directory.listFiles()){

				if(listOfFiles.getName().equals(fileNameValue)){

					log.info("File with given filename is available in the Path");
					listOfFiles.delete();
					log.info("file is deleted");

					flag = 1;
					functionStatus = true;
					break;

				}else if(!(listOfFiles.getName().equals(fileNameValue))){
					log.info("File with given filename is available in the Path");
					functionStatus = true;
				}
			}
			Thread.sleep(5000);

		}catch(Exception e){
			log.info("Exception occurs in deleteFiles function "+e.getMessage());
			ExtentTestManager.reportStepFail(driver,"Error occurred while deleting the file with Name '"+fileNameValue+"'" , false);
			functionStatus = false;
		}

		if(flag == 1){
			ExtentTestManager.reportStepPass("Log File with expected filename '"+fileNameValue+"' in the path '"+path+"' deleted sucessfully.");
		}else{
			ExtentTestManager.reportStepPass("Expected Log file '"+fileNameValue+"' is not available in directory "+path+"");
		}
		return functionStatus;
	}

	public synchronized boolean verifyScrollPresentOnBrowser(String strTestObject) {
		boolean elementStatus = false;
		try{
			JavascriptExecutor js = (JavascriptExecutor) driver;
			Object scrollBarStatus = js.executeScript("return document.documentElement.scrollHeight>document.documentElement.clientHeight;");
			if(scrollBarStatus.equals(true)){
				log.info("Scroll bar is available on page");
				//Runtimevalue.setProperty("checkScrollBarPresent", property.getProperty("scrollBarPresent"));
				ExtentTestManager.reportStepPass("Scroll bar is available on "+strTestObject+" page");
				elementStatus = true;
			}else{				
				log.info("Scroll bar is not available on page");
				//Runtimevalue.setProperty("checkScrollBarPresent", property.getProperty("scrollBarNotPresent"));
				ExtentTestManager.reportStepPass("Scroll bar is not available on "+strTestObject+" page");
				elementStatus = true;
			}
		}catch(Exception e){
			log.info("Error occurred, while finding the scroll bar element on page");
			ExtentTestManager.reportStepFail(driver,"Scroll bar is not available on "+strTestObject+" page" , true);
			elementStatus = false;
		}
		return elementStatus;
	}

	public synchronized boolean pageScrollUp(String getValueFromPOM, String strTestObject) {
		boolean elementStatus = false;
		try{
			WebElement scroll = selectByLocatorType(getValueFromPOM);
			scroll.sendKeys(Keys.PAGE_UP);
			ExtentTestManager.reportStepPass("Scroll bar moved up successfully in "+strTestObject+" page");
			elementStatus = true;
		}catch(WebDriverException e){
			ExtentTestManager.reportStepPass("Scroll bar moved up successfully in "+strTestObject+" page");
			elementStatus = true;
		}
		catch(Exception e){
			log.info("Error occurred, while set the status for scroll bar");
			ExtentTestManager.reportStepFail(driver,"Error occurred, while scroll bar moved up in "+strTestObject+" page" , true);
			elementStatus = false;
		}
		return elementStatus;
	}

	public synchronized boolean threadingForEvents(){
		try{
			Runtime.getRuntime().exec("AutoIT//Registration_page_alert_close.exe");
		}catch(Exception e){
			log.info("Error occurred, while executing AutoIT function for Registration process");
			e.printStackTrace();
		}
		return true;
	}

	public synchronized boolean WebCheckboxON(String getValueFromPOM, String strTestObject ){
		boolean elementStatus=false;
		try {

			if (!selectByLocatorType(getValueFromPOM).isSelected())
			{
				selectByLocatorType(getValueFromPOM).click();
			}
			ExtentTestManager.reportStepPass("Checkbox  '"+ strTestObject +"' is  selected successfully.");
			elementStatus=true;
		} catch (StaleElementReferenceException e) {
			return WebCheckboxON(getValueFromPOM, strTestObject);
		} catch (NoSuchElementException e) {
			ExtentTestManager.reportStepFail(driver,"WebElement  '"+ strTestObject +"'  is not selected." , true); 
			elementStatus=false;
		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"WebElement  '"+ strTestObject +"'  is not selected." , true); 
			elementStatus=false;
		}
		return elementStatus;
	}

	public synchronized boolean webCheckBoxCheckStatus(String getValueFromPOM, String strTestObject) {
		boolean elementStatus = false;
		try{
			if(selectByLocatorType(getValueFromPOM).getAttribute("checked").equals("true")){
				ExtentTestManager.reportStepPass("Checkbox '"+ strTestObject +"' is Checked successfully.");
				elementStatus = true;
			}
			else if(selectByLocatorType(getValueFromPOM).getAttribute("checked").equals(null)){
				ExtentTestManager.reportStepFail(driver,"Checkbox '"+ strTestObject +"' is Unchecked.", true);
				elementStatus = false;
			}
		}catch(StaleElementReferenceException e){
				return webCheckBoxCheckStatus(getValueFromPOM, strTestObject);
		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Exception occured while verifying the webCheckBoxCheckStatus. "+e, true);
			elementStatus = false;
		}
		return elementStatus;
	}

	public synchronized boolean webCheckBoxUnCheckStatus(String getValueFromPOM, String strTestObject) {
		boolean elementStatus = false;
		try{
			if(selectByLocatorType(getValueFromPOM).getAttribute("disabled").equals("true")){
				ExtentTestManager.reportStepPass("Checkbox '"+ strTestObject +"' is UNCHECKED successfully.");
				elementStatus = true;
			}
			else{
				ExtentTestManager.reportStepFail(driver, "Checkbox '"+ strTestObject +"' is not UNCHECKED.", true);
				elementStatus = false;
			}
		}catch(StaleElementReferenceException e){
			return webCheckBoxUnCheckStatus(getValueFromPOM, strTestObject);
		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Exception occured while verifying the webCheckBoxUnCheckStatus. "+e, true);
			elementStatus = false;
		}
		return elementStatus;
	}
	
	public synchronized boolean WebCheckboxOFF(String getValueFromPOM, String strTestObject){
		boolean elementStatus=false;
		try {
			if ((selectByLocatorType(getValueFromPOM)).isSelected())
			{
				selectByLocatorType(getValueFromPOM).click();
			}
			ExtentTestManager.reportStepPass("Checkbox '"+ strTestObject +"' is  UNCHECKED successfully.");
			elementStatus=true;
		} catch (StaleElementReferenceException e) {
			return WebCheckboxOFF(getValueFromPOM, strTestObject);
		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Element '"+ strTestObject +"'  is not UNCHECKED. Exception is "+e, true); 
			log.info("No Element Found to check" + e);
			elementStatus=false;
		}
		return elementStatus;
	}

	public synchronized boolean WebElementEmpty(String getValueFromPOM, String strTestObject ){
		boolean elementStatus=false;
		try {
			if ((selectByLocatorType(getValueFromPOM)).getAttribute("value").equals(""))
			{
				ExtentTestManager.reportStepPass("Element '"+ strTestObject +"'s values is Empty.");
				elementStatus=true;
			}
		} catch (StaleElementReferenceException e) {
			return WebElementEmpty(getValueFromPOM, strTestObject);
		}  catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"Exception occured while verfiying the WebElementEmpty. Exception is "+e , true); 
			elementStatus=false;
		}
		return elementStatus;
	}

	public synchronized boolean Statictextcompare(String Expected_Value, int strExecEventFlag){
		boolean elementStatus= false;
		String expectedtext = null;
		String actualtext = null;
		try{
			if(strExecEventFlag==1){
				expectedtext=getTestData(testDataFilePathStatic, testComponentNameStatic,Expected_Value,gblrecordsCounterStatic);
			}

			if(expectedtext==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
			}

			new WebDriverWait(driver,30).until(ExpectedConditions.alertIsPresent());
			Alert alert = driver.switchTo().alert();
			actualtext = alert.getText();
			String actual = actualtext.replaceAll("[\n\r]", "");
			String exp = expectedtext.replaceAll("[\n\r]", "");

			if(actual.equalsIgnoreCase(exp))
			{
				elementStatus=true;
				ExtentTestManager.reportStepPass("Actual value '"+ actualtext +"' matches with the expected value '"+ expectedtext +"'.");
			} else {
				elementStatus=false;
				ExtentTestManager.reportStepFail(driver, "Actual value '"+ actualtext + "' doesn't matches with the expected value '"+ expectedtext +"'.", true);	
			}
			alert.accept();
		} catch (Exception e) { 
			elementStatus=false;
			ExtentTestManager.reportStepFail(driver, "Error occured while retriveing the text from Popup alert.Error description is : "+ e.getMessage() +".", true);
			log.info("Statictextcompare Error : " + e);
		}
		return elementStatus;
	}

	public synchronized boolean staticAlertDismiss(String expectedValue, int strExecEventFlag) {
		boolean elementStatus = false;
		String actualText = null;
		String expectedText = null;
		
		try{
			if(strExecEventFlag==1){
				expectedText = getTestData(testDataFilePathStatic, testComponentNameStatic, expectedValue, gblrecordsCounterStatic);
			}

			if(expectedText == null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
			}

			new WebDriverWait(driver, 30).until(ExpectedConditions.alertIsPresent());
			Alert alert = driver.switchTo().alert();
			actualText = alert.getText();
			alert.dismiss();

			if(actualText.equalsIgnoreCase(expectedText))
			{
				elementStatus=true;
				ExtentTestManager.reportStepPass("Actual value '"+ actualText +"' matches with the expected value '"+expectedText+"' and Alert is dismissed successfully.");
			} else {
				elementStatus=false;
				ExtentTestManager.reportStepFail(driver, "Actual value '"+ actualText +"' doesn't matches with the expected value '"+ expectedText +"' and alert is dismissed", true);	
			}
		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Exception occured while staticAlertDismiss. Exception is "+e , true);
			elementStatus = false;
		}
		return elementStatus;
	}

	public synchronized boolean XMLValueUpdate(String filePath, String key, String value, int strExecEventFlag) {
		boolean elementStatus = false;
		String Path = null;
		String validKey = null;
		String validValue = null;
		String prevValue = null;
		String newValue = null;
		try{
			if(strExecEventFlag == 1){
				Path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic,filePath, gblrecordsCounterStatic));
				validKey = getTestData(testDataFilePathStatic, testComponentNameStatic,key,gblrecordsCounterStatic);
				validValue = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic,value, gblrecordsCounterStatic));
			}

			if(Path==null || validKey==null || validValue==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
			}

			DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = builderFactory.newDocumentBuilder();
			File input = new File("//\\" +Path);
			Document doc = builder.parse(input);
			XPath xpath = XPathFactory.newInstance().newXPath();
			//Xpath Expression
			String expression = "//*[@key='"+validKey+"']";
			//Using node and elements to get the all child attributes 
			NodeList nodeList = (NodeList) xpath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for(int i = 0; i<nodeList.getLength(); i++){
				Node nNode = nodeList.item(i);
				if(nNode.getNodeType() == Node.ELEMENT_NODE){
					Element eElement = (Element) nNode;
					if(eElement.getAttribute("value") != null){
						prevValue = eElement.getAttribute("value");
						log.info("Current Value :"+prevValue);
						eElement.setAttribute("value", validValue);
						newValue = eElement.getAttribute("value");
						log.info("Updated Value :"+newValue);
					} else {
						log.info("Given attribute value is not available");
					}
				}
				// write the content into config file
				TransformerFactory transFormerFactory = TransformerFactory.newInstance();
				Transformer transFormer = transFormerFactory.newTransformer();
				DOMSource source = new DOMSource(doc);
				StreamResult result = new StreamResult(input);
				transFormer.transform(source, result);
				elementStatus = true;
			}
		}catch(Exception e){
			e.printStackTrace();
			elementStatus = false;
		}

		if(elementStatus){
			ExtentTestManager.reportStepPass("XML Node is updated with the value '"+newValue+"' for the key '"+validKey+"' successfully");
		}else{
			ExtentTestManager.reportStepFail(driver,"XML Node is not updated with the value '"+newValue+"' for the key '"+validKey+"'" , true);
		}
		return elementStatus;
	}

	public synchronized boolean deleteLogFiles(String filePath, String startsWith, String endsWith, int strExecEventFlag) {
		boolean functionStatus = true;
		String path = null;
		String startValue = null;
		String endValue = null;
		String fileMovePath = null;
		
		int flag = 0;

			try{
			
			if(strExecEventFlag == 1){
				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, gblrecordsCounterStatic));
				startValue = getTestData(testDataFilePathStatic, testComponentNameStatic, startsWith,gblrecordsCounterStatic);
				endValue = getTestData(testDataFilePathStatic, testComponentNameStatic, endsWith,gblrecordsCounterStatic);
				

			}
			if(path==null || startValue==null || endValue==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
				}
			
			}catch(Exception e){
				
				ExtentTestManager.reportStepFail(driver,"Exception occurred while getting the values for "+path+", "+startValue+" & "+endValue+" " , false);
				
			}
			
			
			try{
				
				InputStream inStream = null;
				OutputStream outStream = null;
				
				Date date = new Date();
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MMM.yyyy-hh_mm_ss");
				
				String todayDate = dateFormat.format(date);
				
				File directory = new File("//\\" +path);
				for(File listOfFiles : directory.listFiles()){
					if(listOfFiles.getName().startsWith(startValue) && listOfFiles.getName().endsWith(endValue)){
						
						fileMovePath = property.getProperty("logFilesAlternatePath");
						File existFile = new File("//\\" +path+startValue+endValue);
						File replaceFile = new File("//\\" +fileMovePath+todayDate+endValue);
						
						inStream = new FileInputStream(existFile);
						outStream = new FileOutputStream(replaceFile);
						
						if(existFile.length() != 0){
						
						log.info("File is available");
						
						byte[] buffer = new byte[10240];
						
						int length;
						
						//Copy the file
						
						log.info("Going to move the files");
						
						while((length = inStream.read(buffer)) > 0){
							
							outStream.write(buffer, 0, length);
							
						}
						
							inStream.close();
							outStream.close();
							
							ExtentTestManager.reportStepPass("Log file is copied to path("+fileMovePath+") successfully and named with today's date");
							break;
							
						}
						
					}
				}
				
			}catch(FileNotFoundException e){
				
				ExtentTestManager.reportStepPass("Log file is not available");
				log.info(e.getMessage());
				
			}catch(Exception e){
				
				ExtentTestManager.reportStepPass("Log file is not available");
				log.info(e.getMessage());
				
			}
			
			
			try{
			
			File directory = new File("//\\" +path);
			for(File listOfFiles : directory.listFiles()){
				if(listOfFiles.getName().startsWith(startValue) && listOfFiles.getName().endsWith(endValue)){
					listOfFiles.delete();
					flag = 1;
				}
			}

		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occurred while deleting the file with expected file Start Name '"+startValue+"'" , false);
			functionStatus = false;
		}

		if(flag == 1){
			ExtentTestManager.reportStepPass("Files with names starting like '"+startValue+"' and file type as '"+endValue+"' are deleted sucessfully.");
		} else {
			ExtentTestManager.reportStepPass("Files with names starting like '"+startValue+"' and file type as '"+endValue+"' are not present in the given Path : '"+ path +"'.");
		}
		return functionStatus;
	}

	public synchronized boolean fileUpload(String filePath, String strTestObject) {

		boolean elementStatus = false;
		String getBrowserName = browserProperty.getProperty("testBrowser");

		try{
			//Set the Path for DLL
			File file = new File("lib", "jacob-1.14.3-x86.dll");
			//Get the absolute path for DLL
			System.setProperty(LibraryLoader.JACOB_DLL_PATH, file.getAbsolutePath());
			//Get the Jacob DLL path from local
			File jacobDLLPath = new File(property.getProperty("AutoIT_Jacob_DLL_Path"));
			String dLLAbsolutePath = jacobDLLPath.getAbsolutePath();
			//Get the Jacob DLL absolute path
			System.setProperty(LibraryLoader.JACOB_DLL_PATH, dLLAbsolutePath);
			LibraryLoader.loadJacobLibrary();
			File localPath = new File(filePath);
			//Get the upload file absolute path
			String absoluteFilepath = localPath.getAbsolutePath();
			AutoItX autoIT = new AutoItX();

			//Based on Browsers AutoIT tool will be executed
			if(getBrowserName.equalsIgnoreCase("IE")){

				autoIT.winActivate("Choose File to Upload");
				if(autoIT.winWaitActive("Choose File to Upload", "", 10)){
					if(autoIT.winExists("Choose File to Upload")){
						autoIT.sleep(1000);
						autoIT.send(absoluteFilepath);
						autoIT.send("{Enter}",false);	
						log.info("File has been uploaded successfully in IE browser");
						elementStatus = true;

					}
				}

				log.info("File has been uploaded successfully in IE browser");
				elementStatus = true;
			} 
			else if(getBrowserName.equalsIgnoreCase("Firefox")){
				autoIT.winActivate("File Upload");
				if(autoIT.winWaitActive("File Upload", "", 10)){
					if(autoIT.winExists("File Upload")){
						autoIT.sleep(500);
						autoIT.send(absoluteFilepath);	                
						autoIT.send("{Enter}",false);
						log.info("File has been uploaded successfully in Firefox browser");
						elementStatus = true;
					}
				}
			}else if(getBrowserName.equalsIgnoreCase("Chrome")){

				autoIT.winActivate("Open");
				if(autoIT.winWaitActive("Open", "", 10)){
					if(autoIT.winExists("Open")){
						autoIT.sleep(500);
						autoIT.send(absoluteFilepath);	                
						autoIT.send("{Enter}",false);
						log.info("File has been uploaded successfully in Chrome browser");
						elementStatus = true;
					}		
				}
			}	
		}catch(Exception e){
			log.info("Exception occurred in FileUpload using AutoITX :"+e.getMessage());
			e.printStackTrace();
			elementStatus = false;
		}
		
		if(elementStatus){
			ExtentTestManager.reportStepPass("The file is uploaded successfully using AUTOIT");
		} else{
			ExtentTestManager.reportStepFail(driver, "Error occured while uploading the file using AUTOIT", true);
		}
		
		return elementStatus;
	}

	public synchronized boolean WebElementAttributeValueCompare(String getValueFromPOM, String strTestObject,String strAttributeName,String strExpectedAttrValue,int strExecEventFlag ){
		boolean WebEditEnterAndCompareValue=false;
		String actualAttributeValue=null;
		String attributeName=null;
		String expectedAttributeValue=null;
		try {
			if(strExecEventFlag==1){
				attributeName=getTestData(testDataFilePathStatic, testComponentNameStatic,strAttributeName,gblrecordsCounterStatic);
				expectedAttributeValue=getTestData(testDataFilePathStatic, testComponentNameStatic,strExpectedAttrValue,gblrecordsCounterStatic);
			}
			
			if(attributeName==null || expectedAttributeValue==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the dataSheet.", false);
				return false;
			}
			actualAttributeValue = selectByLocatorType(getValueFromPOM).getAttribute(attributeName);
			
			if((actualAttributeValue.trim()).equalsIgnoreCase(expectedAttributeValue.trim())){
				WebEditEnterAndCompareValue=true;
				ExtentTestManager.reportStepPass( "The Actual attribute value '"+actualAttributeValue+"' of "+strTestObject+" matches with the expected value '" + actualAttributeValue + "' matches with the Expected value '" + expectedAttributeValue + "'");
				if(strAttributeName.trim().equalsIgnoreCase("disabled")){
					ExtentTestManager.reportStepPass( "The "+strTestObject+" is disabled");	
				}
			}else{
				WebEditEnterAndCompareValue=false;
				ExtentTestManager.reportStepFail(driver,  "The Actual attribute value '"+actualAttributeValue+"' of "+strTestObject+" does not match with the expected value '" + actualAttributeValue + "' matches with the Expected value '" + expectedAttributeValue + "'", true);
				if(strAttributeName.trim().equalsIgnoreCase("disabled")){
					ExtentTestManager.reportStepFail(driver, "The "+strTestObject+" is not disabled", true);
				}
			}
		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver, "Error occured with Web element attribute value compare. Exception is "+e.getMessage(), true);
			WebEditEnterAndCompareValue=false;
		}
		return WebEditEnterAndCompareValue;
	}

	public synchronized boolean sleepForFunction(){
		try{
			Thread.sleep(5000);
		}catch(Exception e){
			log.info("Issue in Thread.sleep "+e.getMessage());
		}
		return true;
	}

	public synchronized boolean webElementTabClick(String getValueFromPOM, String strTestObject){
		boolean elementStatus = false;
		try {
			if(selectByLocatorType(getValueFromPOM).isDisplayed()){
				selectByLocatorType(getValueFromPOM).sendKeys(Keys.TAB);			
				ExtentTestManager.reportStepPass("Tab button is clicked successfully on '"+strTestObject+"' field");		
				elementStatus = true;
			}else{

				ExtentTestManager.reportStepFail(driver,"Element is not found and Tab button is not clicked on '"+strTestObject+"' field", true); 	
				elementStatus = false;

			}
		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"Exception occurred in 'webElementTabClick' function. Exception is "+e, true); 	
			elementStatus = false;
		}
		return elementStatus;
	}

	public synchronized boolean checkElementIsDisplayed(String getValueFromPOM, String strTestObject) {
		boolean elementvisible;
		boolean checkElementIsDisplayed = false;
		try {
			elementvisible=selectByLocatorType(getValueFromPOM).isDisplayed();
			if(elementvisible){
				checkElementIsDisplayed = true;
				ExtentTestManager.reportStepPass("Element '"+strTestObject+"' is Displayed successfully");
			}else{
				checkElementIsDisplayed = false;
				ExtentTestManager.reportStepFail(driver,"Element '"+strTestObject+"' is not Displayed", true);
			}
		} catch (Exception e) { 	
			checkElementIsDisplayed = false;
		}
		return checkElementIsDisplayed;
	}

	public synchronized boolean ScrollIntoElement(String getValueFromPOM,  String strTestObject) {
		boolean ScrollIntoElement=false;
		int timeout=30;
		try{
			for(int i=0;i<timeout;i++){
				WebElement elementenable=selectByLocatorType(getValueFromPOM);
				((JavascriptExecutor)driver).executeScript("arguments[0].scrollIntoView();", elementenable);
				if(elementenable.isDisplayed()){
					ExtentTestManager.reportStepPass("Item focus moved to Element '"+strTestObject+"' successfully with in '"+i+"' seconds" );
					ScrollIntoElement=true;
					break;
				}
				Thread.sleep(1000L);
			}
		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Item focus not moved to Element '"+strTestObject+"' waited for '"+timeout+"' seconds" , true); 
			return ScrollIntoElement;
		}
		return ScrollIntoElement;
	}
	
	public synchronized boolean SQLAllSelect(String Type,String sqltablename, String strsqlcolumnname,String strsqlcondition,String strExpectedvalue,String Days_to_add,String strenvironmentvariable,int strExecEventFlag){

		boolean result=false;
		String actionType=null;
		try{

			if (strExecEventFlag==1){
				actionType=getTestData(testDataFilePathStatic, testComponentNameStatic,Type,gblrecordsCounterStatic);
			}
			if(actionType==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			if(actionType.trim().equalsIgnoreCase("Normal")){
				result= SQLDBSelect(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
			}else if(actionType.trim().equalsIgnoreCase("Date")){
				result= SQLDBDateFormatCompare(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
			}else if(actionType.trim().equalsIgnoreCase("FutureDate")){
				result= SQLDBFutureDateCompare(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, Days_to_add, strExecEventFlag);
			}else if(actionType.trim().equalsIgnoreCase("EnvVar")){
				result= SQLDBSelectFromEnv(sqltablename, strsqlcolumnname, strsqlcondition, strenvironmentvariable, strExecEventFlag);
			}else if(actionType.trim().equalsIgnoreCase("EnvCon")){
				result= SQLDBSelectConditionFromEnvvar(sqltablename, strsqlcolumnname, strsqlcondition, strenvironmentvariable, strExpectedvalue, strExecEventFlag);
			}else if(actionType.trim().equalsIgnoreCase("DateInEnvVar")){
				result= SQLDBDateCompareInEnvVar(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strenvironmentvariable, 1);
			}else{
				ExtentTestManager.reportStepFail(driver, "Invalid Action Type described in Excel sheet  "+actionType+"", false);
			}
		}catch (Exception e) {
			ExtentTestManager.reportStepFail(driver, "Error occured while comparing the values in SQL query.Error description is : "+ e.getLocalizedMessage() +".", false);
			return false;
		}
		return result;
	}
	
	public synchronized boolean SQLDBSelect(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strExpectedvalue,int strExecEventFlag){
		boolean functionStatus=false;
		String query=null;
		String check;
		String Table_name;
		String Column_name;
		String SQL_condition;
		String Expected_value;
		String Actual_Value;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedvalue, gblrecordsCounterStatic);
			}else{
				Table_name=sqltablename;
				Column_name=strsqlcolumnname;
				SQL_condition=strsqlcondition;
				Expected_value=strExpectedvalue;
			}

			if(Table_name==null || Column_name==null || SQL_condition==null||Expected_value==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			String pattern = "^Count\\((.*)\\)";
			// Create a Pattern object
			  Pattern r = Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
			// Now create matcher object.
			  Matcher m = r.matcher(Column_name);
			  if (m.find( )) {
				return SQLDBCheckNoOfRowsExist(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
			  }
				
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

			//Check for Record Available
			ResultSet rs_SQLServerCheck = stmt.executeQuery(check);
			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = stmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else{

				ResultSet rs_SQLServer = stmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1).trim();
				
				if(Actual_Value.contains("E-10")){
					Actual_Value = new BigDecimal(Actual_Value).toPlainString();
				}

				if (Expected_value.contains("CURRENT_DATE")){
					String []ExpectedvalueWithFormat=Expected_value.split("#");
					String db_Date = Actual_Value.split(" ")[0];
					Actual_Value=db_Date;
					Date date=new Date();			
					SimpleDateFormat dateformat=new SimpleDateFormat(ExpectedvalueWithFormat[1]);
					Expected_value=dateformat.format(date);
				}

				if(Actual_Value.equalsIgnoreCase(Expected_value)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query '"+query+"'.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean SQLDBDateFormatCompare(String sqltablename, String strsqlcolumnname,String strsqlcondition,String dateFormatFromExcel,int strExecEventFlag){
		boolean functionStatus= false;
		String query = null;  
		String check = null; 
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String Actual_Value = null;
		String Current_Date=null;
		String expected_db_Date = null;
		String dateFormatToConvert = null;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				dateFormatToConvert=getTestData(testDataFilePathStatic, testComponentNameStatic, dateFormatFromExcel, gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null || dateFormatToConvert==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			DateFormat dateFormat = new SimpleDateFormat(dateFormatToConvert);
			Date date = new Date();
			Current_Date = dateFormat.format(date);
			Expected_value = Current_Date.trim();

			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

			ResultSet rs_SQLServerCheck= stmt.executeQuery(check);

			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = stmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the RRBS Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the RRBS Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else if(!(rs_SQLServerCheck.wasNull())){

				ResultSet rs_SQLServer= stmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1);

				String db_Date = Actual_Value.split(" ")[0];
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
				Date dateToChange = dateFormat1.parse(db_Date);
				SimpleDateFormat finalDateFormat = new SimpleDateFormat(dateFormatToConvert);
				expected_db_Date = finalDateFormat.format(dateToChange);

				if(expected_db_Date.equals(Expected_value)){
					ExtentTestManager.reportStepPass("Actual Date '"+Actual_Value+"' for the SQL Query "+query+" matches the expected Date '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(expected_db_Date.equals(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual Date '"+Actual_Value+"' for the SQL Query "+query+" does not match the expected Date '"+Expected_value+"'",false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean SQLDBFutureDateCompare(String sqltablename, String strsqlcolumnname,String strsqlcondition,String Date_Format,String Days_to_add,int strExecEventFlag){
		boolean functionStatus= false;
		String query = null;  
		String check = null; 
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String Actual_Value = null;
		String Current_Date=null;
		String expected_db_Date = null;
		String daystoadd = null;


		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				daystoadd=getTestData(testDataFilePathStatic, testComponentNameStatic, Days_to_add, gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null || daystoadd==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			int Add_Days = Integer.parseInt(daystoadd);
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			Calendar expdate = Calendar.getInstance();
			expdate.setTime(date);
			expdate.add(Calendar.DATE, Add_Days);
			Current_Date = dateFormat.format(expdate.getTime());
			Expected_value = Current_Date.trim();

			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

			ResultSet rs_SQLServerCheck= stmt.executeQuery(check);

			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = stmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the RRBS Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the RRBS Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else if(!(rs_SQLServerCheck.wasNull())){

				ResultSet rs_SQLServer= stmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1);

				String db_Date = Actual_Value.split(" ")[0];
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
				Date dateToChange = dateFormat1.parse(db_Date);
				SimpleDateFormat finalDateFormat = new SimpleDateFormat(Date_Format);
				expected_db_Date = finalDateFormat.format(dateToChange);

				if(expected_db_Date.equals(Expected_value)){
					ExtentTestManager.reportStepPass("Actual Date '"+Actual_Value+"' for the SQL Query "+query+" matches the future expected Date '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(expected_db_Date.equals(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual Date '"+Actual_Value+"' for the SQL Query "+query+" does not match the future expected Date '"+Expected_value+"'",false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean SQLDBSelectFromEnv(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strEnvVariableColumn,int strExecEventFlag){
		String query = null;
		String check;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String envVariable=null;
		String Actual_Value = null;
		boolean functionStatus=false;
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
				envVariable=getTestData(testDataFilePathStatic, testComponentNameStatic,strEnvVariableColumn,gblrecordsCounterStatic);
			}
			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
			}

			Expected_value=Runtimevalue.getProperty(envVariable);
			if(Expected_value==null){
				ExtentTestManager.reportStepFail(driver,"Dynamic Variable '"+envVariable+"' has NO VALUE", false);
				return false;
			}
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

			//Check for Record Available
			ResultSet rs_SQLServerCheck = stmt.executeQuery(check);
			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = stmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {

				log.info("Acual value is nULL");

				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the SQL Query "+query+" matches the expected value from ENV Variable '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the SQL Query "+query+" does not match with the expected value from ENV Variable '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else{
				ResultSet rs_SQLServer = stmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1).trim();
				if(Actual_Value.equalsIgnoreCase(Expected_value)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the SQL Query "+query+" matches the expected value from ENV Variable '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the SQL Query "+query+" does not match with the expected value from ENV Variable '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean SQLDBSelectConditionFromEnvvar(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strenvironmentvariable,String strExpectedvalue,int strExecEventFlag){
		boolean functionStatus= false;
		String query = null;
		String check=null;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String SQL_condition_value = null;		
		String Expected_value = "";
		String Actual_Value = null;
		String environmentvariable=null;
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic,strExpectedvalue,gblrecordsCounterStatic);
				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic,strExpectedvalue,gblrecordsCounterStatic);
				environmentvariable=getTestData(testDataFilePathStatic, testComponentNameStatic,strenvironmentvariable,gblrecordsCounterStatic);
				SQL_condition_value = Runtimevalue.getProperty(environmentvariable);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
				return false;
			}

			//Query to Execute 
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+ SQL_condition_value +"'";
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+ SQL_condition_value +"'";
			log.info("query is : "+query);

			//Check for Record Available
			ResultSet rs_SQLServerCheck = stmt.executeQuery(check);
			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = stmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else{

				ResultSet rs_SQLServer = stmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1).trim();

				if (Expected_value.contains("CURRENT_DATE")){
					String[] ExpectedvalueWithFormat=Expected_value.split("#");
					String db_Date = Actual_Value.split(" ")[0];
					Actual_Value=db_Date;
					Date date=new Date();			
					SimpleDateFormat dateformat=new SimpleDateFormat(ExpectedvalueWithFormat[1]);
					Expected_value=dateformat.format(date);
				}

				if(Actual_Value.equalsIgnoreCase(Expected_value)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"' where Condition value from ENV Variable '"+environmentvariable+"'");
					functionStatus= true;
				}else if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"' where Condition value from ENV Variable '"+environmentvariable+"'", false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean SQLDBDateCompareInEnvVar(String sqltablename, String strsqlcolumnname,String strsqlcondition,String dateFormatInSheet,String envVariable,int strExecEventFlag){
		boolean functionStatus= false;
		String query = null;  
		String check=null;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String Actual_Value = null;
		String expected_db_Date = null;
		String Date_Format=null;
		String envVariableName=null;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
				Date_Format=getTestData(testDataFilePathStatic, testComponentNameStatic,dateFormatInSheet,gblrecordsCounterStatic);
				envVariableName=getTestData(testDataFilePathStatic, testComponentNameStatic,envVariable,gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null || Date_Format ==null || envVariableName==null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
				return false;
			}

			Expected_value=Runtimevalue.getProperty(envVariableName);
			log.info("envVariableName is :"+envVariableName);
			log.info("value of envVariableName is :"+Expected_value);

			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";

			ResultSet rs_SQLServerCheck= stmt.executeQuery(check);

			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = stmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else if(!(rs_SQLServerCheck.wasNull())){

				ResultSet rs_SQLServer= stmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1);

				String db_Date = Actual_Value.split(" ")[0];

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
				Date dateToChange = dateFormat1.parse(db_Date);
				SimpleDateFormat finalDateFormat = new SimpleDateFormat(Date_Format);
				expected_db_Date = finalDateFormat.format(dateToChange);

				if(expected_db_Date.equals(Expected_value)){
					ExtentTestManager.reportStepPass("Actual Date '"+expected_db_Date+"' for the SQL Query "+query+" matches the expected Date '"+Expected_value+"' from ENV Variable '"+envVariableName+"'");
					functionStatus= true;
				}else if(!(expected_db_Date.equals(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual Date '"+expected_db_Date+"' for the SQL Query "+query+" does not match the expected Date '"+Expected_value+"' from ENV Variable '"+envVariableName+"'",true);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean SQLDBCheckNoOfRowsExist(String sqltablename, String strsqlcolumnname,String strsqlcondition,String  strNoOfRowsShouldBePresent,int strExecEventFlag){
		boolean SQLDBCheckValueExist= false;
		String query=null;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String noOfRowsShouldBePresent=null;
		int No_Of_Records = 0;
		
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
				noOfRowsShouldBePresent=getTestData(testDataFilePathStatic, testComponentNameStatic,strNoOfRowsShouldBePresent,gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
				return false;
			}
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"";
			ResultSet rs_SQLServer = stmt.executeQuery(query);		

			while(rs_SQLServer.next()){
				No_Of_Records = Integer.parseInt(rs_SQLServer.getString(1));
			}
			
			if(No_Of_Records==(Integer.parseInt(noOfRowsShouldBePresent))){
				ExtentTestManager.reportStepPass("Actual No. of Rows '"+ No_Of_Records +"' for the Query *"+query+"* matches with expected No of Rows '"+noOfRowsShouldBePresent+"'");
				SQLDBCheckValueExist=true;
			}else{
				ExtentTestManager.reportStepFail(driver, "Actual No. of Rows '"+ No_Of_Records +"' for the Query *"+query+"* does not match with expected No of Rows '"+noOfRowsShouldBePresent+"'", false);
				SQLDBCheckValueExist=true;
			}

		}catch (NullPointerException e) {
				ExtentTestManager.reportStepFail(driver,"Null Pointer exception occured while comparing the No.of Records", false);
				SQLDBCheckValueExist=false;
				
		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,    "Error occured while checking whether the executed query has any records (or) not. Error description is : "+ e.getMessage() +".", false);
			SQLDBCheckValueExist=false;
		}
		return SQLDBCheckValueExist;
	}
	
    public synchronized boolean RRBSAllSelect(String Type,String sqltablename, String strsqlcolumnname,String strsqlcondition,String strExpectedvalue,String Days_to_add,String strenvironmentvariable,int strExecEventFlag){
		
		boolean result=false;
		String actionType=null;
		try{
			
			if (strExecEventFlag==1){
				actionType=RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic,Type,gblrecordsCounterStatic);
			}
			if(actionType==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}
			if(actionType.trim().equalsIgnoreCase("Normal")){
				result=RRBSDBSelect(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue,strExecEventFlag);
			}else if(actionType.trim().equalsIgnoreCase("Date")){
				result=RRBSDBDateCompare(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue,strExecEventFlag);
			}else if(actionType.trim().equalsIgnoreCase("FutureDate")){
				result=RRBSDBFutureDateCompare(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, Days_to_add,strExecEventFlag);
			}else{
				log.info("Invalid Action item from Excel");
				ExtentTestManager.reportStepFail(driver, "Invalid Action Type described in Excel sheet - "+actionType, false);
			}
		}catch (Exception e) {
			ExtentTestManager.reportStepFail(driver, "Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage() +".", true);
			return false;
		}
		return result;
	}

	public synchronized boolean RRBSDateCompareFromDB(String sqltablename, String strsqlcolumnname,String strsqlcondition,String Date_Format,int strExecEventFlag)throws Exception  {

		boolean RRBSDBDateCompare= false;
		
		String dateQuery = null;
		String query = null;  
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String datePattern = null;
		String dbDatevalue = null;
		String dbValue = null;
		String splittedDBValue = null;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				datePattern = getTestData(testDataFilePathStatic, testComponentNameStatic, Date_Format, gblrecordsCounterStatic);
				
			}else{
				Table_name=sqltablename;
				Column_name=strsqlcolumnname;
				SQL_condition=strsqlcondition;
				datePattern=Date_Format;
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			//Date query to execute
			dateQuery = "SELECT TO_CHAR (SYSDATE, '"+datePattern+"') AS today FROM dual";

			ResultSet rs_SQLServerCheck = rrbsstatement.executeQuery(dateQuery);
				while (rs_SQLServerCheck.next()){
				dbDatevalue = rs_SQLServerCheck.getString(1).trim();
				}
				
			// Query to Execute      
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"";
			rs_SQLServerCheck = rrbsstatement.executeQuery(query);
			while (rs_SQLServerCheck.next()){
				dbValue = rs_SQLServerCheck.getString(1).trim();
				
				splittedDBValue = dbValue.split("\\ ")[0];
				
				}
			
			
			if(splittedDBValue.trim().equalsIgnoreCase(dbDatevalue)){
				
				ExtentTestManager.reportStepPass("Actual date : '"+splittedDBValue+"' in the column : '"+Column_name+"' of table : '"+Table_name+"' matches with the expected date : '"+dbDatevalue+" from the DB' ");
				RRBSDBDateCompare=true;
				
			}else{
				
				ExtentTestManager.reportStepFail(driver,"Actual date : '"+splittedDBValue+"' in the column : '"+Column_name+"' of table : '"+Table_name+"' is not matched with the expected date : '"+dbDatevalue+" from the DB' ",false);
				RRBSDBDateCompare=false;
				
			}
			
		}catch (Exception e){
			ExtentTestManager.reportStepFail( driver,"Error occured while executing the SQL query.Error description is : "+ e.getMessage(),false);
			log.info("RRBSDateCompareFromDB Error : " + e);
			RRBSDBDateCompare=false;
			}
		
		return RRBSDBDateCompare;
		
	}
	
	public synchronized boolean RRBSDBSelect(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strExpectedvalue,int strExecEventFlag){
		boolean functionStatus=false;
		String query=null;
		String check;
		String Table_name;
		String Column_name;
		String SQL_condition;
		String Expected_value;
		String Actual_Value;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedvalue, gblrecordsCounterStatic);
			}else{
				Table_name=sqltablename;
				Column_name=strsqlcolumnname;
				SQL_condition=strsqlcondition;
				Expected_value=strExpectedvalue;
			}

			if(Table_name==null || Column_name==null || SQL_condition==null||Expected_value==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			query = "SELECT "+Column_name+" FROM "+Table_name+" WHERE "+SQL_condition;
			check = "SELECT "+Column_name+" FROM "+Table_name+" WHERE "+SQL_condition;

			//Check for Record Available
			ResultSet rs_SQLServerCheck = rrbsstatement.executeQuery(check);
			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = rrbsstatement.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the RRBS Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the RRBS Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else if(!(rs_SQLServerCheck.wasNull())){

				ResultSet rs_SQLServer = rrbsstatement.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1).trim();

				if (Expected_value.contains("CURRENT_DATE")){
					String []ExpectedvalueWithFormat=Expected_value.split("#");
					String db_Date = Actual_Value.split(" ")[0];
					Actual_Value=db_Date;
					Date date=new Date();			
					SimpleDateFormat dateformat=new SimpleDateFormat(ExpectedvalueWithFormat[1]);
					Expected_value=dateformat.format(date);
				}

				if(Actual_Value.equalsIgnoreCase(Expected_value)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the RRBS Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the RRBS Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in RRBS query || "+query+".Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean RRBSDBDateCompare(String sqltablename, String strsqlcolumnname,String strsqlcondition,String Date_Format,int strExecEventFlag){
		boolean functionStatus= false;
		String query = null;  
		String check = null; 
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String Actual_Value = null;
		String Current_Date=null;
		String expected_db_Date = null;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			Current_Date = dateFormat.format(date);
			Expected_value = Current_Date.trim();

			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

			ResultSet rs_SQLServerCheck= rrbsstatement.executeQuery(check);

			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = rrbsstatement.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the RRBS Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the RRBS Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else if(!(rs_SQLServerCheck.wasNull())){

				ResultSet rs_SQLServer= rrbsstatement.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1);

				String db_Date = Actual_Value.split(" ")[0];
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
				Date dateToChange = dateFormat1.parse(db_Date);
				SimpleDateFormat finalDateFormat = new SimpleDateFormat(Date_Format);
				expected_db_Date = finalDateFormat.format(dateToChange);

				if(expected_db_Date.equals(Expected_value)){
					ExtentTestManager.reportStepPass("Actual Date '"+Actual_Value+"' for the RRBS Query "+query+" matches the expected Date '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(expected_db_Date.equals(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual Date '"+Actual_Value+"' for the RRBS Query "+query+" does not match the expected Date '"+Expected_value+"'",false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}

	public synchronized boolean RRBSDBFutureDateCompare(String sqltablename, String strsqlcolumnname,String strsqlcondition,String Date_Format,String Days_to_add,int strExecEventFlag){
		boolean functionStatus= false;
		String query = null;  
		String check = null; 
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String Actual_Value = null;
		String Current_Date=null;
		String expected_db_Date = null;
		String daystoadd = null;


		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				daystoadd=getTestData(testDataFilePathStatic, testComponentNameStatic, Days_to_add, gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null || daystoadd==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			int Add_Days = Integer.parseInt(daystoadd);
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			Calendar expdate = Calendar.getInstance();
			expdate.setTime(date);
			expdate.add(Calendar.DATE, Add_Days);
			Current_Date = dateFormat.format(expdate.getTime());
			Expected_value = Current_Date.trim();

			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";

			ResultSet rs_SQLServerCheck= rrbsstatement.executeQuery(check);

			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = rrbsstatement.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the RRBS Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the RRBS Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else if(!(rs_SQLServerCheck.wasNull())){

				ResultSet rs_SQLServer= rrbsstatement.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1);

				String db_Date = Actual_Value.split(" ")[0];
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
				Date dateToChange = dateFormat1.parse(db_Date);
				SimpleDateFormat finalDateFormat = new SimpleDateFormat(Date_Format);
				expected_db_Date = finalDateFormat.format(dateToChange);

				if(expected_db_Date.equals(Expected_value)){
					ExtentTestManager.reportStepPass("Actual Date '"+Actual_Value+"' for the RRBS Query "+query+" matches the future expected Date '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(expected_db_Date.equals(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual Date '"+Actual_Value+"' for the RRBS Query "+query+" does not match the future expected Date '"+Expected_value+"'",false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean SQLDBOpenConnection(String sqlserver, String sqldbname, String sqlusername, String sqlpassword){

		String dbUrl = "jdbc:sqlserver://"+ sqlserver +";DatabaseName=" + sqldbname +";";                  
		String username = sqlusername;   
		String password = sqlpassword; 

		if(sqldbname==null || sqlusername==null || sqlpassword==null || sqlserver==null){
			ExtentTestManager.reportStepFail(driver,"SQL DB details not provided in the Property file.", false);
			return false;
		}
		try {
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver"); 
			DriverManager.setLoginTimeout(10);
			con = DriverManager.getConnection(dbUrl,username,password);
			stmt = con.createStatement(); 
			ExtentTestManager.reportStepPass("SQL Connection for DB '"+sqldbname+"' in server '"+sqlserver+"' is established Successfully.");
			return true;

		} catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver,"Error occured while connecting to the SQL Server. Error description is : "+ e.getMessage(), false);
			return false;
		}
	}

	public synchronized boolean RRBSDBOpenConnection(String dbserver, String portnumber, String dbname, String dbusername, String dbpassword){
		String serverName = property.getProperty(dbserver);
		String portNumber = property.getProperty(portnumber);
		String sid = property.getProperty(dbname);
		String username = property.getProperty(dbusername);   
		String password = property.getProperty(dbpassword); 

		if(serverName==null || portNumber==null || sid==null || username==null||password==null){
			ExtentTestManager.reportStepFail(driver,"RRBS DB details not provided in the Property file.", false);
			return false;
		}

		try{
			String dbUrl = "jdbc:oracle:thin:@" + serverName + ":" + portNumber + ":" + sid; 
			Class.forName("oracle.jdbc.OracleDriver");         
			rrbsconnection = DriverManager.getConnection(dbUrl,username,password);
			rrbsstatement = rrbsconnection.createStatement(); 
			ExtentTestManager.reportStepPass("RRBS DB Connection is established from '"+sid+"' DB in '"+serverName+"' Successfully.");
			return true;

		} catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver, "Error occured while connecting to the SQL Server. Error description is : "+ e.getMessage(), false);
			return false;
		}
	}
	
	public synchronized boolean SQLDBCloseConnection(){
		try {
			con.close(); 
			ExtentTestManager.reportStepPass("SQL DB Connection disconnected successfully.");
			return true;
		} catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver,"Error occured while closing the SQL DB.Error description is : "+ e.getMessage(), false);
			return false;
		}
	}
	
	public synchronized boolean RRBSDBCloseConnection(){
		try {
			rrbsconnection.close(); 
			ExtentTestManager.reportStepPass("RRBS DB Connection disconnected successfully.");
			return true;
		} catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver,"Error occured while closing the RRBS DB.Error description is : "+ e.getMessage(), false);
			return false;
		}
	}
	
	public synchronized boolean DBCommonPreCondition(String dbType, String actionName,String sqltablename, String strsqlcolumnname,String strsqlcolumnvalue,String strsqlcondition, String dbEnvCond, String envCondColName, int strExecEventFlag){

		boolean status= false;
		String action=null;
		String Database=null;
		try {

			if(strExecEventFlag==1){
				Database = getTestData(testDataFilePathStatic, testComponentNameStatic, dbType, gblrecordsCounterStatic);
				action = getTestData(testDataFilePathStatic, testComponentNameStatic, actionName, gblrecordsCounterStatic);
			}	
			if(Database==null || action==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			if(Database.trim().equalsIgnoreCase("SQL")){
				if(action.trim().equalsIgnoreCase("Update")){
					status=SQLDBUpdate(sqltablename, strsqlcolumnname, strsqlcolumnvalue, strsqlcondition, strExecEventFlag);
				}else if(action.trim().equalsIgnoreCase("Delete")){
					status=SQLDBDelete(sqltablename, strsqlcondition, strExecEventFlag);
				}else if(action.trim().equalsIgnoreCase("DeleteAll")){
					status=SQLDBDeleteAll(sqltablename, strExecEventFlag);
				}else if(action.trim().equalsIgnoreCase("UpdateEnvCond")){
					status=SQLDBUpdateCondEnv(sqltablename, strsqlcolumnname, strsqlcolumnvalue, dbEnvCond, envCondColName, strExecEventFlag);
				}
				else
				{
					ExtentTestManager.reportStepFail(driver,"Invalid Action Type is described in Excel sheet : "+action+" for SQL", false);
					status=false;
				}

			}else if(Database.trim().equalsIgnoreCase("RRBS")) {

				if(action.trim().equalsIgnoreCase("Update")){
					status=RRBSDBUpdate(sqltablename, strsqlcolumnname, strsqlcolumnvalue, strsqlcondition, strExecEventFlag);
				}else if(action.trim().equalsIgnoreCase("Delete")){
					status=RRBSDBDelete(sqltablename, strsqlcondition, strExecEventFlag);
				}else{
					ExtentTestManager.reportStepFail(driver,"Invalid Action Type is described in Excel sheet : "+action+" for RRBS", false);
					status=false;
				}
			}else if(Database.trim().equalsIgnoreCase("HLR")) {

				if(action.trim().equalsIgnoreCase("Update")){
					status=HLRDBUpdate(sqltablename, strsqlcolumnname, strsqlcolumnvalue, strsqlcondition, strExecEventFlag);
				}else{
					ExtentTestManager.reportStepFail(driver,"Invalid Action Type is described in Excel sheet : "+action+" for HLR", false);
					status=false;
				}
			}else if(Database.trim().equalsIgnoreCase("ESHOP")) {

				if(action.trim().equalsIgnoreCase("Update")){
					status=EshopSQLDBUpdate(sqltablename, strsqlcolumnname, strsqlcolumnvalue, strsqlcondition, strExecEventFlag);
				}else if(action.trim().equalsIgnoreCase("Delete")){
					status=EshopSQLDBDelete(sqltablename, strsqlcondition, strExecEventFlag);
				}else{
					ExtentTestManager.reportStepFail(driver,"Invalid Action Type is described in Excel sheet : "+action+" for RRBS", false);
					status=false;
				}
			}else{
				ExtentTestManager.reportStepFail(driver,"Invalid Database is described in Excel sheet : "+action+"", false);
				status=false;
			}

		} catch (Exception e) { 
			status=false;
			ExtentTestManager.reportStepFail(driver, "Error occured while executing the DB Common PreCondition. Error description is : "+ e.getLocalizedMessage()+".", true);
			log.info("RRBSDBUpdate Error : " + e);
		}
		return status;
	}
	
	public synchronized boolean SQLDBUpdate(String sqltablename, String strsqlcolumnname,String strsqlcolumnvalue,String strsqlcondition,int strExecEventFlag){
		String Table_name;
		String Column_name;
		String Column_Value;
		String SQL_condition;
		String query;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				Column_Value=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnvalue, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
			}else{
				Table_name=sqltablename;
				Column_name=strsqlcolumnname;
				Column_Value=strsqlcolumnvalue;
				SQL_condition=strsqlcondition;
			}

			if(Table_name==null || Column_name==null || Column_Value==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			if(Column_Value.equalsIgnoreCase("NULL")){
				query = "update "+Table_name+" set "+Column_name+"=NULL where "+SQL_condition;
			}else{
				query = "update "+Table_name+" set "+Column_name+"="+Column_Value+" where "+SQL_condition;
			}

			stmt.execute(query);
			ExtentTestManager.reportStepPass("SQL Update Query  "+ query + " executed successfully.");
			return true;

		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"Error occured while executing to the SQL Update query. Error description is : "+ e.getMessage(), false);
			return false;
		}
	}
	
	public synchronized boolean RRBSDBUpdate(String sqltablename, String strsqlcolumnname,String strsqlcolumnvalue,String strsqlcondition,int strExecEventFlag){
		String Table_name;
		String Column_name;
		String Column_Value;
		String SQL_condition;
		String query;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				Column_Value=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnvalue, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
			}else{
				Table_name=sqltablename;
				Column_name=strsqlcolumnname;
				Column_Value=strsqlcolumnvalue;
				SQL_condition=strsqlcondition;
			}

			if(Table_name==null || Column_name==null || Column_Value==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			if(Column_Value.contains("to_date")){
				query = "update "+Table_name+" set "+Column_name+"="+Column_Value+" where "+SQL_condition;
			}else{
				if(Column_Value.equalsIgnoreCase("null")){
					query = "update "+Table_name+" set "+Column_name+"=null where "+SQL_condition;
				}else{
					query = "update "+Table_name+" set "+Column_name+"='"+Column_Value+"' where "+SQL_condition;
				}
			}

			rrbsstatement.execute(query);
			ExtentTestManager.reportStepPass("RRBS Update Query  "+ query + "  executed successfully.");
			return true;
		} catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver,"Error occured while executing RRBS Update Query. Error description is : "+ e.getMessage(), false);
			return false;
		}
	}
	
	public synchronized boolean SQLDBDelete(String sqltablename, String sqlcondition, int strExecEventFlag){
		String tablename = null;
		String condition = null;

		try {
		if(strExecEventFlag==1){
			tablename= getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
			condition= getTestData(testDataFilePathStatic, testComponentNameStatic, sqlcondition, gblrecordsCounterStatic);
		}else{
			tablename= sqltablename;
			condition= sqlcondition;
		}

		if(tablename==null || condition==null){
			ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
			return false;
		}
	
			String check = "select * from "+tablename +" where "+condition;
			String query = "Delete from "+ tablename +" where "+ condition;
			ResultSet rs = stmt.executeQuery(check);		
			int temp=0;	

			while(rs.next()){
				temp++;
			}
			if(temp >= 1){
				stmt.execute(query);
				ExtentTestManager.reportStepPass("SQL Delete Query  "+ query + "  executed successfully.");
				return true;
			}else{
				ExtentTestManager.reportStepPass( "SQL Delete Query  "+ query + "  has NO RECORDS in DB");
				return true;
			}

		}catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver,"Error occured while deleting to the SQL query. Error description is : "+ e.getMessage(), false);
			return false;
		}
	}
	
	public synchronized boolean RRBSDBDelete(String rrbstablename, String rrbscondition, int strExecEventFlag){
		String tablename = null;
		String condition = null;
		try{
			if(strExecEventFlag==1){
				tablename=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbstablename,gblrecordsCounterStatic);
				condition=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscondition,gblrecordsCounterStatic);
			}
			if(tablename==null || condition==null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
				return false;
			}
			String check = "select * from "+tablename +" where "+condition;
			String query = "Delete from "+ tablename +" where "+ condition;
			ResultSet rs = rrbsstatement.executeQuery(check);
			int temp = 0;
			while(rs.next()){
				temp++;
			}
			if(temp > 0){
				rrbsstatement.execute(query); 
				ExtentTestManager.reportStepPass("RRBS Delete Query "+ query +" executed successfully");
				return true;
			}
			else{
				ExtentTestManager.reportStepPass("RRBS Delete Query "+ query +" has NO RECORDS available in DB");
				return true;
			}
		} catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver, "Error occured while executing the RRBS query.Error description is : "+ e.getMessage() +".", false);
			return false;
		}
	}
	
	public synchronized boolean RRBSDBCheckValueExist(String sqltablename, String strsqlcolumnname,String strsqlcondition,int strExecEventFlag){
		boolean functionStatus=false;
		String query;
		String check;
		String Table_name;
		String Column_name;
		String SQL_condition;
		String Actual_Value;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
			}else{
				Table_name=sqltablename;
				Column_name=strsqlcolumnname;
				SQL_condition=strsqlcondition;
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";

			//Check for Record Available
			ResultSet rs_SQLServerCheck = rrbsstatement.executeQuery(check);
			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = rrbsstatement.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' exist for the RRBS Query "+query+".", false);
					functionStatus= false;
			}else{
				ResultSet rs_SQLServer = rrbsstatement.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1).trim();

				if(!(Actual_Value==null)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' exist for the RRBS Query "+query+".");
					functionStatus= true;
				}else if(Actual_Value==null){
					ExtentTestManager.reportStepFail(driver,"Value does not exist for the RRBS Query "+query+"'", false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in RRBS query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean RRBSDBConditionEnvVar(String SwitchCase, String rrbstablename, String rrbscolumnname, String rrbscondition, String rrbscolumnvalue, String strenvironmentvariable, int strExecEventFlag){
		boolean RRBSDBConditionEnvVar= false;
		String tablename = null;
		String condition = null;
		String columnname = null;
		String columnvalue = null;
		String actualvalue = null;
		String envvar = null;
		String reqCondition = null;
		String query = null;
		String query2 = null;
		String strenvvar = null;
		
		switch (SwitchCase){

		case "Select" :
			try{
				if(strExecEventFlag==1){
					tablename=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbstablename,gblrecordsCounterStatic);
					condition=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscondition,gblrecordsCounterStatic);
					columnname=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscolumnname,gblrecordsCounterStatic);
					columnvalue=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscolumnvalue,gblrecordsCounterStatic);
					strenvvar=getTestData(testDataFilePathStatic, testComponentNameStatic,strenvironmentvariable,gblrecordsCounterStatic);
				}
				if(tablename==null || condition==null || columnname==null || columnvalue==null || strenvvar ==null){
					ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
					return false;
				}
				envvar = Runtimevalue.getProperty(strenvvar);
				if(envvar==null){
					ExtentTestManager.reportStepFail(driver,    "Value in the environment variable : '"+ strenvvar +"' is empty.", false);
					return false;
				}
				reqCondition = condition + " = '"+ envvar +"'";
				query = "select "+ columnname +" from "+ tablename +" where "+ reqCondition;
				ResultSet rrbsresultset = rrbsstatement.executeQuery(query);
				while (rrbsresultset.next()){
					actualvalue = rrbsresultset.getString(1);
				}
				if(actualvalue.equalsIgnoreCase(columnvalue))
				{
					RRBSDBConditionEnvVar=true;
					ExtentTestManager.reportStepPass("Actual value '"+ actualvalue + "' for the Query '"+query+"' matches with the expected value '"+ columnvalue +"'.");
				} else {
					RRBSDBConditionEnvVar=false;
					ExtentTestManager.reportStepFail(driver, "Actual value '"+ actualvalue + "' for the Query '"+query+"' does not match with the expected value '"+ columnvalue +"'.", false);	
				}
			} catch (Exception e) { 
				RRBSDBConditionEnvVar=false;
				ExtentTestManager.reportStepFail(driver,    "Error occured while executing the EXIBS query. Error description is : "+ e.getMessage() +".", false);
			}

			break;
		case "Delete" :
			try{
				if(strExecEventFlag==1){
					tablename=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbstablename,gblrecordsCounterStatic);
					condition=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscondition,gblrecordsCounterStatic);
					strenvvar=getTestData(testDataFilePathStatic, testComponentNameStatic,strenvironmentvariable,gblrecordsCounterStatic);
				}
				if(tablename==null || condition==null || strenvvar ==null){
					ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
					return false;
				}

				envvar = Runtimevalue.getProperty(strenvvar);
				if(envvar==null){
					ExtentTestManager.reportStepFail(driver,"Value in the environment variable : '"+ strenvvar +"' is empty.", false);
					return false;
				}
				reqCondition = condition + " = '"+ envvar +"'";
				query = "Delete from "+ tablename +" where "+ reqCondition;
				rrbsstatement.executeQuery(query);
				RRBSDBConditionEnvVar=true;
				ExtentTestManager.reportStepPass("Delete Query '"+query+"' is executed successfully");

			} catch (Exception e) { 
				RRBSDBConditionEnvVar=false;
				ExtentTestManager.reportStepFail(driver,    "Error occured while executing the EXIBS query. Error description is : "+ e.getMessage() +".", false);
				log.info("RRBSDBConditionEnvVar Error : " + e);
			}
			break;

		case "Update" :
			try{

				if(strExecEventFlag==1){
					tablename=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbstablename,gblrecordsCounterStatic);
					condition=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscondition,gblrecordsCounterStatic);
					columnname=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscolumnname,gblrecordsCounterStatic);
					columnvalue=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscolumnvalue,gblrecordsCounterStatic);
					strenvvar=getTestData(testDataFilePathStatic, testComponentNameStatic,strenvironmentvariable,gblrecordsCounterStatic);
				}
				if(tablename==null || condition==null || columnname==null || columnvalue==null || strenvvar ==null){
					ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
					return false;
				}
				envvar = Runtimevalue.getProperty(strenvvar);
				if(envvar==null){
					ExtentTestManager.reportStepFail(driver,    "Value in the environment variable : '"+ strenvvar +"' is empty.", false);
					return false;
				}
				reqCondition = condition + " = '"+ envvar +"'";
				query = "select "+ columnname +" from "+ tablename +" where "+ reqCondition;
				ResultSet rrbsresultset = rrbsstatement.executeQuery(query);
				if (rrbsresultset.next()){
					query2 = "update "+ tablename +" set "+ columnname +" = "+ columnvalue +" where "+ reqCondition +"";
					rrbsstatement.executeQuery(query2);
					RRBSDBConditionEnvVar=true;
					ExtentTestManager.reportStepPass("Column Value '"+ columnvalue + "' is updated successfully for the Query '"+query2+"'.");
				}else {
					RRBSDBConditionEnvVar=false;
					ExtentTestManager.reportStepFail(driver,"No records found to update for the Query '"+query2+"'.", false);	
				}
			} catch (Exception e) { 
				RRBSDBConditionEnvVar=false;
				ExtentTestManager.reportStepFail(driver,    "Error occured while executing the EXIBS query.Error description is : "+ e.getMessage() +".", false);
			}
			break;
		}
		return RRBSDBConditionEnvVar;
	}
	
	public synchronized boolean RRBSDBSelectFromEnvCondition(String sqltablename, String strsqlcolumnname,String strsqlconditionCol,String envVariableColumnName,String strExpectedvalue,int strExecEventFlag){
		boolean RRBSDBSelect= false;
		String query = null;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		//String Expected_value = null;		
		String Expected_value = "";
		String Actual_Value = null;
		String envVariable=null;
		String evnCondtion=null;
		
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlconditionCol,gblrecordsCounterStatic);
				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic,strExpectedvalue,gblrecordsCounterStatic);
				envVariable=getTestData(testDataFilePathStatic, testComponentNameStatic,envVariableColumnName,gblrecordsCounterStatic);
				evnCondtion=Runtimevalue.getProperty(envVariable);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null||envVariable==null||evnCondtion==null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
				return false;
			}
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+evnCondtion+"'";
			ResultSet rrbsresultset = rrbsstatement.executeQuery(query);
			rrbsresultset.next();
			Actual_Value = rrbsresultset.getString(1).trim();

			if(!rrbsresultset.wasNull()){      
				if(Actual_Value.equalsIgnoreCase(Expected_value)){
					ExtentTestManager.reportStepPass("Actual value : '"+Actual_Value+"' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
					RRBSDBSelect=true;
				}else if(!(Actual_Value.equals(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value : '"+Actual_Value+"' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);
					RRBSDBSelect=false;
				}
			}
			else if(rrbsresultset.wasNull()){        // If "NULL" value is present in the fired Query
				if(Expected_value.equals("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
					RRBSDBSelect=true;
				}else if(!(Expected_value.equals("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);  	 
					RRBSDBSelect=false;
				}
			}
		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while RRBSDBSelectFromEnvCondition query. Error description is : "+ e.getMessage() +".", true);
			RRBSDBSelect=false;
		}
		return RRBSDBSelect;
	}
	
	public synchronized boolean RRBSDBDateCompareFromEnvCondition(String sqltablename, String strsqlcolumnname,String strsqlcondition,String envVariableColumnName,String Date_Format,int strExecEventFlag){

		boolean RRBSDBDateCompare= false;
		String query = null;  
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String Actual_Value = null;
		String Current_Date=null;
		String expected_db_Date = null;
		String envVariable=null;
		String evnCondtion=null;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
				envVariable=getTestData(testDataFilePathStatic, testComponentNameStatic,envVariableColumnName,gblrecordsCounterStatic);
				evnCondtion=Runtimevalue.getProperty(envVariable);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null || envVariable==null||evnCondtion==null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
				return false;
			}

			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			Current_Date = dateFormat.format(date);
			Expected_value = Current_Date.trim();
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+evnCondtion+"'";
			ResultSet rrbsresultset = rrbsstatement.executeQuery(query);
			rrbsresultset.next();
			Actual_Value = rrbsresultset.getString(1);
			String db_Date = Actual_Value.split(" ")[0];
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
			Date dateToChange = dateFormat1.parse(db_Date);			
			SimpleDateFormat finalDateFormat = new SimpleDateFormat(Date_Format);
			expected_db_Date = finalDateFormat.format(dateToChange);

			if(!rrbsresultset.wasNull()){

				if(expected_db_Date.equals(Expected_value)){
					ExtentTestManager.reportStepPass("Actual value : '"+Actual_Value+"' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
					RRBSDBDateCompare=true;
				}else if(!(expected_db_Date.equals(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value : '"+Actual_Value+"' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);
					RRBSDBDateCompare=false;
				}
			}
			else if(rrbsresultset.wasNull()){        // If "NULL" value is present in the fired Query
				if(Expected_value.equals("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
					RRBSDBDateCompare=true;
				}

				else if(!(Expected_value.equals("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);  	 
					RRBSDBDateCompare=false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while RRBSDBDateCompareFromEnvCondition. Error description is : "+ e.getMessage() +".", true);
			RRBSDBDateCompare=false;
		}
		return RRBSDBDateCompare;
	}
	
	public synchronized boolean RRBSDBFutureDateCompareFromEnvCondition(String sqltablename, String strsqlcolumnname,String strsqlcondition,String envVariableColumnName,String Date_Format,String Days_to_add,int strExecEventFlag){

		boolean RRBSDBFutureDateCompare= false;
		String query = null;  
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String Actual_Value = null;
		String Current_Date=null;
		String expected_db_Date = null;
		String daystoadd = null;

		String envVariable=null;
		String evnCondtion=null;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
				daystoadd = getTestData(testDataFilePathStatic, testComponentNameStatic, Days_to_add,gblrecordsCounterStatic);
				envVariable=getTestData(testDataFilePathStatic, testComponentNameStatic,envVariableColumnName,gblrecordsCounterStatic);
				evnCondtion=Runtimevalue.getProperty(envVariable);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null|| envVariable==null||evnCondtion==null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
				return false;
			}

			int Add_Days = Integer.parseInt(daystoadd);
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			Calendar expdate = Calendar.getInstance();
			expdate.setTime(date);
			expdate.add(Calendar.DATE, Add_Days);
			Current_Date = dateFormat.format(expdate.getTime());
			Expected_value = Current_Date.trim();
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+evnCondtion+"'";
			ResultSet rrbsresultset = rrbsstatement.executeQuery(query);
			rrbsresultset.next();
			Actual_Value = rrbsresultset.getString(1);
			String db_Date = Actual_Value.split(" ")[0];
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
			Date dateToChange = dateFormat1.parse(db_Date);			
			SimpleDateFormat finalDateFormat = new SimpleDateFormat(Date_Format);
			expected_db_Date = finalDateFormat.format(dateToChange);

			if(!rrbsresultset.wasNull()){          

				if(expected_db_Date.equals(Expected_value)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
					RRBSDBFutureDateCompare=true;

				}else if(!(expected_db_Date.equals(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);
					RRBSDBFutureDateCompare=false;
				}
			}
			else if(rrbsresultset.wasNull()){       
				if(Expected_value.equals("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
					RRBSDBFutureDateCompare=true;
				}

				else if(!(Expected_value.equals("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);  	 
					RRBSDBFutureDateCompare=false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,    "Error occured while RRBSDBFutureDateCompareFromEnvCondition .Error description is : "+ e.getMessage() +".", true);
			RRBSDBFutureDateCompare=false;
		}

		return RRBSDBFutureDateCompare;
	}
	
	public synchronized boolean RRBSStoreValueInEnvVar(String rrbstablename, String rrbscolumnname, String rrbscondition, String strenvvar, int strExecEventFlag){
		boolean RetrieveRRBSValueStoresInEnvVar = false;
		String tablename = null;
		String condition = null;
		String columnname = null;
		String actualvalue = null;
		String envVariableName="";
		try{
			if(strExecEventFlag==1){
				tablename=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbstablename,gblrecordsCounterStatic);
				condition=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscondition,gblrecordsCounterStatic);
				columnname=getTestData(testDataFilePathStatic, testComponentNameStatic,rrbscolumnname,gblrecordsCounterStatic);
				envVariableName=getTestData(testDataFilePathStatic, testComponentNameStatic,strenvvar,gblrecordsCounterStatic);
			}
			if(tablename==null || condition==null || columnname==null ){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}

			String query = "select "+ columnname +" from "+ tablename +" where "+ condition;
			ResultSet rrbsresultset = rrbsstatement.executeQuery(query);
			while (rrbsresultset.next()){
				actualvalue = rrbsresultset.getString(1);
			}
			Runtimevalue.setProperty(envVariableName, actualvalue);
			RetrieveRRBSValueStoresInEnvVar = true;
			ExtentTestManager.reportStepPass("DB Column value '"+ actualvalue + "' is stored in the environment variable :"+ envVariableName +".");

		} catch (Exception e) { 
			RetrieveRRBSValueStoresInEnvVar = false;
			ExtentTestManager.reportStepFail(driver, "Exception occured while executing the RRBSStoreValueInEnvVar query. Error description is : "+ e.getMessage() +".", false);
		}
		return RetrieveRRBSValueStoresInEnvVar;
	}
	
	public synchronized boolean RRBSDBCommonSelectFromEnv(String strType,String sqltablename, String strsqlcolumnname,String strsqlconditionCol,String evnNameWhichHasValue, String strsqlcolumnvalue,String Date_Format,String Days_to_add,int strExecEventFlag){
		boolean result= false;
		String type=null;
		try {
			if (strExecEventFlag==1){
				type=getTestData(testDataFilePathStatic, testComponentNameStatic,strType,gblrecordsCounterStatic);
			}
			if(type==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			if(type.trim().equalsIgnoreCase("Normal")){
				result=RRBSDBSelectFromEnvCondition(sqltablename, strsqlcolumnname, strsqlconditionCol, evnNameWhichHasValue, strsqlcolumnvalue,strExecEventFlag);
			}else if(type.trim().equalsIgnoreCase("Date")){
				result=RRBSDBDateCompareFromEnvCondition(sqltablename, strsqlcolumnname, strsqlconditionCol,evnNameWhichHasValue, Date_Format,strExecEventFlag);
			}else if(type.trim().equalsIgnoreCase("FutureDate")){
				result=RRBSDBFutureDateCompareFromEnvCondition(sqltablename, strsqlcolumnname, strsqlconditionCol,evnNameWhichHasValue, Date_Format, Days_to_add,strExecEventFlag);
			}else{
				log.info("Invalid Action item from Excel");
				ExtentTestManager.reportStepFail(driver,"Invalid Action Type described in Excel sheet - "+type, false);
			}
		} catch (Exception e) { 
			result=false;
			ExtentTestManager.reportStepFail(driver, "Error occured while executing the SQL query.Error description is : "+ e.getMessage() +".", true);
		}
		return result;
	}
	
	
	/***************************************************BASE CODE COMPLETED**********************************************************/
	
	/***************************************************NARESH CODE STARTED**********************************************************/
	
	
	
	
	
	
	
	
	/***************************************************NARESH CODE COMPLETED**********************************************************/
	
	
	
	/***************************************************KARTHI CODE STARTED**********************************************************/
	
	
	public synchronized boolean XMLTextUpdateMethod(String Location,String AttributeXPath,String ValueToSet,int strExecEventFlag) throws Exception, IOException{
		boolean Executionstatus=false;

		if (Location==""){
			ExtentTestManager.reportStepFail(driver,    "Location Path for WebConfig is missing", true);
			return false;
		}
		if (AttributeXPath==""){
			ExtentTestManager.reportStepFail(driver,    "AttributeXPath Path for WebConfig is missing", true);
			return false;
		}
		if (ValueToSet==""){
			ExtentTestManager.reportStepFail(driver,    "ValueToSet in the node for WebConfig is missing", true);
			return false;
		}
		if(strExecEventFlag==1){
			Location=getTestData(testDataFilePathStatic, testComponentNameStatic,Location,gblrecordsCounterStatic);
			Location=property.getProperty(Location);
			AttributeXPath=getTestData(testDataFilePathStatic, testComponentNameStatic,AttributeXPath,gblrecordsCounterStatic);
			ValueToSet=getTestData(testDataFilePathStatic, testComponentNameStatic,ValueToSet,gblrecordsCounterStatic);
			ValueToSet=property.getProperty(ValueToSet);

			if (ValueToSet==""){
				ExtentTestManager.reportStepFail(driver,    "Value present in Property File Seems to Empty.Please check the property file.", true);
				return false;
			}
		}

		try {
			DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
			DocumentBuilder builder=factory.newDocumentBuilder();;
			File file=new File("//\\"+Location);

			Document document=builder.parse(file);
			document.getDocumentElement().normalize();
			NodeList nodeList=null;
			XPath xpath=XPathFactory.newInstance().newXPath();
			nodeList=(NodeList)xpath.compile(AttributeXPath).evaluate(document,XPathConstants.NODESET);
			nodeList.item(0).setTextContent(ValueToSet);
			TransformerFactory transFormerFactory = TransformerFactory.newInstance();
			Transformer transFormer = transFormerFactory.newTransformer();
			DOMSource source = new DOMSource(document);

			StreamResult result = new StreamResult(file);
			transFormer.transform(source, result);
			result.getOutputStream().close();
			Executionstatus=true;
			ExtentTestManager.reportStepPass("XML config File '"+Location+"' has been updated successfully for the tag '"+AttributeXPath+"' with the value set as '"+ValueToSet+"'");
			Thread.sleep(2000);
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
			ExtentTestManager.reportStepFail(driver, "ValueToSet in the node for WebConfig is Not successfull due to reason: '"+e.getMessage()+"'", false);
			Executionstatus=false;
		} catch (Exception e) {
			e.printStackTrace();
			ExtentTestManager.reportStepFail(driver, "Exception occured during XMLTextUpdate. Reason: '"+e.getMessage()+"'", false);
			Executionstatus=false;
		}
		return Executionstatus;
	}
	
	
	public synchronized boolean RetrieveSQLValueStoresInEnvVar(String sqltablename, String strsqlcolumnname,String sqlcondition,String strEnvironmentVariable,int strExecEventFlag){
		boolean RetrieveSQLValueStoresInEnvVar= false;
		String query = null;
		String Table_name = null;
		String Column_Name = null;
		String SQL_condition = null;
		String EnvironmentVariable = null;
		String Actual_Value = null;
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_Name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,sqlcondition,gblrecordsCounterStatic);
				EnvironmentVariable=getTestData(testDataFilePathStatic, testComponentNameStatic,strEnvironmentVariable,gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_Name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
				return false;
			}

			//Query to Execute
			query = "select "+Column_Name+" from "+Table_name+" where "+SQL_condition+"";
			ResultSet rs_SQLServer= stmt.executeQuery(query);
			rs_SQLServer.next();
			Actual_Value = rs_SQLServer.getString(1);
			Runtimevalue.setProperty(EnvironmentVariable, Actual_Value);

			if(!(Actual_Value==null)){
				ExtentTestManager.reportStepPass("Actual Value '" +Actual_Value+ "' is stored in the Runtime variable '"+ EnvironmentVariable +"' successfully");
				RetrieveSQLValueStoresInEnvVar=true;
			}else{
				ExtentTestManager.reportStepFail(driver, "No Value is stored in Runtime Variable: '"+ EnvironmentVariable +"'", false);
				RetrieveSQLValueStoresInEnvVar=false;
			}
		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver, "Exception occured while checking whether the SQL query value '"+Actual_Value+"' is null (or) not", false);
			RetrieveSQLValueStoresInEnvVar=false;
		}
		return RetrieveSQLValueStoresInEnvVar;
	}
	
	public synchronized boolean webTableVerifyDetailshashtableenvvar(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailshashtableenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			int findPrimaryColumn = 0;

			for(int headerCounterPrimaryColumn = 1;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				String GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					break;
				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 1; headercolumn <= headerColumns.size(); headercolumn++)
				{
					String headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					if(headernames[hdrcount].equalsIgnoreCase(headername.trim())){
						hstableheaders.put(headernames[hdrcount], headercolumn);
						iheaderexist = 1;
						break;
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						if(hstableheaders.get(headernames[hdrcount]) != 0){
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.equals(hstable.get(headernames[hdrcount]))){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}	catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailshashtableenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailshashtableenvvar = true;
		}
		return webTableVerifyDetailshashtableenvvar;
	}
	
	public synchronized boolean waituntiltextpresent(String getValueFromPOM, String strTestObject) {
		boolean elementStatus= false;
		int icount = 0;
		try{
			if((selectByLocatorType(getValueFromPOM)).getText().length() != 0){
				elementStatus = true;
			}
			while((selectByLocatorType(getValueFromPOM)).getText().length() == 0){
				//RefreshObject(getValueFromPOM);
				Thread.sleep(1000);
				if((selectByLocatorType(getValueFromPOM)).getText().length() != 0){
					elementStatus = true;
					break;
				}
				if(icount == 30  && (selectByLocatorType(getValueFromPOM)).getText().length() == 0){
					break;
				}
				icount = icount + 1;
			}
		} catch(StaleElementReferenceException e1){
			return waituntiltextpresent(getValueFromPOM, strTestObject);
		} catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Exception occured while waiting for the Text to appear in the element : '"+ strTestObject +"'. Exception is "+ e , true);
			return false;
		}

		if(elementStatus){
			ExtentTestManager.reportStepPass("'Text '"+selectByLocatorType(getValueFromPOM).getText()+"' is present in "+ strTestObject +"' successfully");
			return elementStatus;
		}else{
			ExtentTestManager.reportStepFail(driver,"'Text '"+selectByLocatorType(getValueFromPOM).getText()+"' is not present in "+ strTestObject +"'." , true);
			return elementStatus;
		}
 
	}
	
	public synchronized boolean GetpastDOBdate(String strDaysDifference, String strYearDifference,String strDateEnvVariable,String strMonthEnvVariable,String strYearEnvVariable,int strExecEventFlag ){

		boolean functionStatus= false;
		String strDaysDiff="";
		String strYearDiff="";
		String DateEnvVariable="";
		String MonthEnvVariable="";
		String YearEnvVariable="";
		String Date_Added=null;
		String Date_Added_2=null;

		try {
			if(strExecEventFlag==1){
				strDaysDiff= getTestData(testDataFilePathStatic, testComponentNameStatic, strDaysDifference, gblrecordsCounterStatic);
			    strYearDiff= getTestData(testDataFilePathStatic, testComponentNameStatic, strYearDifference, gblrecordsCounterStatic);
			    DateEnvVariable= getTestData(testDataFilePathStatic, testComponentNameStatic, strDateEnvVariable, gblrecordsCounterStatic);
			    MonthEnvVariable= getTestData(testDataFilePathStatic, testComponentNameStatic, strMonthEnvVariable, gblrecordsCounterStatic);
			    YearEnvVariable= getTestData(testDataFilePathStatic, testComponentNameStatic, strYearEnvVariable, gblrecordsCounterStatic);
			}

			if(strDaysDiff==null || strYearDiff==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
			}

			int DaysDiff=Integer.parseInt(strDaysDiff);
			int YearDiff=Integer.parseInt(strYearDiff);
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Calendar c = Calendar.getInstance();
			c.add(Calendar.YEAR, YearDiff);
			Date_Added = dateFormat.format(c.getTime());
			
			c.add(Calendar.DATE, DaysDiff);
			Date_Added_2 = dateFormat.format(c.getTime());
			
			System.out.println("Date_Added: --> "+ Date_Added);
			System.out.println("Date_Added_2: --> "+ Date_Added_2);
					
			String[] Requireddate=Date_Added_2.split("/");
			
			// Updating the current date details in environment variables
			Runtimevalue.setProperty(DateEnvVariable, Requireddate[0]);
			Runtimevalue.setProperty(MonthEnvVariable, Requireddate[1]);
			Runtimevalue.setProperty(YearEnvVariable, Requireddate[2]);
			
			System.out.println("strDateEnvVariable "+Runtimevalue.getProperty(DateEnvVariable));
			System.out.println("strMonthEnvVariable "+Runtimevalue.getProperty(MonthEnvVariable));
			System.out.println("strYearEnvVariable "+Runtimevalue.getProperty(YearEnvVariable));
		
			if((Runtimevalue.getProperty(DateEnvVariable)==null) || (Runtimevalue.getProperty(MonthEnvVariable)==null) || (Runtimevalue.getProperty(YearEnvVariable)==null)){
				ExtentTestManager.reportStepFail(driver, "Unable to store the date, month and time to Environmental variable values.", false);
				functionStatus=false;
				return false;
			}else{
				ExtentTestManager.reportStepPass("Date '"+Runtimevalue.getProperty(DateEnvVariable)+"', Month '"+Runtimevalue.getProperty(MonthEnvVariable)+"' and Year '"+Runtimevalue.getProperty(YearEnvVariable)+"' are stored in environment variables :'"+DateEnvVariable+"','"+MonthEnvVariable+"','"+YearEnvVariable+"' respectively");
				functionStatus=true;
			}
		} catch (Exception e) { 	
			ExtentTestManager.reportStepFail(driver,"Error occured while storing in Environmental variable values.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean waitUntilListLoads(String getValueFromPOM, String strTestObject){
		String strData=null;
		boolean WebListSelect=false;
		Select se=null;
		List<WebElement> options=null;
		try{
			int i=0;
			int listSize=0;
			boolean displayed=false;
			while(i<10){
				Thread.sleep(1000);

				se=new Select(selectByLocatorType(getValueFromPOM));
				options = se.getOptions();
				listSize=options.size();
				if(options.size()>1){
					displayed=true;
					break;
				}else{
					log.info("List yet not populated");
				}

				i++;
			}

			if(displayed){
				ExtentTestManager.reportStepPass("The List is Loaded for the dropdown '"+strTestObject+"' successfully");
				WebListSelect=true;
			}else{
				if(listSize==1){
					ExtentTestManager.reportStepPass("The List has only one value Loaded for the dropdown '"+strTestObject+"'");
				}
				WebListSelect=true;
			}

		}catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"The Item '"+strData+"' was not selected from the  '"+strTestObject+"' List box " , true); 
			WebListSelect=false;
		}
		return WebListSelect;
	}
	
	public synchronized boolean WebListSelectFromEnv(String getValueFromPOM, String strTestObject,String strColumnName,int strExecEventFlag){
		String strData=null;
		boolean WebListSelectFromEnv=false;
		try {
			if(strExecEventFlag==1){
				strData=getTestData(testDataFilePathStatic, testComponentNameStatic,strColumnName,gblrecordsCounterStatic);
				strData=Runtimevalue.getProperty(strData);
			}
			if(strData==null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in the data sheet." , true);
				return false;
			}

			new Select(selectByLocatorType(getValueFromPOM)).selectByVisibleText(strData);
			ExtentTestManager.reportStepPass("Item '"+strData+"' is selected from the  '"+strTestObject+"' List box successfully" );
			WebListSelectFromEnv=true;

		} catch (StaleElementReferenceException e) {
			return WebListSelectFromEnv(getValueFromPOM, strTestObject, strColumnName, strExecEventFlag);
		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,"Item '" +  strData + "' was not selected from the  '"+strTestObject+"' List box "+e.getMessage() , true); 
			WebListSelectFromEnv=false;
		}
		return WebListSelectFromEnv;
	}
	
	public synchronized boolean SQLDBEnvironmentVariableCompare(String sqltablename, String strsqlcolumnname,String strsqlcondition,String Propertyfilename,String strEnvironmentVariable,int strExecEventFlag){
		boolean SQLDBEnvironmentVariableCompare= false;
		String query = null;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String strExpectedvalue = null;
		String Actual_Value = null;
		ResultSet rs_SQLServer=null;
		String EnvironmentVariable = null;
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
				EnvironmentVariable=getTestData(testDataFilePathStatic, testComponentNameStatic,strEnvironmentVariable,gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
				return false;
			}
			if(Propertyfilename.equalsIgnoreCase("Runtime")){
				strExpectedvalue=Runtimevalue.getProperty(EnvironmentVariable);
				strExpectedvalue=strExpectedvalue.trim();
			}

			if(Propertyfilename.equalsIgnoreCase("Param")){
				strExpectedvalue=property.getProperty(EnvironmentVariable);
				strExpectedvalue=strExpectedvalue.trim();
			}

			if(strExpectedvalue==null){
				ExtentTestManager.reportStepFail(driver,    "The Value in environment variable: '"+ EnvironmentVariable +"' is empty", false);
				SQLDBEnvironmentVariableCompare=false;
			}else{
				query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"";
				rs_SQLServer= stmt.executeQuery(query);
			}
		} catch (Exception e){
			ExtentTestManager.reportStepFail(driver,    "Error occured while executing the SQL query.Error description is : "+ e.getMessage() +".", false);
			log.info("SQLDBEnvironmentVariableCompare Error : " + e);
			return false;
		}

		try{
			rs_SQLServer.next();
			Actual_Value = rs_SQLServer.getString(1);
			
			
			if(Actual_Value.length()==1){
				Actual_Value = "0" + Actual_Value;
			}
			
		} catch (Exception NullPointerException) {           // If no record is present in the fired Query
			ExtentTestManager.reportStepFail(driver, "No Record avaialble in DB for the SQL Query "+query, false);
			return false;
		}

		try{
			if(!rs_SQLServer.wasNull()){            // If some value is present in the fired Query
				if(Actual_Value.equals(strExpectedvalue)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the Query '"+query+"' matches the expected value : '"+strExpectedvalue+"'");
					SQLDBEnvironmentVariableCompare=true;
				}else if(!(Actual_Value.equals(strExpectedvalue))){
					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the Query '"+query+"' does not match the expected value : '"+strExpectedvalue+"'", false);
					SQLDBEnvironmentVariableCompare=false;
				}
			}else if(rs_SQLServer.wasNull()){        // If "NULL" value is present in the fired Query
				if(strExpectedvalue.equals("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the Query '"+query+"' matches the expected value : '"+strExpectedvalue+"'");
					SQLDBEnvironmentVariableCompare=true;
				}else if(!(strExpectedvalue.equals("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the Query '"+query+"' does not match the expected value : '"+strExpectedvalue+"'", false);  	 
					SQLDBEnvironmentVariableCompare=false;
				}
			}
		}catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,    "Error occured while comparing the values in SQL Query using SQLDBEnvironmentVariableCompare. Error description is : "+ e.getMessage() +".", false);
			SQLDBEnvironmentVariableCompare=false;
		}
		return SQLDBEnvironmentVariableCompare;
	}
	
	public synchronized boolean SQLDBCheckValueExist(String sqltablename, String strsqlcolumnname,String strsqlcondition,int strExecEventFlag){
		boolean functionStatus=false;
		String query;
		String check;
		String Table_name;
		String Column_name;
		String SQL_condition;
		String Actual_Value;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
			}else{
				Table_name=sqltablename;
				Column_name=strsqlcolumnname;
				SQL_condition=strsqlcondition;
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";

			//Check for Record Available
			ResultSet rs_SQLServerCheck = stmt.executeQuery(check);
			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = stmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' exist for the SQL Query "+query+".", false);
					functionStatus= false;
			}else{
				ResultSet rs_SQLServer = stmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1).trim();

				if(!(Actual_Value==null)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' exist for the SQL Query "+query+".");
					functionStatus= true;
				}else if(Actual_Value==null){
					ExtentTestManager.reportStepFail(driver,"Value does not exist for the SQL Query "+query+"'", false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean WebElementTextCompareEnvVar(String getValueFromPOM, String strTestObject,String strEnvironmentVariable,int strExecEventFlag){
		boolean WebElementTextCompareEnvVar=false;
		String actualResult=null;
		String strData=null;
		try{
			if(strExecEventFlag==1){
				strData=getTestData(testDataFilePathStatic, testComponentNameStatic, strEnvironmentVariable, gblrecordsCounterStatic);
			}
			
			if(strData==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the datasheet.", false);
				return false;
			}
			
			strData = Runtimevalue.getProperty(strData);

			actualResult = selectByLocatorType(getValueFromPOM).getText();
			if((actualResult.trim()).equals(strData.trim())){
				ExtentTestManager.reportStepPass("Actual value '" +actualResult+ "' matches with the Expected value '"+strData+ "' in the input field '"+strTestObject+"");
				WebElementTextCompareEnvVar=true;
			}else{
				System.out.println("strData -----> "+strData.trim());
				System.out.println("actualResult -----> "+actualResult.trim());
				ExtentTestManager.reportStepFail(driver,"Actual value '" +actualResult+ "' does not match with the Expected value '"+strData+ "' in the input field '"+strTestObject+"", true);
				WebElementTextCompareEnvVar=false;
			}
		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver, "Error occured while Comparing Text from Env variable. Error description is :"+e.getMessage(), true);
			WebElementTextCompareEnvVar=false;
		}
		return WebElementTextCompareEnvVar;
	}
	
	public synchronized boolean Concatinate_EnvVars_StoreEnvVar(String strNo_of_EnvVar, String strEnv_Variables,String strDelimitor,String strisBlankSpacebtwEnvVar, String strEnvVartobeStored,int strExecEventFlag ){

		boolean functionStatus= false;
		String No_of_EnvVar="";
		String Environ_Variables="";
		String Final_Env_Var=null;
		String Delimitor="";
		String EnvVartobeStored="";
		String isBlankSpacebtwEnvVar=null;
		String[] Env_Variables=null;

		try {
			if(strExecEventFlag==1){
				No_of_EnvVar= getTestData(testDataFilePathStatic, testComponentNameStatic, strNo_of_EnvVar, gblrecordsCounterStatic);
				Environ_Variables= getTestData(testDataFilePathStatic, testComponentNameStatic, strEnv_Variables, gblrecordsCounterStatic);
				Delimitor= getTestData(testDataFilePathStatic, testComponentNameStatic, strDelimitor, gblrecordsCounterStatic);
				isBlankSpacebtwEnvVar= getTestData(testDataFilePathStatic, testComponentNameStatic, strisBlankSpacebtwEnvVar, gblrecordsCounterStatic);
				EnvVartobeStored= getTestData(testDataFilePathStatic, testComponentNameStatic, strEnvVartobeStored, gblrecordsCounterStatic);
			}

			if(No_of_EnvVar==null || Environ_Variables==null || Delimitor==null || EnvVartobeStored==null || isBlankSpacebtwEnvVar==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
			}

			switch(No_of_EnvVar){
			case "2":
				Env_Variables =Environ_Variables.split("\\|");
				if (isBlankSpacebtwEnvVar=="Yes"){
				    Final_Env_Var = Runtimevalue.getProperty(Env_Variables[0]) + " " +Delimitor + " "+Runtimevalue.getProperty(Env_Variables[1]);
				}else if(isBlankSpacebtwEnvVar=="No"){
					Final_Env_Var = Runtimevalue.getProperty(Env_Variables[0]) + Delimitor + Runtimevalue.getProperty(Env_Variables[1]);
				}
				break;
			case "3":
				Env_Variables=Environ_Variables.split("\\|");
				if (isBlankSpacebtwEnvVar.equals("Yes")){
				    Final_Env_Var = Runtimevalue.getProperty(Env_Variables[0]) + " " +Delimitor+ " "+ Runtimevalue.getProperty(Env_Variables[1]) + " " +Delimitor+ " "+ Runtimevalue.getProperty(Env_Variables[2]);
				}else if(isBlankSpacebtwEnvVar=="No"){
					Final_Env_Var = Runtimevalue.getProperty(Env_Variables[0]) + Delimitor + Runtimevalue.getProperty(Env_Variables[1]) + Delimitor + Runtimevalue.getProperty(Env_Variables[2]);
				}
				break;
			case "4":
				Env_Variables=Environ_Variables.split("\\|");
				if (isBlankSpacebtwEnvVar=="Yes"){
				    Final_Env_Var = Runtimevalue.getProperty(Env_Variables[0]) + " " +Delimitor+ " "+ Runtimevalue.getProperty(Env_Variables[1]) + " " +Delimitor+ " "+ Runtimevalue.getProperty(Env_Variables[2]) + " " +Delimitor+ " "+ Runtimevalue.getProperty(Env_Variables[3]);
				}else if(isBlankSpacebtwEnvVar=="No"){
					Final_Env_Var = Runtimevalue.getProperty(Env_Variables[0]) + Delimitor + Runtimevalue.getProperty(Env_Variables[1]) + Delimitor + Runtimevalue.getProperty(Env_Variables[2]) + Delimitor + Runtimevalue.getProperty(Env_Variables[3]);
				}
				break;
			}
			
			/*
			System.out.println("Runtimevalue.getProperty(Env_Variables[0]) "+Runtimevalue.getProperty(Env_Variables[0]));
			System.out.println("Runtimevalue.getProperty(Env_Variables[1]) "+Runtimevalue.getProperty(Env_Variables[1]));
			System.out.println("Runtimevalue.getProperty(Env_Variables[2]) "+Runtimevalue.getProperty(Env_Variables[2]));
			
			System.out.println("Final_Env_Var ---> "+Final_Env_Var);
			*/
			
			Runtimevalue.setProperty(EnvVartobeStored, Final_Env_Var);
			
			if(Runtimevalue.getProperty(EnvVartobeStored)==null){
				ExtentTestManager.reportStepFail(driver, "Unable to store the value '"+Final_Env_Var+"' in the Env Var '"+EnvVartobeStored+"'", false);
				functionStatus=false;
				return false;
			}else{
				ExtentTestManager.reportStepPass("The Value '"+Final_Env_Var+"' is stored in environment variable :'"+EnvVartobeStored+"' successfully");
				functionStatus=true;
			}
		} catch (Exception e) { 	
			ExtentTestManager.reportStepFail(driver,"Error occured while storing in Environmental variable values.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean DBCommonPostCondition(String dbType, String strformatType,String sqltablename, String strsqlcolumnname,String strsqlcondition,String strExpectedvalue, String dateFormat, String Days_to_add, String strenvironmentvariable, String timeOutName, int strExecEventFlag){
		boolean status= false;
		String formatType=null;
		String Database=null;
		try {

			if (strExecEventFlag==1){
				Database=getTestData(testDataFilePathStatic, testComponentNameStatic, dbType, gblrecordsCounterStatic);
				formatType=getTestData(testDataFilePathStatic, testComponentNameStatic, strformatType, gblrecordsCounterStatic);
			}
			if(Database==null || formatType==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			if(Database.trim().equalsIgnoreCase("SQL")){

				if(formatType.trim().equalsIgnoreCase("Normal")){
					status= SQLDBSelect(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("Date")){
					status= SQLDBDateFormatCompare(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("FutureDate")){
					status= SQLDBFutureDateCompare(sqltablename, strsqlcolumnname, strsqlcondition, "dd/MM/yyyy", Days_to_add, strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("EnvVariable")){
					status= SQLDBSelectFromEnv(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("EnvConReUse")){
					status= SQLDBSelCondEnvVarReUse(sqltablename, strsqlcolumnname, strsqlcondition, strenvironmentvariable, strExpectedvalue,strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("FutureDays")){
					status= SQLDBFutureDateUpdate(sqltablename, strsqlcolumnname, strsqlcondition, dateFormat, Days_to_add, strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("waitForValue")){
					status= sqlDBSelectWaitForValue(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, timeOutName, strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("waitEnvCond")){
					status= sqlWaitSelCondEnvVar(sqltablename, strsqlcolumnname, strsqlcondition, strenvironmentvariable, strExpectedvalue, timeOutName, strExecEventFlag);
				}else{
					log.info("Invalid Action item from Excel");
					ExtentTestManager.reportStepFail(driver, "Invalid Action Type described in Excel sheet for SQL: "+formatType+"", false);
				}

			}else if(Database.trim().equalsIgnoreCase("RRBS")) {

				if(formatType.trim().equalsIgnoreCase("Normal")){
					status= RRBSDBSelect(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("Date")){
					status= RRBSDBDateCompare(sqltablename, strsqlcolumnname, strsqlcondition, "dd/MM/yyyy", strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("FutureDate")){
					status= RRBSDBFutureDateCompare(sqltablename, strsqlcolumnname, strsqlcondition, "dd/MM/yyyy", Days_to_add, strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("valueExist")){
					status= RRBSDBCheckValueExist(sqltablename, strsqlcolumnname, strsqlcondition, strExecEventFlag);
				}else{
					log.info("Invalid Action item from Excel");
					ExtentTestManager.reportStepFail(driver, "Invalid Action Type described in Excel sheet for RRBS: "+formatType+"", false);
				}

			}else if(Database.trim().equalsIgnoreCase("HLR")) {

				if(formatType.trim().equalsIgnoreCase("Normal")){
					status= HLRDBSelect(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
				}else{
					log.info("Invalid Action item from Excel");
					ExtentTestManager.reportStepFail(driver, "Invalid Action Type described in Excel sheet for HLR: "+formatType+"", false);
				}

			}else if(Database.trim().equalsIgnoreCase("ESHOP")) {

				if(formatType.trim().equalsIgnoreCase("Normal")){
					status= EShopSQLDBSelect(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue,strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("Date")){
					status= EShopSQLDBDateFormatCompare(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue,strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("FutureDate")){
					status= EShopSQLDBFutureDateCompare(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, Days_to_add,strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("EnvVar")){
					status= EShopSQLDBSelectFromEnv(sqltablename, strsqlcolumnname, strsqlcondition, strenvironmentvariable,strExecEventFlag);
				}else if(formatType.trim().equalsIgnoreCase("EnvCon")){
					status= ESHOPSQLDBSelectConditionEnvvar1(sqltablename, strsqlcolumnname, strsqlcondition, strenvironmentvariable, strExpectedvalue,strExecEventFlag);
				}else{
					log.info("Invalid Action item from Excel");
					ExtentTestManager.reportStepFail(driver, "Invalid Action Type described in Excel sheet for RRBS: "+formatType+"", false);
				}

			}else{
				log.info("Invalid Action item from Excel");
				ExtentTestManager.reportStepFail(driver, "Invalid Database Type described in Excel sheet: "+Database+"", false);
				status=false;
			}

		} catch (Exception e) { 
			status=false;
			ExtentTestManager.reportStepFail(driver, "Error occured while executing the SQL query.Error description is : "+ e.getLocalizedMessage() +".", true);
			log.info("RRBSDBUpdate Error : " + e);
		}
		return status;
	}
	
    public synchronized boolean WebTableLinkClickEnvVar(String getValueFromPOM_WebTable, String strTestObject_WebTable, String TR_Num, String strEnvVariableName, int strExecEventFlag) {
        
		boolean WebTableLinkClickEnvVar = false;
		int testcasestatus = 0;
		String attributeID = null;
		String Actual_Req_ID=null;
		String EnvVariableName=null;
		int flag=0;
		int flag_1 = 0;
		String Request_ID=null;
		int Total_Rows = 0;
		int Total_PageNo_TDs = 0;
		
		try{	
			if(strExecEventFlag == 1){
				EnvVariableName = getTestData(testDataFilePathStatic, testComponentNameStatic, strEnvVariableName,gblrecordsCounterStatic);
			}

			if(EnvVariableName == null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet", false);
				testcasestatus = 0;
			}
			
			Request_ID = Runtimevalue.getProperty(EnvVariableName);
			//System.out.println("Request_ID --> "+Request_ID);
			attributeID = selectByLocatorType(getValueFromPOM_WebTable).getAttribute("id");
			//System.out.println("attributeID --> "+attributeID);
			
			try{
			  List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']/tbody/tr"));
              Total_Rows = rows.size();
              //System.out.println("Total_Rows -->"+Total_Rows);
			}catch(Exception e){
			  ExtentTestManager.reportStepFail(driver, "Webtable '"+attributeID+"' not found. Error message is : "+ e +"'.", true);
			  testcasestatus = 0;	 
		    }
			
			try{
            for(int row=2; row <= Total_Rows; row++){
			      Actual_Req_ID = driver.findElement(By.xpath("//*[@id='"+attributeID+"']/tbody/tr["+row+"]/td/a")).getText();
			      //System.out.println("Actual_Req_ID in Row No in 1st Page Row No: "+row+" is --> "+Actual_Req_ID);
			
			      if(Request_ID.equals(Actual_Req_ID.trim())){
				         //System.out.println("The Actual_Req_ID : "+Actual_Req_ID+" matches with the expected Req ID : "+Request_ID);
				         driver.findElement(By.xpath("//*[@id='"+attributeID+"']/tbody/tr["+row+"]/td/a")).click();
				         //System.out.println("Exiting the 1st page for loop ... ");
						 flag=1;
						 ExtentTestManager.reportStepPass("The Request ID : '"+ Actual_Req_ID +"' is clicked successfully in the table : '"+ strTestObject_WebTable +"' in the first page itself.");
				         testcasestatus = 1;
				         break;
			      }
		    }
			
			}catch(Exception e){
				ExtentTestManager.reportStepInfo("The Expected RequestId '"+Request_ID+"' is not present in the first page of webtable. Going to further pages");
		    }

			
			if(flag==0){
				System.out.println("The expected reqquestid is mis-present in first page");
			     try{
                   List<WebElement> PageNo_TDs = driver.findElements(By.xpath("//*[@id='"+attributeID+"']/tbody/tr['"+TR_Num+"']/td/table/tbody/tr/td"));
                   Total_PageNo_TDs = PageNo_TDs.size();
		           System.out.println("Total_PageNo_TDs --> "+Total_PageNo_TDs);
		           if(Total_PageNo_TDs==0){
			             ExtentTestManager.reportStepFail(driver, "The Expected RequestId '"+Request_ID+"' is not present in the first page of webtable and also the PageLink Table is not found.", true);
			             testcasestatus = 0;	
		           }
				 }catch(Exception e){
			              ExtentTestManager.reportStepFail(driver, "The Expected RequestId '"+Request_ID+"' is not present in the first page of webtable and also the PageLink Table is not found. Error message is : "+ e +"'.", true);
			              testcasestatus = 0;						  
		         }
				 try{
				 for(int row=2; row <= Total_PageNo_TDs; row++){
					 JavascriptExecutor executor = (JavascriptExecutor)driver;
					 executor.executeScript("arguments[0].click();",driver.findElement(By.xpath("//*[@id='"+attributeID+"']/tbody/tr['"+TR_Num+"']/td/table/tbody/tr/td["+row+"]/a")));
					 Thread.sleep(5000L);
					 List<WebElement> tablerows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']/tbody/tr"));
                     int Total_Rows_1 = tablerows.size();
                     try{
					 for(int j=2; j <= Total_Rows_1; j++){
			                    Actual_Req_ID = driver.findElement(By.xpath("//*[@id='"+attributeID+"']/tbody/tr["+j+"]/td/a")).getText();
			                    System.out.println("Actual_Req_ID in PageNo'"+row+"' in rowno '"+j+"' is --> "+Actual_Req_ID);
			
			            if(Request_ID.equals(Actual_Req_ID.trim())){
				                   System.out.println("The Actual_Req_ID : "+Actual_Req_ID+" matches with the expected Req ID : "+Request_ID);
				                   driver.findElement(By.xpath("//*[@id='"+attributeID+"']/tbody/tr["+j+"]/td/a")).click();
				                   System.out.println("Exiting the for loop ... ");
								   flag_1=1;
						           ExtentTestManager.reportStepPass("The Request ID : '"+ Actual_Req_ID +"' is clicked successfully in the table : '"+ strTestObject_WebTable +"' in the PageNo: '"+row+"' in rowno '"+j+"'.");
				                   testcasestatus = 1;
				                   break;
			            }
		             }
         			}catch(Exception e){
        				ExtentTestManager.reportStepInfo("The Expected RequestId '"+Request_ID+"' is not present in the page no: '"+row+"'of webtable. Going to Next page");
        		    }
				 }
				 }catch(Exception e){
			              ExtentTestManager.reportStepFail(driver, "Exception occured while clicking the link on other page of webtable. Error message is : "+ e +"'.", true);
			              testcasestatus = 0;
		         }
				 
				if(flag_1==0){
						ExtentTestManager.reportStepFail(driver, "The Request ID '"+Request_ID+"' is not found in the WebTable", true);
				        testcasestatus = 0;
				}
				 
			}
			


	    }catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while WebTableLinkClickEnvVar. Error message is : "+ e +"'.", true);
			testcasestatus = 0;	 
		}
		if(testcasestatus == 1){
			WebTableLinkClickEnvVar = true;
		}
		return WebTableLinkClickEnvVar;
	}
    
    
    	// Function for Executing SQL Job:
    	public synchronized boolean SQL_Job_Execute(String strJobName, String strExpectedMessage,int strExecEventFlag){
    			
    		    boolean test_case_Status = false;
    		    String JobName = null;
    			String Actual_Message=null;
    			String ExpectedMessage=null;
    			int flag = 0;

    			try {
    			if(strExecEventFlag==1){
    				JobName= getTestData(testDataFilePathStatic, testComponentNameStatic, strJobName, gblrecordsCounterStatic);
    				ExpectedMessage= getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedMessage, gblrecordsCounterStatic);
    			}else{
    				JobName= strJobName;
    				ExpectedMessage= strExpectedMessage;
    			}

    			if(JobName==null || ExpectedMessage==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    				test_case_Status = false;
    			}
    		
    				String Job_query = "exec "+ JobName;
    				ResultSet rs_SQLServer;
    				int i = 0;
    				
    				try{
    				for(i=1;i<=15;i++){
    					Thread.sleep(2000L);
    					rs_SQLServer = stmt.executeQuery(Job_query);
    					rs_SQLServer.next();
    					Actual_Message = rs_SQLServer.getString(1).trim();
    					if(Actual_Message.contains(ExpectedMessage)){
    						  System.out.println("SQL Job '"+Job_query+"' is executed successfully till the message 'All Done - nothing to do' appears for '"+i+"' times");
    					      flag=1;
    						  break;
    					}
    				}
    				}catch (Exception e) { 
        				ExtentTestManager.reportStepFail(driver,"SQL Job Query '"+ Job_query + "'  is not executed successfully. Error description is : "+ e.getMessage(), false);
        				test_case_Status = false;
        			}
    				
    			if(flag==1){
  				     ExtentTestManager.reportStepPass("SQL Job Query '"+Job_query+"' is executed successfully till the message '"+ExpectedMessage+"' appears for '"+i+"' times");
  				     test_case_Status = true;
    			}else{
    				ExtentTestManager.reportStepFail(driver,"The SQL Job Query '"+ Job_query + "'  is not executed successfully.", false);
    				test_case_Status = false;
    			}
    				
    			}catch (Exception e) { 
    				ExtentTestManager.reportStepFail(driver,"Error occured while executing the SQL Job Query. Error description is : "+ e.getMessage(), false);
    				test_case_Status = false;
    			}
				return test_case_Status;
    	   }
    	
    	
    	public synchronized boolean Waituntildbvaluechange(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strExpectedvalue,int strExecEventFlag){
    		boolean functionStatus=false;
    		String query=null;
    		String Table_name=null;
    		String Column_name=null;
    		String SQL_condition=null;
    		String Expected_value=null;
    		String Actual_Value=null;
    		int flag=0;
    		ResultSet rs_SQLServer = null;
    		
    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
    				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedvalue, gblrecordsCounterStatic);
    			}

    			if(Table_name==null || Column_name==null || SQL_condition==null||Expected_value==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    				functionStatus= false;
    			}

    			try{
    				query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
    				rs_SQLServer = stmt.executeQuery(query);
    				rs_SQLServer.next();
    				rs_SQLServer.getObject(Column_name);
    				
    				if (!(rs_SQLServer.wasNull())) {
    				
	    				Actual_Value = rs_SQLServer.getString(1).trim();
	    				
	        			if(Actual_Value.trim().equals(Expected_value.trim())){
	        				flag=1;
	    				} else{
	    					
		    				int intCounter=0;
		    				rs_SQLServer = stmt.executeQuery(query);
		    				rs_SQLServer.next();
		    				rs_SQLServer.getObject(Column_name);
							while(!(rs_SQLServer.getString(1).trim().equals(Expected_value.trim()))){
	
								  Thread.sleep(6000L);
								  rs_SQLServer.close();
								  rs_SQLServer= stmt.executeQuery(query);
								  rs_SQLServer.next();
								  rs_SQLServer.getObject(Column_name);
				    					Actual_Value = rs_SQLServer.getString(1).trim();
				        				if(Actual_Value.trim().equals(Expected_value.trim())){
				        					flag=1;
				        				}
	
				    				if(flag==1 || intCounter==30){
				    					break;
				    				}
				    			  intCounter=intCounter+1;
	
							}
	    				}
    				} else {
    					
    					int intCounter=0;

    					while(rs_SQLServer.wasNull()){

    						  Thread.sleep(6000L);
    						  rs_SQLServer.close();
    						  rs_SQLServer = stmt.executeQuery(query);
    						  rs_SQLServer.next();
    						  rs_SQLServer.getObject(Column_name);

    		    				if (!(rs_SQLServer.wasNull())) {
    		    					Actual_Value = rs_SQLServer.getString(1).trim();
    		        				if(Actual_Value.trim().equals(Expected_value.trim())){
    		        					flag=1;
    		        				}
    		    				}

    		    				if(flag==1 || intCounter==30){
    		    					break;
    		    				}
    		    			  intCounter=intCounter+1;
    					}
    					
    				}
				} catch (Exception e){
		    			ExtentTestManager.reportStepFail(driver,"Error occured while waiting till the expected DB value reaches.Error description is : "+ e.getMessage(), false);
		    			functionStatus= false;
		    	}
					
    				
     				if(flag==1){
    					ExtentTestManager.reportStepPass("The actual value : '"+Actual_Value+"' in column : '"+Column_name+"' of table : '"+Table_name+"' with condition : '"+SQL_condition+"' reaches the expected value : '"+Expected_value+"'");
    					functionStatus= true;
    				}else{
    					ExtentTestManager.reportStepFail(driver,"The actual value : '"+Actual_Value+"' in column : '"+Column_name+"' of table : '"+Table_name+"' with condition : '"+SQL_condition+"' did not reach the expected value : '"+Expected_value+"'", false);
    					functionStatus= false;
    				}
     				
    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while waiting till the expected DB value reaches.Error description is : "+ e.getMessage(), false);
    			functionStatus= false;
    		}
    		return functionStatus;
    	}
    	
    	
    	public synchronized boolean WinserviceStartStopUsingSC(String serverIP,String strActionToDo, String strWinserviceName,int strExecEventFlag){
    		boolean result= false;
    		String actionToDo=null;
    		String winserviceName=null;
    		String state=null;
    		Process p;

    		try {

    			String getWinServiceTimeout = property.getProperty("WinService_Timeout");
    					
    			int winServiceTimeout = Integer.parseInt(getWinServiceTimeout);

    			if (strExecEventFlag==1){
    				//serverIP=getTestData(testDataFilePathStatic, testComponentNameStatic, strServerIP, gblrecordsCounterStatic);
    				actionToDo=getTestData(testDataFilePathStatic, testComponentNameStatic, strActionToDo, gblrecordsCounterStatic);
    				winserviceName=getTestData(testDataFilePathStatic, testComponentNameStatic, strWinserviceName, gblrecordsCounterStatic);
    			}
    			if(actionToDo==null ||winserviceName==null ){
    				ExtentTestManager.reportStepFail(driver,"Required details are not provided in the data sheet.", false);
    				return false;
    			}

    			try{
    				p=Runtime.getRuntime().exec("sc \\\\"+ property.getProperty(serverIP) +" query "+winserviceName+"");
    			}catch(Exception e){
    				ExtentTestManager.reportStepFail(driver, "Error occured while Query the state of winservice. Exception is : "+ e.getLocalizedMessage()+".", false);
    				return false;
    			}

    			BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream())); 
    			String line=reader.readLine();
    			while(line!=null) { 
    				if(line.trim().startsWith("STATE")){
    					if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("1")){
    						log.info("Stopped");
    						state="STOPPED";
    					}else if(line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("2")){
    						log.info("Startting....");
    						state="STARTING";
    					}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("3")){
    						log.info("Stopping....");
    						state="STOPPING";
    					}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("4")){
    						log.info("Running");
    						state="RUNNING";
    					}
    				}
    				line=reader.readLine(); 
    			} 
    			//Start the Winservice
    			if(actionToDo.trim().equalsIgnoreCase("START")){
    				if(state.equalsIgnoreCase("STOPPED")){
    					try{
    						p=Runtime.getRuntime().exec("sc \\\\"+ property.getProperty(serverIP) +" start "+winserviceName+"");
    						ExtentTestManager.reportStepPass("SC Command 'sc \\\\"+ property.getProperty(serverIP) +" start "+winserviceName+"' exceuted successfully.");

    					}catch(Exception e){
    						ExtentTestManager.reportStepFail(driver,"Error occured while starting the winservice. Exception is : "+ e.getLocalizedMessage() +".", false);
    						return false;
    					}

    					while(line!=null) { 

    						if(line.trim().startsWith("STATE")){
    							if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("1")){
    								log.info("Stopped");
    							}else if(line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("2")){
    								log.info("Startting....");
    							}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("3")){
    								log.info("Stopping....");
    							}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("4")){
    								log.info("Running");
    							}
    						}
    						line=reader.readLine(); 
    					}
    					ExtentTestManager.reportStepPass("Winservice '"+winserviceName+"' in Server IP '"+ property.getProperty(serverIP) +"' is Started successfully.");
    					Thread.sleep(winServiceTimeout);
    					result=true;
    				}else if(state.equalsIgnoreCase("STOPPING")){
    					log.info("Winservice is Stopping state. Wait and starting again");
    					Thread.sleep(5000);
    					p=Runtime.getRuntime().exec("sc \\\\"+ property.getProperty(serverIP) +" start "+winserviceName+"");

    					while(line!=null) { 
    						if(line.trim().startsWith("STATE")){
    							if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("1")){
    								log.info("Stopped");
    								state="STOPPED";
    							}else if(line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("2")){
    								log.info("Startting....");
    								state="STARTING";
    							}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("3")){
    								log.info("Stopping....");
    								state="STOPPING";
    							}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("4")){
    								log.info("Running");
    								state="RUNNING";
    							}
    						}
    						line=reader.readLine(); 
    					}

    					ExtentTestManager.reportStepPass("Winservice '"+winserviceName+"' in Server IP '"+ property.getProperty(serverIP) +"' is Started successfully.");
    					Thread.sleep(winServiceTimeout);
    					result=true;

    				}else if(state.equalsIgnoreCase("STARTING")){

    					log.info("Winservice is starting state. Cannot push start command again");
    					ExtentTestManager.reportStepPass("Winservice '"+winserviceName+"' in Server IP '"+ property.getProperty(serverIP) +"' is already in Starting State");
    					result=true;

    				}else if(state.equalsIgnoreCase("RUNNING")){

    					log.info("Winservice is already in Running state. Cannot push start command again");
    					ExtentTestManager.reportStepPass("Winservice '"+winserviceName+"' in Server IP '"+ property.getProperty(serverIP) +"' is already in Running State");
    					result=true;

    				}
    				//Start the Winservice
    			}else if(actionToDo.trim().equalsIgnoreCase("STOP")){
    				if(state.equalsIgnoreCase("RUNNING")){
    					log.info("Stopping the service...");
    					try{
    						p=Runtime.getRuntime().exec("sc \\\\"+ property.getProperty(serverIP) +" stop "+winserviceName+"");
    						ExtentTestManager.reportStepPass("SC Command 'sc \\\\"+ property.getProperty(serverIP) +" stop "+winserviceName+"' exceuted successfully.");

    					}catch(Exception e){
    						ExtentTestManager.reportStepFail(driver, "Error occured while stopping the winservice. Exception is : "+ e.getLocalizedMessage() +".", false);
    						return false;
    					}

    					while(line!=null) { 
    						if(line.trim().startsWith("STATE")){
    							if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("1")){
    								log.info("Stopped");
    							}else if(line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("2")){
    								log.info("Startting....");
    							}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("3")){
    								log.info("Stopping....");
    							}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("4")){
    								log.info("Running");
    							}
    						}
    						line=reader.readLine(); 
    					}

    					ExtentTestManager.reportStepPass("Winservice '"+winserviceName+"' in Server IP '"+ property.getProperty(serverIP) +"' is Stopped successfully");
    					Thread.sleep(5000);
    					result=true;
    				}else if(state.equalsIgnoreCase("STARTING")){
    					log.info("Winservice is Starting state. Wait and stopping the service");
    					Thread.sleep(3000);
    					p=Runtime.getRuntime().exec("sc \\\\"+ property.getProperty(serverIP) +" stop "+winserviceName+"");

    					while(line!=null) { 

    						if(line.trim().startsWith("STATE")){
    							if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("1")){
    								log.info("Stopped");
    							}else if(line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("2")){
    								log.info("Startting....");
    							}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("3")){
    								log.info("Stopping....");
    							}else if (line.trim().substring(line.trim().indexOf(":")+1,line.trim().indexOf(":")+4).trim().equals("4")){
    								log.info("Running");
    							}
    						}
    						line=reader.readLine(); 
    					}

    					ExtentTestManager.reportStepPass("Winservice '"+winserviceName+"' in Server IP '"+ property.getProperty(serverIP) +"' is Stopped successfully");
    					Thread.sleep(4000);
    					result=true;

    				}else if(state.equalsIgnoreCase("STOPPING")){
    					log.info("Winservice is Stopping state. Cannot push Stop command again");
    					ExtentTestManager.reportStepPass("Winservice '"+winserviceName+"' in Server IP '"+ property.getProperty(serverIP) +"' is already in Stopping State.");
    					result=true;
    				}else if(state.equalsIgnoreCase("STOPPED")){
    					log.info("Winservice is already in Stopped state. Cannot push Stop command again");
    					ExtentTestManager.reportStepPass("Winservice '"+winserviceName+"' in Server IP '"+ property.getProperty(serverIP) +"' is already in Stooped State.");
    					result=true;
    				}
    			}

    		} catch(Exception e) { 
    			result=false;
    			ExtentTestManager.reportStepFail(driver, "Error occured in Start-Stop Winservice function. Error description is : "+ e.getLocalizedMessage() +".", false);
    		}
    		return result;
    	}
	
    	public synchronized boolean WaitUntilPatternAppearsInLogFiles(String filePath,String startFileNameValue,String endFileNameValue,String strLineContains,String strPatterToCheck,String envVariableName ,int strExecEventFlag){

    		boolean result= false;
    		String path = null;
    		File[] listOfFile = null;
    		String fileName = null;
    		Scanner in = null;
    		boolean found=false;
    		String lineContains=null;
    		String patterToCheck=null;
    		String envVariable=null;
    		String startFileNameFromExcel=null;
    		String endFileNameFromExcel=null;

    		try{
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, strExecEventFlag));
    				startFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, startFileNameValue,gblrecordsCounterStatic);
    				endFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, endFileNameValue,gblrecordsCounterStatic);
    				lineContains= getTestData(testDataFilePathStatic, testComponentNameStatic, strLineContains,gblrecordsCounterStatic);
    				patterToCheck= getTestData(testDataFilePathStatic, testComponentNameStatic, strPatterToCheck,gblrecordsCounterStatic);
    				envVariable= getTestData(testDataFilePathStatic, testComponentNameStatic, envVariableName,gblrecordsCounterStatic);
    			}

    			if(path==null ||startFileNameFromExcel==null ||endFileNameFromExcel==null ||lineContains==null||patterToCheck==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}

    			File directory = new File("//\\" +path);
    			boolean fileexist=false;
    			int fileAppeartime=0;

    			while(fileAppeartime<10){
    				Thread.sleep(1000);
    				listOfFile = directory.listFiles();
    				if(listOfFile.length != 0){
    					log.info("Directory has files");
    					fileexist=true;
    					break;

    				}else{
    					log.info("No File is available in directory. looping again with 60 secs");
    				}

    				log.info("No File is available in directory with 60 secs");
    				fileAppeartime++;
    			}

    			if(fileexist){
    				log.info("Files avialble in the directiory");
    			}else{
    				log.info("No File is available in directory for 60secs");
    				ExtentTestManager.reportStepFail(driver,"No File is not available in the given directory" , false);
    				return false;
    			}

    			boolean foundstatus=false;
    			int time=0;
    			while(time<10){
    				Thread.sleep(1000);	
    				listOfFile = directory.listFiles();
    				for(int i = 0; i<listOfFile.length; i++){
    					log.info("i is : "+i);
    					
    					if(listOfFile[i].isFile()){
    						fileName = listOfFile[i].getName();
    						log.info("Found a file and name is : "+fileName);
    						
    						if(fileName.startsWith(startFileNameFromExcel) && fileName.endsWith(endFileNameFromExcel)){
    							log.info("FileName exact match : "+fileName);
    							fileName=listOfFile[i].getName();
    							foundstatus=true;
    						}
    					}
    				}
    				
    				if(foundstatus){
    					log.info("FileName exact match is found. Braking the loop");
    					break;
    				}else{
    					log.info("FileName not found in path. Continue the loop");
    				}
    				time++;
    			}

    			if(fileName == null){
    				ExtentTestManager.reportStepFail(driver,"File starting with Name '"+startFileNameFromExcel+"' file is not available in the directory" , false);
    				return false;
    			}

    			File file =new File("//\\" +path +fileName);
    			log.info(file.getAbsolutePath()+" || "+file.getName());
    			int i=0;
    			while(i<10){
    				Thread.sleep(1000);
    				
    				try {
    					in = new Scanner(file);
    					
    					while(in.hasNext())	{
    						
    						String line=in.nextLine();
    						if(line.contains(lineContains)){
    							log.info("Line contains Match found. Line -> "+line);
    							Pattern p = Pattern.compile(patterToCheck);
    							Matcher m = p.matcher(line);

    							while (m.find()){
    								found=true;
    								log.info("Pattern Match found in the Line!");
    								log.info("Match is : "+m.group(0));
    								ExtentTestManager.reportStepPass("Log containing the word '"+lineContains+"' has the Matched Expected Pattern '"+m.group(0) +"'");
    								if(!(envVariable.trim().equalsIgnoreCase("NA"))){
    									log.info("Storing the Pattern Matched in the Env Variable '"+envVariable+"'");
    									Runtimevalue.setProperty(envVariable, m.group(0));
    									ExtentTestManager.reportStepPass("The Dynamic Value '"+m.group(0)+"' is successfully stored in the Runtime Varaible '"+envVariable+"'.");
    									in.close();
    								}
    								break;
    							}

    							if(found){
    								log.info("Pattern Match found breaking the HasNext Loop");
    								break;
    							}else{
    								log.info("Pattern Match not found. Checking teh next line that contains expected word");
    							}
    						}
    					}

    					if(found){
    						log.info("Match found, Breaking the Time Loop");
    						result=true;
    						break;
    					}else{
    						log.info("Match not found. Continue the Loop...");
    					}

    				} catch (FileNotFoundException e) {
    					log.info("FileNotFoundException occured match founder... :"+e);
    					//e.printStackTrace();
    				}catch (Exception e) {
    					log.info("Excption occured match founder... : "+e);
    					ExtentTestManager.reportStepFail(driver, "Error occured while finding the pattern from Winservice Log. Error description is : "+ e.getMessage() +".", false);
    					//e.printStackTrace();
    				}
    				
    				i++;
    			}

    			if(result){
    				ExtentTestManager.reportStepPass("Log file starting with name '"+startFileNameFromExcel+"' from Path '"+path+"' contains the Expected Log Pattern '"+patterToCheck+"'");
    			}else{
    				ExtentTestManager.reportStepFail(driver,"Log file starting with name '"+startFileNameFromExcel+"' from Path '"+path+"' does not contains the Expected Log Pattern '"+patterToCheck+"' within 60 secs", false);
    			}

    		} catch(Exception e) { 
    			result=false;
    			ExtentTestManager.reportStepFail(driver,"Error occured in the WinserviceWaitUntilPatternAppears. Error description is : "+ e.getMessage() +".", false);
    			log.info("Error : " + e);
    		}
    		return result;
    	}
    	
    	public synchronized boolean HLRDBOpenConnection(String dbserver, String portnumber, String dbname, String dbusername, String dbpassword){
    		boolean elementStatus= false;
    		String serverName = property.getProperty(dbserver);
    		String portNumber = property.getProperty(portnumber);
    		String sid = property.getProperty(dbname);
    		String dbUrl = "jdbc:oracle:thin:@" + serverName + ":" + portNumber + ":" + sid; 
    		String username = property.getProperty(dbusername);   
    		String password = property.getProperty(dbpassword); 

    		if(dbname==null || dbusername==null || dbpassword==null || dbserver==null || portnumber==null){
    			ExtentTestManager.reportStepFail(driver, "Required details are not provided in the datasheet.", false);
    			return false;
    		}
    		try {
    			String driverName = "oracle.jdbc.OracleDriver";
    			Class.forName(driverName);         
    			hlrConnection = DriverManager.getConnection(dbUrl,username,password);
    			hlrStatement = hlrConnection.createStatement(); 
    			elementStatus=true;
    			ExtentTestManager.reportStepPass("HLR DB Connection with DB '"+sid+"' in '"+serverName+"' is established Successfully.");

    		} catch (Exception e) { 
    			elementStatus=false;
    			ExtentTestManager.reportStepFail(driver, "Error occured while establishing connection with HLR DB. Error description is : "+ e.getMessage() +".", false);
    		}
    		return elementStatus;
    	}
    	
    	public synchronized boolean HLRDBCloseConnection(){
    		boolean elementStatus= false;

    		try {
    			// closing DB Connection       
    			hlrConnection.close(); 
    			elementStatus=true;
    			ExtentTestManager.reportStepPass("HLR DB Connection is disconnected successfully.");

    		} catch (Exception e) { 
    			elementStatus=false;
    			ExtentTestManager.reportStepFail(driver, "Error occured while closing the HLR DB connection. Error description is : "+ e.getMessage() +".", false);
    		}
    		return elementStatus;
    	}
    	
    	public synchronized boolean HLRDBSelect(String hlrtablename, String hlrcolumnname, String hlrcondition, String hlrcolumnvalue, int strExecEventFlag){
    		boolean functionStatus=false;
    		String query;
    		String check;
    		String Table_name;
    		String Column_name;
    		String SQL_condition;
    		String Expected_value;
    		String Actual_Value;

    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, hlrtablename, gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, hlrcolumnname, gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, hlrcondition, gblrecordsCounterStatic);
    				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic, hlrcolumnvalue, gblrecordsCounterStatic);
    			}else{
    				Table_name=hlrtablename;
    				Column_name=hlrcolumnname;
    				SQL_condition=hlrcondition;
    				Expected_value=hlrcolumnvalue;
    			}

    			if(Table_name==null || Column_name==null || SQL_condition==null||Expected_value==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    				return false;
    			}

    			query = "SELECT "+Column_name+" FROM "+Table_name+" WHERE "+SQL_condition+" order by 1 desc";
    			check = "SELECT "+Column_name+" FROM "+Table_name+" WHERE "+SQL_condition+" order by 1 desc";

    			//Check for Record Available
    			ResultSet rs_SQLServerCheck = hlrStatement.executeQuery(check);
    			int temp=0;	
    			while(rs_SQLServerCheck.next()){
    				temp++;
    			}

    			if(temp < 1){
    				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
    				return false;
    			}

    			rs_SQLServerCheck = hlrStatement.executeQuery(check);
    			rs_SQLServerCheck.next();
    			rs_SQLServerCheck.getObject(Column_name);

    			if (rs_SQLServerCheck.wasNull()) {
    				if(Expected_value.equalsIgnoreCase("NULL")){
    					ExtentTestManager.reportStepPass("Actual value 'NULL' for the HLR Query "+query+" matches the expected value : '"+Expected_value+"'");
    					functionStatus= true;
    				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
    					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the HLR Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
    					functionStatus= false;
    				}
    			}else if(!(rs_SQLServerCheck.wasNull())){

    				ResultSet rs_SQLServer = hlrStatement.executeQuery(query);
    				rs_SQLServer.next();
    				Actual_Value = rs_SQLServer.getString(1).trim();

    				if (Expected_value.contains("CURRENT_DATE")){
    					String []ExpectedvalueWithFormat=Expected_value.split("#");
    					String db_Date = Actual_Value.split(" ")[0];
    					Actual_Value=db_Date;
    					Date date=new Date();			
    					SimpleDateFormat dateformat=new SimpleDateFormat(ExpectedvalueWithFormat[1]);
    					Expected_value=dateformat.format(date);
    				}

    				if(Actual_Value.equalsIgnoreCase(Expected_value)){
    					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the HLR Query "+query+" matches the expected value : '"+Expected_value+"'");
    					functionStatus= true;
    				}else if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
    					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the HLR Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
    					functionStatus= false;
    				}
    			}

    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in HLR query.Error description is : "+ e.getMessage(), false);
    			return false;
    		}
    		return functionStatus;
    	}
    	
    	public synchronized boolean HLRDBUpdate(String sqltablename, String strsqlcolumnname,String strsqlcolumnvalue,String strsqlcondition,int strExecEventFlag){
    		String Table_name;
    		String Column_name;
    		String Column_Value;
    		String SQL_condition;
    		String query;

    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
    				Column_Value=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnvalue, gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
    			}else{
    				Table_name=sqltablename;
    				Column_name=strsqlcolumnname;
    				Column_Value=strsqlcolumnvalue;
    				SQL_condition=strsqlcondition;
    			}

    			if(Table_name==null || Column_name==null || Column_Value==null || SQL_condition==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    				return false;
    			}

    			if(Column_Value.contains("to_date")){
    				query = "update "+Table_name+" set "+Column_name+"="+Column_Value+" where "+SQL_condition;
    			}else{
    				if(Column_Value.equalsIgnoreCase("null")){
    					query = "update "+Table_name+" set "+Column_name+"=null where "+SQL_condition;
    				}else{
    					query = "update "+Table_name+" set "+Column_name+"='"+Column_Value+"' where "+SQL_condition;
    				}
    			}

    			hlrStatement.execute(query);
    			ExtentTestManager.reportStepPass("HLR Update Query  "+ query + "  executed successfully.");
    			return true;
    		} catch (Exception e) { 
    			ExtentTestManager.reportStepFail(driver,"Error occured while executing HLR Update Query. Error description is : "+ e.getMessage(), false);
    			return false;
    		}
    	}
    	
    	public synchronized boolean VerifyFiles_Location_and_Name(String filePath, String startFileNameValue, String endFileNameValue, int strExecEventFlag){

    		boolean functionStatus = false;
    		String path = null;
    		int flag = 0;
    		File[] listOfFile = null;
    		String startFileNameFromExcel=null;
    		String endFileNameFromExcel=null;
    		String fileName=null;

    		try{
    			
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, gblrecordsCounterStatic));
    				startFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, startFileNameValue,gblrecordsCounterStatic);
    				endFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, endFileNameValue,gblrecordsCounterStatic);    			}

    			if(path==null || startFileNameFromExcel==null || endFileNameFromExcel==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}

    		}catch(Exception e){
    			e.getMessage();
    		}
    		
    		try{

    			File directory = new File("//\\" +path);

    			if(directory.listFiles().length == 0){
    				log.info("Files are not available");
    				ExtentTestManager.reportStepFail(driver,"Expected Log file '"+startFileNameFromExcel+"' is not available in the location "+path+"", false);
    				functionStatus = false;
    			}else{
    				
    				listOfFile = directory.listFiles();
    				for(int i = 0; i<listOfFile.length; i++){
    					log.info("i is : "+i);
    					
    					if(listOfFile[i].isFile()){
    						fileName = listOfFile[i].getName();
    						log.info("Found a file and name is : "+fileName);
    						
    						if(fileName.startsWith(startFileNameFromExcel) && fileName.endsWith(endFileNameFromExcel)){
    							log.info("FileName exact match : "+fileName);
    							fileName=listOfFile[i].getName();
    							flag = 1;
            					functionStatus = true;
            					break;
            				}
    					}
    				}
    			}
    		}catch(Exception e){
    			log.info("Exception occurs in 'VerifyFiles_Path_and_Name' function "+e.getMessage());
    			ExtentTestManager.reportStepFail(driver,"Error occurred while checking the file with Name '"+startFileNameFromExcel+"'" , false);
    			functionStatus = false;
    		}

    		if(flag == 1){
    			ExtentTestManager.reportStepPass("Log File with the filename '"+fileName+"' is present in the path '"+path+"'");
    		}else{
    			ExtentTestManager.reportStepFail(driver,"Expected Log file '"+startFileNameFromExcel+"' is not available in the path "+path+"", false);
    		}
    		return functionStatus;
    	}
    	
    	
    	public synchronized boolean webListDropdownClick(String getValueFromPOM, String strTestObject, String strtestData, int strExecEventFlag){

    		boolean functionStatus = false;
    		String actualDropdownValue = null;
    		String testData= null;
    		try{
    			if(strExecEventFlag==1){
    				testData= getTestData(testDataFilePathStatic, testComponentNameStatic, strtestData, gblrecordsCounterStatic);
    			}else{
    				testData=strtestData;
    			}

    			if(testData == null){
    				ExtentTestManager.reportStepFail(driver,"Required details are not provided in the data sheet.",false);
    				return false;
    			}
    			List<WebElement> element = listSelectByLocatorType(getValueFromPOM);

    			for(WebElement dropdownValue : element){
    				actualDropdownValue = dropdownValue.getText();
    				if((dropdownValue.getText()).equalsIgnoreCase(testData)){
    					dropdownValue.click();
    					ExtentTestManager.reportStepPass("'"+actualDropdownValue+"' is clicked successfully from the Dropdown list '"+strTestObject+"'");
    					functionStatus = true;
    				}
    			}

    		}catch(Exception e){
    			log.info("Exception occurred in web table radio button :"+e.getMessage());
    			ExtentTestManager.reportStepFail(driver,"'"+actualDropdownValue+"' is not clicked from the Dropdown list '"+strTestObject+"'.",true);
    			functionStatus = false;
    		}
    		return functionStatus;
    	}
 
	public synchronized boolean SQLDBDateUpdate(String sqltablename, String strsqlcolumnname,  String strsqlcondition, String DBType, String seperator, int Monthdifference, int strExecEventFlag){
		boolean SQLDBDateUpdate= false;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String expectedType = null;
		String ExpectedDate = null;
		String query = null;
		Calendar cal = null;
		
		
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
				expectedType  = getTestData(testDataFilePathStatic, testComponentNameStatic, DBType,gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null || expectedType==null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
				return false;
			}

			cal = Calendar.getInstance();
		    int day = cal.get(Calendar.DATE);
		    int month = cal.get(Calendar.MONTH) + 1 + Monthdifference;
		    int year = cal.get(Calendar.YEAR);
		    String expmonth = Integer.toString(month);
		    if (month / 10 == 0) {
		    	expmonth = "0" + expmonth;
	        }
		    
			String expday = Integer.toString(day);
			
			if (day % 10 != 0) {
	    	expday = "0" + expday;
			}
			
		    if(expectedType.equalsIgnoreCase("REPORTDB")){
		    ExpectedDate = year + seperator + expmonth + seperator + expday +" "+ "00:00:00.000";
		    }
		    if(expectedType.equalsIgnoreCase("MONTHDB")){
		    ExpectedDate = year + seperator + expmonth + seperator + expday +"000000";
		    }

			query = "update "+Table_name+" set "+ Column_name + " = '"+ ExpectedDate +"' where "+SQL_condition;
			stmt.execute(query);
			SQLDBDateUpdate=true;
			ExtentTestManager.reportStepPass("SQL DB Update Query : "+ query + " executed successfully.");

		} catch (Exception e) {
			SQLDBDateUpdate=false;
			ExtentTestManager.reportStepFail(driver, "Error occured while executing the SQL query using SQLDBDateUpdate. Error description is : "+ e.getMessage() +".", false);
		}
		return SQLDBDateUpdate;
	}
	
		public synchronized boolean readLogFiles(String filePath, String startsWith, String endsWith, String textName, int strExecEventFlag) {
    		boolean functionStatus = false;
    		String path = null;
    		String startValue = null;
    		String endValue = null;
    		String textValue = null;
    		File[] listOfFile = null;
    		String fileName = null;
    		String actualText = null;
    		Pattern pattern = null;
    		try{
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, gblrecordsCounterStatic));
    				startValue = getTestData(testDataFilePathStatic, testComponentNameStatic,startsWith,gblrecordsCounterStatic);
    				endValue = getTestData(testDataFilePathStatic, testComponentNameStatic,endsWith,gblrecordsCounterStatic);
    				textValue = getTestData(testDataFilePathStatic, testComponentNameStatic,textName,gblrecordsCounterStatic);
    			}

    			if(path==null || startValue==null || endValue==null || textValue==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}

    			//Get the filename by given startName and endName
    			File directory = new File("//\\" +path);
    			listOfFile = directory.listFiles();
    			if(listOfFile.length != 0){
    				for(int i = 0; i<listOfFile.length; i++){
    					if(listOfFile[i].isFile()){
    						fileName = listOfFile[i].getName();
    						if(fileName.startsWith(startValue) && fileName.endsWith(endValue)){
    							//Read the file and match the expected value

    							File ff = new File("//\\" +path +fileName);
    							String fileContent = IOUtils.toString(ff.toURI(),"UTF-8");
    							actualText = "Text is not available in log file";
    							pattern = Pattern.compile(textValue);
    							Matcher matcher = pattern.matcher(fileContent);

    							while(matcher.find()){
    								actualText = matcher.group();
    								log.info("Text is matched");
    								ExtentTestManager.reportStepPass("Text '"+actualText+"' is matched with expected text in the filename of '"+startValue+"'");
    								return true;
    							}
    						}
    					}
    				}
    			}else{
    				log.info("File is not available in directory");
    				ExtentTestManager.reportStepFail(driver,"File is not available in directory" , true);
    				return false;
    			}
    			log.info(actualText);
    			functionStatus = false;
    			ExtentTestManager.reportStepFail(driver,"Expected text '" + textValue + "' doesn't exist in the filename '"+startValue+"'" , false);

    		}catch(Exception e){
    			functionStatus = false;
    			ExtentTestManager.reportStepFail(driver,"Error occurred while finding the expected text in the filename '"+startValue+"'" , false);
    		}
    		return functionStatus;
    	}
		
		public synchronized boolean SleepForTimeLimit(String strWaitForTime,int strExecEventFlag){
    		boolean functionStatus=false;
    		String WaitForTime=null;
    		int Seconds_to_Wait=0;
    		try{
    			if(strExecEventFlag==1){
    				WaitForTime=getTestData(testDataFilePathStatic, testComponentNameStatic,strWaitForTime,gblrecordsCounterStatic);
    			}

    			if(WaitForTime==null){
    				ExtentTestManager.reportStepFail(driver,"WaitForTime is not provided in test data sheet.", false);
    				functionStatus=false;
    			}
    			
    			Seconds_to_Wait=Integer.parseInt(WaitForTime);
    			Thread.sleep(Seconds_to_Wait);
    			functionStatus=true;
    			
    		}catch(Exception e){
    			ExtentTestManager.reportStepFail(driver, "Error occured while waiting for the time '"+Seconds_to_Wait+"'."+e.getMessage(), true);
    			functionStatus=false;
    		}

    		try{
    			if(functionStatus==true){
    				ExtentTestManager.reportStepPass("The script waited for '"+Seconds_to_Wait+"' successfully");
    			}else if(functionStatus==false){
    				ExtentTestManager.reportStepFail(driver,"The script failed to wait for "+Seconds_to_Wait+"' time", true);
    			}
    		} catch (Exception e){
    			ExtentTestManager.reportStepFail(driver, "Error occured while reporting the function 'SleepForTimeLimit'. Error description is  "+ e.getMessage() +".", true);
    		}
    		return functionStatus;
    	}

    	public synchronized boolean WaitUntilPatternNotAppearsInLogFiles(String filePath, String startsWith, String endsWith, String textName, int strExecEventFlag) {
    		
    		boolean functionStatus = false;
    		String path = null;
    		String startValue = null;
    		String endValue = null;
    		String textValue = null;
    		File[] listOfFile = null;
    		String fileName = null;
    		Pattern pattern = null;
    		
    		try{
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, gblrecordsCounterStatic));
    				startValue = getTestData(testDataFilePathStatic, testComponentNameStatic,startsWith,gblrecordsCounterStatic);
    				endValue = getTestData(testDataFilePathStatic, testComponentNameStatic,endsWith,gblrecordsCounterStatic);
    				textValue = getTestData(testDataFilePathStatic, testComponentNameStatic,textName,gblrecordsCounterStatic);
    			}

    			if(path==null || startValue==null || endValue==null || textValue==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}

    			//Get the filename by given startName and endName
    			File directory = new File("//\\" +path);
    			listOfFile = directory.listFiles();
    			if(listOfFile.length != 0){
    				for(int i = 0; i<listOfFile.length; i++){
    					if(listOfFile[i].isFile()){
    						fileName = listOfFile[i].getName();
    						if(fileName.startsWith(startValue) && fileName.endsWith(endValue)){
    							//Read the file and match the expected value

    							File ff = new File("//\\" +path +fileName);
    							String fileContent = IOUtils.toString(ff.toURI(),"UTF-8");
    							pattern = Pattern.compile(textValue);
    							Matcher matcher = pattern.matcher(fileContent);

    							if(!(matcher.find())){
    								ExtentTestManager.reportStepPass("Text '"+textValue+"' is not present in the filename of '"+startValue+"'");
    								functionStatus = true;
    							}
    						}
    					}
    				}
    			}else{
    				log.info("File is not available in directory");
    				ExtentTestManager.reportStepFail(driver,"File is not available in directory" , true);
    				functionStatus = false;
    			}
    			
    		}catch(Exception e){
    			functionStatus = false;
    			ExtentTestManager.reportStepFail(driver,"Error occurred while finding the expected text in the filename '"+startValue+"'" , false);
    		}
    		return functionStatus;
    	}
		
	    public synchronized boolean WaitUntilMultiplePatternAppearsInLogFiles(String filePath,String startFileNameValue,String endFileNameValue,String strPatterToCheck,String envVariableName ,int strExecEventFlag){

    		boolean result= false;
    		String path = null;
    		File[] listOfFile = null;
    		String fileName = null;
    		boolean found=false;
    		String patterToCheck=null;
    		String envVariable=null;
    		String startFileNameFromExcel=null;
    		String endFileNameFromExcel=null;

    		try{
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, strExecEventFlag));
    				startFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, startFileNameValue,gblrecordsCounterStatic);
    				endFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, endFileNameValue,gblrecordsCounterStatic);
    				patterToCheck= getTestData(testDataFilePathStatic, testComponentNameStatic, strPatterToCheck,gblrecordsCounterStatic);
    				envVariable= getTestData(testDataFilePathStatic, testComponentNameStatic, envVariableName,gblrecordsCounterStatic);
    			}

    			if(path==null ||startFileNameFromExcel==null ||endFileNameFromExcel==null ||patterToCheck==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}

    			File directory = new File("//\\" +path);
    			boolean fileexist=false;
    			int fileAppeartime=0;

    			while(fileAppeartime<10){
    				Thread.sleep(1000);
    				listOfFile = directory.listFiles();
    				if(listOfFile.length != 0){
    					log.info("Directory has files");
    					fileexist=true;
    					break;

    				}else{
    					log.info("No File is available in directory. looping again with 60 secs");
    				}

    				log.info("No File is available in directory with 60 secs");
    				fileAppeartime++;
    			}

    			if(fileexist){
    				log.info("Files avialble in the directiory");
    			}else{
    				log.info("No File is available in directory for 60secs");
    				ExtentTestManager.reportStepFail(driver,"No File is not available in the given directory" , false);
    				return false;
    			}

    			boolean foundstatus=false;
    			int time=0;
    			while(time<10){
    				Thread.sleep(1000);	
    				listOfFile = directory.listFiles();
    				for(int i = 0; i<listOfFile.length; i++){
    					log.info("i is : "+i);
    					
    					if(listOfFile[i].isFile()){
    						fileName = listOfFile[i].getName();
    						log.info("Found a file and name is : "+fileName);
    						
    						if(fileName.startsWith(startFileNameFromExcel) && fileName.endsWith(endFileNameFromExcel)){
    							log.info("FileName exact match : "+fileName);
    							fileName=listOfFile[i].getName();
    							foundstatus=true;
    						}
    					}
    				}
    				
    				if(foundstatus){
    					log.info("FileName exact match is found. Braking the loop");
    					break;
    				}else{
    					log.info("FileName not found in path. Continue the loop");
    				}
    				time++;
    			}

    			if(fileName == null){
    				ExtentTestManager.reportStepFail(driver,"File starting with Name '"+startFileNameFromExcel+"' file is not available in the directory" , false);
    				return false;
    			}

    			File file =new File("//\\" +path +fileName);
    			log.info(file.getAbsolutePath()+" || "+file.getName());
    			//int i=0;
    			//while(i<10){
    				Thread.sleep(1000);
    				
    				try {
    					
    					FileReader r=new FileReader(file); 

						BufferedReader brf = new BufferedReader(r); 
    					
    					String WholeText=null;
    					String x=" ";
    					while((x=brf.readLine()) !=null){
    						WholeText = WholeText+x;
    					}
    					
    							Pattern p = Pattern.compile(patterToCheck);
    							Matcher m = p.matcher(WholeText);

    							if (m.find()){
    								found=true;
    								log.info("Pattern Match found in the Line!");
    								log.info("Match is : "+m.group(0));
    								ExtentTestManager.reportStepPass("Log contains Expected Pattern '"+m.group(0) +"'");
    								if(!(envVariable.trim().equalsIgnoreCase("NA"))){
    									log.info("Storing the Pattern Matched in the Env Variable '"+envVariable+"'");
    									Runtimevalue.setProperty(envVariable, m.group(0));
    									ExtentTestManager.reportStepPass("The Dynamic Value '"+m.group(0)+"' is successfully stored in the Runtime Varaible '"+envVariable+"'.");
    									brf.close();
    								}
    								//break;
    							}

    							if(found){
    								log.info("Pattern Match found breaking the HasNext Loop");
    								//break;
    							}else{
    								log.info("Pattern Match not found. Checking teh next line that contains expected word");
    							}
    						

    					if(found){
    						log.info("Match found, Breaking the Time Loop");
    						result=true;
    						//break;
    					}else{
    						log.info("Match not found. Continue the Loop...");
    					}

    				} catch (FileNotFoundException e) {
    					log.info("FileNotFoundException occured match founder... :"+e);
    					//e.printStackTrace();
    				}catch (Exception e) {
    					log.info("Excption occured match founder... : "+e);
    					ExtentTestManager.reportStepFail(driver, "Error occured while finding the pattern from Winservice Log. Error description is : "+ e.getMessage() +".", false);
    					//e.printStackTrace();
    				}
    				
    				//i++;
    			//}

    			if(result){
    				ExtentTestManager.reportStepPass("Log file starting with name '"+startFileNameFromExcel+"' from Path '"+path+"' contains the Expected Log Pattern '"+patterToCheck+"'");
    			}else{
    				ExtentTestManager.reportStepFail(driver,"Log file starting with name '"+startFileNameFromExcel+"' from Path '"+path+"' does not contains the Expected Log Pattern '"+patterToCheck+"' within 60 secs", false);
    			}

    		} catch(Exception e) { 
    			result=false;
    			ExtentTestManager.reportStepFail(driver,"Error occured in the WinserviceWaitUntilPatternAppears. Error description is : "+ e.getMessage() +".", false);
    			log.info("Error : " + e);
    		}
    		return result;
    	}
    	
    	
		public synchronized boolean TimeDiffCalculate_from_LogFiles(String filePath,String startFileNameValue,String endFileNameValue,String strLineContains_part_1,String strLineContains_part_2,String strlineContent_part_1,String strlineContent_part_2,String envVariableName ,String strNoOfPatternstoVerify,String strTimeStringtobeVerified,String strExpectedTimeString,int strExecEventFlag){

    		boolean result= false;
    		String path = null;
    		File[] listOfFile = null;
    		String fileName = null;
    		String LineContains_part_1=null;
    		String LineContains_part_2=null;
    		String lineContent_part_1=null;
    		String lineContent_part_2=null;
    		String startFileNameFromExcel=null;
    		String endFileNameFromExcel=null;
    		String NoOfPatternstoVerify=null;
    		String TimeStringtobeVerified=null;
    		String ExpectedTimeDifference=null;
    		Matcher m = null;
    		Matcher n = null;
    		Matcher y = null;
    		Matcher t = null;
    		int str_NoOfPatternstoVerify=0;
    		String[] First_Part=null;
    		String[] Second_Part=null;
    		long difference=0;

    		try{
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, strExecEventFlag));
    				startFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, startFileNameValue,gblrecordsCounterStatic);
    				endFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, endFileNameValue,gblrecordsCounterStatic);
    				LineContains_part_1= getTestData(testDataFilePathStatic, testComponentNameStatic, strLineContains_part_1,gblrecordsCounterStatic);
    				LineContains_part_2= getTestData(testDataFilePathStatic, testComponentNameStatic, strLineContains_part_2,gblrecordsCounterStatic);
    				lineContent_part_1= getTestData(testDataFilePathStatic, testComponentNameStatic, strlineContent_part_1,gblrecordsCounterStatic);
    				lineContent_part_2= getTestData(testDataFilePathStatic, testComponentNameStatic, strlineContent_part_2,gblrecordsCounterStatic);
    				NoOfPatternstoVerify= getTestData(testDataFilePathStatic, testComponentNameStatic, strNoOfPatternstoVerify,gblrecordsCounterStatic);
    				TimeStringtobeVerified= getTestData(testDataFilePathStatic, testComponentNameStatic, strTimeStringtobeVerified,gblrecordsCounterStatic);
    				ExpectedTimeDifference= getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedTimeString,gblrecordsCounterStatic);
    			}

    			if(path==null ||startFileNameFromExcel==null ||endFileNameFromExcel==null ||LineContains_part_1==null||LineContains_part_2==null||lineContent_part_1==null||lineContent_part_2==null||NoOfPatternstoVerify==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}

    			File directory = new File("//\\" +path);
    			boolean fileexist=false;
    			int fileAppeartime=0;

    			while(fileAppeartime<10){
    				Thread.sleep(1000);
    				listOfFile = directory.listFiles();
    				if(listOfFile.length != 0){
    					log.info("Directory has files");
    					fileexist=true;
    					break;

    				}else{
    					log.info("No File is available in directory. looping again with 60 secs");
    				}

    				log.info("No File is available in directory with 60 secs");
    				fileAppeartime++;
    			}

    			if(fileexist){
    				log.info("Files avialble in the directiory");
    			}else{
    				log.info("No File is available in directory for 60secs");
    				ExtentTestManager.reportStepFail(driver,"No File is not available in the given directory" , false);
    				return false;
    			}

    			boolean foundstatus=false;
    			int time=0;
    			while(time<10){
    				Thread.sleep(1000);	
    				listOfFile = directory.listFiles();
    				for(int i = 0; i<listOfFile.length; i++){
    					log.info("i is : "+i);
    					
    					if(listOfFile[i].isFile()){
    						fileName = listOfFile[i].getName();
    						log.info("Found a file and name is : "+fileName);
    						
    						if(fileName.startsWith(startFileNameFromExcel) && fileName.endsWith(endFileNameFromExcel)){
    							log.info("FileName exact match : "+fileName);
    							fileName=listOfFile[i].getName();
    							foundstatus=true;
    						}
    					}
    				}
    				
    				if(foundstatus){
    					log.info("FileName exact match is found. Braking the loop");
    					break;
    				}else{
    					log.info("FileName not found in path. Continue the loop");
    				}
    				time++;
    			}

    			if(fileName == null){
    				ExtentTestManager.reportStepFail(driver,"File starting with Name '"+startFileNameFromExcel+"' file is not available in the directory" , false);
    				return false;
    			}

    			File file =new File("//\\" +path +fileName);
    			log.info(file.getAbsolutePath()+" || "+file.getName());
    			Thread.sleep(1000);
    			String line = IOUtils.toString(file.toURI(),"UTF-8");
    				
    				try {
    					str_NoOfPatternstoVerify = Integer.parseInt(NoOfPatternstoVerify);
    					System.out.println("str_NoOfPatternstoVerify is is ;;; "+str_NoOfPatternstoVerify);
    					First_Part=new String[str_NoOfPatternstoVerify];
    					if(line.contains(LineContains_part_1)){
    						System.out.println("lineContent_part_1 --> "+lineContent_part_1);
    							Pattern p = Pattern.compile(lineContent_part_1);
    							m = p.matcher(line);
    							
                                int k=0;
    							while (m.find()){
    								if(k==str_NoOfPatternstoVerify){
    									break;
    								}
    								First_Part[k]=m.group();
    								k=k+1;
    								
    							}
    				   }
    					
    				}catch (Exception e){
        					log.info("Excption occured match founder... : "+e);
        					ExtentTestManager.reportStepFail(driver, "Error occured while finding the pattern from Winservice Log in first part. Error description is : "+ e.getMessage() +".", false);
        					result= false;
        					//e.printStackTrace();
        			}
    				
    				  
    				try {
    				  Second_Part=new String[str_NoOfPatternstoVerify];
    				  if(line.contains(LineContains_part_2)){
    					  System.out.println("lineContent_part_2 --> "+lineContent_part_2);
							Pattern p = Pattern.compile(lineContent_part_2);
							n = p.matcher(line);
							
                            int q=0;
							while (n.find()){
								if(q==str_NoOfPatternstoVerify){
									break;
								}
								Second_Part[q]=n.group();
								q=q+1;
							}
				      }  
    				
    				}catch (Exception e){
    					log.info("Excption occured match founder... : "+e);
    					ExtentTestManager.reportStepFail(driver, "Error occured while finding the pattern from Winservice Log in second part. Error description is : "+ e.getMessage() +".", false);
    					result= false;
    			}
    				  
    				
    				System.out.println("First_Part[0] --> "+First_Part[0]);
    				System.out.println("First_Part[1] --> "+First_Part[1]);
    				System.out.println("First_Part[2] --> "+First_Part[2]);
    				System.out.println("Second_Part[0] --> "+Second_Part[0]);
    				System.out.println("Second_Part[1] --> "+Second_Part[1]);
    				System.out.println("Second_Part[2] --> "+Second_Part[2]);
    				
    				try {
    				  String time1 = null;
    				  String time2 = null;
    				  int j=1;
    				  for (int h=0;h<str_NoOfPatternstoVerify-1;h++){
        				  System.out.println("TimeStringtobeVerified --> "+TimeStringtobeVerified);
						  Pattern r = Pattern.compile(TimeStringtobeVerified);
						  y = r.matcher(Second_Part[h]);
						  t = r.matcher(First_Part[j]);
    					  
						  if(y.find()){
							  System.out.println("insdie part 1");
							  time1 = y.group();
						  }
						  
						  if(t.find()){
							  System.out.println("insdie part 2");
							  time2 = t.group();
						  }
						  
                          System.out.println("time1 --> "+time1);
                          System.out.println("time2 --> "+time2);	

        				  SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
        				  Date date1 = format.parse(time1);
        				  Date date2 = format.parse(time2);
        				  difference = date2.getTime() - date1.getTime();
        				  difference = difference/1000;
        				  j=j+1;

        		    		try{
        		     			if(difference==Integer.parseInt(ExpectedTimeDifference)){
        		     				log.info("difference is --> "+difference);
        		     				ExtentTestManager.reportStepPass("The time difference between previous 'End time : "+time1+"' process and next 'Start time : "+time2+"' process is '"+difference+"' seconds exactly as expected");
        		     				result=true;
        		     			}else{
        		     				log.info("difference is not matching --> "+difference);
        		     				System.out.println("Integer.parseInt(ExpectedTimeDifference)--> "+Integer.parseInt(ExpectedTimeDifference));
        		     				ExtentTestManager.reportStepFail(driver,"The time difference between previous 'End time : "+time1+"' process and next 'Start time : "+time2+"' process is not equal to '"+difference+"' seconds. The actual time difference is '"+difference+"' seconds", true);
        		     				result=false;
        		     			}
        		     		} catch (Exception e){
        		     			ExtentTestManager.reportStepFail(driver, "Error occured while calculating the time difference between two parts. Error description is  "+ e.getMessage() +".", true);
        		     			log.info("TimeDiffCalculate_from_LogFiles Error : " + e);
        		     			result=false;
        		     		}
    				  }
    				}catch (Exception e){
    					log.info("Exception occured "+e);
    					ExtentTestManager.reportStepFail(driver, "Error occured while calculating the time difference between two parts. Error description is : "+ e.getMessage() +".", false);
    					result= false;
    				}
    				
    				} catch (FileNotFoundException e) {
    					log.info("FileNotFoundException occured match founder... :"+e);
    					result= false;
    				}catch (Exception e) {
    					log.info("Excption occured match founder... : "+e);
    					ExtentTestManager.reportStepFail(driver, "Error occured while finding the pattern from Winservice Log. Error description is : "+ e.getMessage() +".", false);
    					result= false;
    				}
    		return result;
    	}
    	
    	public synchronized boolean SQLDBDeleteAll(String sqltablename, int strExecEventFlag){
    		String tablename = null;

    		try {
    		if(strExecEventFlag==1){
    			tablename= getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
    		}else{
    			tablename= sqltablename;
    		}

    		if(tablename==null){
    			ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    			return false;
    		}
    	
    			String check = "select * from "+tablename;
    			String query = "Delete from "+ tablename;
    			ResultSet rs = stmt.executeQuery(check);		
    			int temp=0;	

    			while(rs.next()){
    				temp++;
    			}
    			if(temp >= 1){
    				stmt.execute(query);
    				ExtentTestManager.reportStepPass("SQL Delete Query  "+ query + "  executed successfully.");
    				return true;
    			}else{
    				ExtentTestManager.reportStepPass( "SQL Delete Query  "+ query + "  has NO RECORDS in DB");
    				return true;
    			}

    		}catch (Exception e) { 
    			ExtentTestManager.reportStepFail(driver,"Error occured while deleting to the SQL query. Error description is : "+ e.getMessage(), false);
    			return false;
    		}
    	}
		
		public synchronized boolean waituntilvaluepresent(String getValueFromPOM, String strTestObject) {
    		boolean elementStatus= false;
    		int icount = 0;
    		try{
    			if((selectByLocatorType(getValueFromPOM)).getAttribute("value").length() != 0){
    				elementStatus = true;
    			}
    			while((selectByLocatorType(getValueFromPOM)).getAttribute("value").length() == 0){
    				Thread.sleep(1000);
    				//RefreshObject(getValueFromPOM);
    				if((selectByLocatorType(getValueFromPOM)).getAttribute("value").length() != 0){
    					elementStatus = true;
    					break;
    				}
    				if(icount == 10  && (selectByLocatorType(getValueFromPOM)).getAttribute("value").length() == 0){
    					break;
    				}
    				icount = icount + 1;
    			}
    		} catch(StaleElementReferenceException e1){
    			return waituntilvaluepresent(getValueFromPOM, strTestObject);
    		} catch(Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while waiting for the element : '"+ strTestObject +"'.Error description is : "+ e +"." , true);
    			elementStatus = false;
    		}

    		if(elementStatus){
    			ExtentTestManager.reportStepPass("'Text is present in "+ strTestObject +"' successfully");
    			return elementStatus;
    		}else{
    			ExtentTestManager.reportStepFail(driver,"'Text is not present in "+ strTestObject +"'." , true);
    			return elementStatus;
    		}
    	}
		
		public synchronized boolean SQLDB_TimeDiffCalculate(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strDateTimeFormat, String strExpectedTimeDifference, int strExecEventFlag){
    		boolean functionStatus=false;
    		String query1=null;
    		String check1 = null;
    		String Table_name = null;
    		String Column_name = null;
    		String SQL_condition = null;
    		String Actual_Value1 = null;
    		String query2=null;
    		String check2 = null;
    		String Actual_Value2 = null;
    		String Date_Time_Format = null;
    		String ExpectedTimeDifference = null;

    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
    				Date_Time_Format=getTestData(testDataFilePathStatic, testComponentNameStatic, strDateTimeFormat, gblrecordsCounterStatic);
    				ExpectedTimeDifference=getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedTimeDifference, gblrecordsCounterStatic);
    			}
    				
    			if(Table_name==null || Column_name==null || SQL_condition==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    				functionStatus=false;
    			}
    			
    			String[] str_Table_name = Table_name.split("\\|");
    			String[] str_Column_name = Column_name.split("\\|");
    			String[] str_SQL_condition = SQL_condition.split("\\|");

    			query1 = "select "+str_Column_name[0]+" from "+str_Table_name[0]+" where "+str_SQL_condition[0];
    			check1 = "select "+str_Column_name[0]+" from "+str_Table_name[0]+" where "+str_SQL_condition[0];

    			//check1 for Record Available
    			ResultSet rs_SQLServercheck1 = stmt.executeQuery(check1);
    			int temp1=0;	
    			while(rs_SQLServercheck1.next()){
    				temp1++;
    			}

    			if(temp1 < 1){
    				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the query1  "+ query1 + "  in DB",false);
    				functionStatus=false;
    			}

    			rs_SQLServercheck1 = stmt.executeQuery(check1);
    			rs_SQLServercheck1.next();
    			rs_SQLServercheck1.getObject(str_Column_name[0]);

    			ResultSet rs_SQLServer1 = stmt.executeQuery(query1);
    			rs_SQLServer1.next();
    			Actual_Value1 = rs_SQLServer1.getString(1).trim();
    				
                query2 = "select "+str_Column_name[1]+" from "+str_Table_name[1]+" where "+str_SQL_condition[1];
    			check2 = "select "+str_Column_name[1]+" from "+str_Table_name[1]+" where "+str_SQL_condition[1];

    			//check2 for Record Available
    			ResultSet rs_SQLServercheck2 = stmt.executeQuery(check2);
    			int temp2=0;	
    			while(rs_SQLServercheck2.next()){
    				temp2++;
    			}

    			if(temp2 < 1){
    				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the query2  "+ query2 + "  in DB",false);
    				functionStatus=false;
    			}

    			rs_SQLServercheck2 = stmt.executeQuery(check2);
    			rs_SQLServercheck2.next();
    			rs_SQLServercheck2.getObject(str_Column_name[1]);

    			ResultSet rs_SQLServer2 = stmt.executeQuery(query2);
    			rs_SQLServer2.next();
    			Actual_Value2 = rs_SQLServer2.getString(1).trim();
    				
    			SimpleDateFormat format = new SimpleDateFormat(Date_Time_Format);
    			Date date1 = format.parse(Actual_Value1);
    			Date date2 = format.parse(Actual_Value2);
    			  
    				//in milliseconds
    				long diff = date2.getTime() - date1.getTime();

    				long diffMinutes = diff / (60 * 1000) % 60;

    				System.out.print(diffMinutes + " minutes, ");
    				   				
    				if(diffMinutes>=Integer.parseInt(ExpectedTimeDifference)){
    					ExtentTestManager.reportStepPass("The time difference between time 1 : '"+Actual_Value1+"' and time 2 : '"+Actual_Value2+"' is greater than or equal to '"+ExpectedTimeDifference+"' minutes as expected. It is '"+diffMinutes+"' mins in difference");
    					functionStatus= true;
    					System.out.println("greater than (or) equal to 1 minute");
    				}else{
    					ExtentTestManager.reportStepFail(driver,"The time difference between time 1 : '"+Actual_Value1+"' and time 2 : '"+Actual_Value2+"' is not greater than or equal to '"+ExpectedTimeDifference+"' minutes. It is '"+diffMinutes+"' mins in difference", false);
    					functionStatus= false;
    					System.out.println("not eqaul");
    				}

    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while calculating the time difference between two values.Error description is : "+ e.getMessage(), false);
    			return false;
    		}
    		return functionStatus;
    	}
		
		
	/***************************************************KARTHI CODE COMPLETED**********************************************************/
	
	
	

	
	

	
		/***************************************************PRAVEEN CODE STARTED**********************************************************/
	
	
    	public synchronized boolean getServerTime(String commandName, String serverTimeEnvVar, int strExecEventFlag){
    		
    		boolean functionStatus = false;
    		String cmdName = null;
    		String serTimeEnvVar = null;
    		
    		
    		try{
    			
    			if(strExecEventFlag == 1){
    				cmdName = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, commandName, gblrecordsCounterStatic));
    				serTimeEnvVar = getTestData(testDataFilePathStatic, testComponentNameStatic, serverTimeEnvVar, gblrecordsCounterStatic);
    				
    			}
    			
    			if(cmdName == null || serTimeEnvVar == null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    		
    			
    		Runtime rt = Runtime.getRuntime();
    		Process process = rt.exec(cmdName);
    		BufferedReader buReaderInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
    		BufferedReader buReaderError = new BufferedReader(new InputStreamReader(process.getErrorStream()));
    		
    		String getTimeFromCMD = null;
    		while((getTimeFromCMD = buReaderInput.readLine()) != null){
    			
    			String timeToString = getTimeFromCMD.toString();
    			log.info("157 Server current date and time :"+timeToString);
    			
    			String lineContent = timeToString;
    			String patternValue = "(Current time at (.*)192.168.110.157 is )(\\d+\\/\\d+\\/\\d{4} )(\\d+\\:\\d+\\:\\d+(.*))";
    			
    			Pattern pattern = Pattern.compile(patternValue);
        		Matcher matcher = pattern.matcher(lineContent);
        		
        		
        		while(matcher.find()){
        			
        			String timePattern = matcher.group(4);
        			log.info("Current time from 157 server :"+timePattern);
        			
        			if(timePattern.contains("PM")){
        				
        				String timeZoneSplitHour = timePattern.split(":")[0];
        				String timeZoneSplitMin = timePattern.split(":")[1];
        				
        				log.info("timeZoneSplit :"+timeZoneSplitHour);
        				log.info("timeZoneSplitMin :"+timeZoneSplitMin);
        				
        				int convertToInteger = Integer.parseInt(timeZoneSplitHour);
        				int totalTime = convertToInteger + 12;
        				String totalTimeString = String.valueOf(totalTime);
        				String convertedTimeZonePM = totalTimeString+":"+timeZoneSplitMin;
        				log.info("convertedTimeZone PM:"+convertedTimeZonePM);
        				Runtimevalue.setProperty(serTimeEnvVar, convertedTimeZonePM);
        				ExtentTestManager.reportStepPass("Current time "+convertedTimeZonePM+" PM is fetched from 192.168.110.157 server and stored in environment variable "+serverTimeEnvVar+"");
        				return true;
        				
        			}else if(timePattern.contains("AM")){
        				
        				String timeZoneSplitHour = timePattern.split(":")[0];
        				String timeZoneSplitMin = timePattern.split(":")[1];
        				String convertedTimeZoneAM = timeZoneSplitHour+":"+timeZoneSplitMin;
        				log.info("convertedTimeZone AM:"+convertedTimeZoneAM);
        				Runtimevalue.setProperty(serTimeEnvVar, convertedTimeZoneAM);
        				ExtentTestManager.reportStepPass("Current time "+convertedTimeZoneAM+" AM is fetched from 192.168.110.157 server and stored in environment variable "+serverTimeEnvVar+"");
        				return true;
        				
        			}
        			
        		}
        		
        		functionStatus = false;
    			ExtentTestManager.reportStepFail(driver,"Regex pattern is not matched, while fetching the timezone from 192.168.110.157 server" , false);
    			break;
        		
    			
    		}
    		
    		while((getTimeFromCMD = buReaderError.readLine()) != null){
        		functionStatus = false;
    			ExtentTestManager.reportStepFail(driver,"Error occurred while fetching the timezone from 192.168.110.157 server" , false);
    			break;
    			}
    		

    		}catch(Exception e){
    			
    			functionStatus = false;
    			ExtentTestManager.reportStepFail(driver,"Exception occurred while fetching the timezone from 192.168.110.157 server'"+e.getMessage()+"'" , false);
    			
    		}
    		
    		
    		return functionStatus;
    		
    	}
    	
    	
    	public synchronized boolean XMLTextUpdateMethodFromEnv(String Location,String AttributeXPath,String ValueToSet,int strExecEventFlag) throws Exception, IOException{
    		boolean Executionstatus=false;
    		String valueFromEnv = null;

    		if (Location==""){
    			ExtentTestManager.reportStepFail(driver,    "Location Path for WebConfig is missing", true);
    			return false;
    		}
    		if (AttributeXPath==""){
    			ExtentTestManager.reportStepFail(driver,    "AttributeXPath Path for WebConfig is missing", true);
    			return false;
    		}
    		if (ValueToSet==""){
    			ExtentTestManager.reportStepFail(driver,    "ValueToSet in the node for WebConfig is missing", true);
    			return false;
    		}
    		if(strExecEventFlag==1){
    			Location=getTestData(testDataFilePathStatic, testComponentNameStatic,Location,gblrecordsCounterStatic);
    			Location=property.getProperty(Location);
    			AttributeXPath=getTestData(testDataFilePathStatic, testComponentNameStatic,AttributeXPath,gblrecordsCounterStatic);
    			valueFromEnv = getTestData(testDataFilePathStatic, testComponentNameStatic,ValueToSet,gblrecordsCounterStatic);
    			valueFromEnv = Runtimevalue.getProperty(valueFromEnv);

    			if (valueFromEnv==""){
    				ExtentTestManager.reportStepFail(driver,    "Value present in Property File Seems to Empty.Please check the property file.", true);
    				return false;
    			}
    		}

    		try {
    			DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    			DocumentBuilder builder=factory.newDocumentBuilder();;
    			File file=new File("//\\"+Location);

    			Document document=builder.parse(file);
    			document.getDocumentElement().normalize();
    			NodeList nodeList=null;
    			XPath xpath=XPathFactory.newInstance().newXPath();
    			nodeList=(NodeList)xpath.compile(AttributeXPath).evaluate(document,XPathConstants.NODESET);
    			nodeList.item(0).setTextContent(valueFromEnv);
    			TransformerFactory transFormerFactory = TransformerFactory.newInstance();
    			Transformer transFormer = transFormerFactory.newTransformer();
    			DOMSource source = new DOMSource(document);

    			StreamResult result = new StreamResult(file);
    			transFormer.transform(source, result);
    			result.getOutputStream().close();
    			Executionstatus=true;
    			ExtentTestManager.reportStepPass("XML config File '"+Location+"' has been updated successfully for the tag '"+AttributeXPath+"' with the value set as '"+valueFromEnv+"'");
    			Thread.sleep(2000);
    		} catch (ParserConfigurationException e) {
    			e.printStackTrace();
    			ExtentTestManager.reportStepFail(driver, "ValueToSet in the node for WebConfig is Not successfull due to reason: '"+e.getMessage()+"'", false);
    			Executionstatus=false;
    		} catch (Exception e) {
    			e.printStackTrace();
    			ExtentTestManager.reportStepFail(driver, "Exception occured during XMLTextUpdate. Reason: '"+e.getMessage()+"'", false);
    			Executionstatus=false;
    		}
    		return Executionstatus;
    	}
	
    	
    	public synchronized boolean verifyContentInCSVFile(String filePath,String startFileNameValue,String endFileNameValue, String excelColumnName, String expectedText, int strExecEventFlag){
    		
    		boolean functionStatus= false;
    		
    		String path = null;
    		String expTextFromExcel = null;
    		String startWithFromExcel=null;
    		String endWithFromExcel=null;
    		String columnNameFromExcel = null;
    		File[] listOfFile = null;
    		String fileName = null;
    		File directory = null;
    		boolean found = false;
    		

    		try{
    			
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, strExecEventFlag));
    				startWithFromExcel = getTestData(testDataFilePathStatic, testComponentNameStatic, startFileNameValue, gblrecordsCounterStatic);
    				endWithFromExcel = getTestData(testDataFilePathStatic, testComponentNameStatic, endFileNameValue, gblrecordsCounterStatic);
    				expTextFromExcel = getTestData(testDataFilePathStatic, testComponentNameStatic, expectedText, gblrecordsCounterStatic);
    				columnNameFromExcel = getTestData(testDataFilePathStatic, testComponentNameStatic, excelColumnName, gblrecordsCounterStatic);
    				
    			}

    			if(path==null || startWithFromExcel == null || endWithFromExcel == null || expTextFromExcel == null || columnNameFromExcel == null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			
    			Thread.sleep(3000);
    			directory = new File("//\\" +path);
    			listOfFile = directory.listFiles();
    			for(int i = 0; i<listOfFile.length; i++){
    				if(listOfFile[i].isFile()){
    					fileName = listOfFile[i].getName();
    					if(fileName.startsWith(startWithFromExcel) && fileName.endsWith(endWithFromExcel)){
    						log.info("FileName exact match : "+fileName);
    						
    						CsvParserSettings settings = new CsvParserSettings();
    						settings.getFormat().setLineSeparator("\n");
    						settings.selectFields(columnNameFromExcel);
    						
    						CsvParser parser = new CsvParser(settings);
    						List<String[]> csvData = parser.parseAll(new FileReader(path+fileName));
    						for(String[] csvRow : csvData){
    							StringBuilder strBuilder = new StringBuilder();
    							for(String csvColumn : csvRow){
    								strBuilder.append(csvColumn).append("\t");
    								if(csvColumn.trim().equals(expTextFromExcel.trim())){
    									log.info("Expected content is available :"+csvColumn);
    									found = true;
    									break;
    									
    								}else{
    									
    									log.info("Expected content is not available :"+expTextFromExcel);
    									found = false;
    									
    								}
    						}
    					}
    				}else{
    										
    					ExtentTestManager.reportStepFail("File starting with Name "+startWithFromExcel+" file is not available in the directory"+directory , false);
    					functionStatus = false;
    					
    					}
    				}else{
    					
    					ExtentTestManager.reportStepFail(driver, "Expected file "+startWithFromExcel+endWithFromExcel+" is not available in directory", false);
    					functionStatus = false;
    					
    				}
    				
    			}
    			
    			if(found){
    				
    				ExtentTestManager.reportStepPass("Expected '"+expTextFromExcel+"' value is available on columnname '"+columnNameFromExcel+"' in '"+startWithFromExcel+endWithFromExcel+"' filename");
    				return true;
    				
    			}else{
    				
    				ExtentTestManager.reportStepFail(driver, "Expected '"+expTextFromExcel+"' value is not available in "+startWithFromExcel+".csv file by reference of columnname '"+columnNameFromExcel+"' from the directory :"+directory , false);
    				return false;
    		}
    			
    			
    			
    		}catch(Exception e){
    			
    			ExtentTestManager.reportStepFail("Exception occurred while getting the text from CSV file :"+e.getMessage() , false);
    			functionStatus = false;
    			
    		}
    		return functionStatus;
    			
    	}	
    	
    	
    	public synchronized boolean verifyFileNotAvailable(String filePath, int strExecEventFlag){
    		
    		boolean functionStatus = false;
    		
    		String path = null;
    		File directory = null;
    		File[] listOfFile = null;
    		
    		try{
    			
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, strExecEventFlag));
    				
    			}
    			
    			if(path==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			
    			directory = new File("//\\" +path);
    			listOfFile = directory.listFiles();
    			
    			if(listOfFile.length == 0){
    				
    				ExtentTestManager.reportStepPass("File is not available in expected directory '"+directory+"' path");
    				functionStatus = true;
    				
    			}else if(listOfFile.length != 0){
    				
    				ExtentTestManager.reportStepFail("File is available in expected directory '"+directory+"' path", false);
    				functionStatus = false;
    				
    			}
    			
    		}catch(Exception e){
    			
    			ExtentTestManager.reportStepFail("Exception occurred in 'verifyFileNotAvailable' function :"+e.getMessage() , false);
    			
    			
    		}
    		
    		return functionStatus;
    		
    	}
    	
    	
    	public synchronized boolean compareFilenameWithDate(String filePath,String startFileNameValue, String endFileNameValue, String datePattern, int strExecEventFlag){
    		
    		boolean functionStatus= false;
    		
    		String path = null;
    		String expDatePattern = null;
    		String startWithFromExcel=null;
    		String endWithFromExcel=null;

    		File[] listOfFile = null;
    		String fileName = null;
    		File directory = null;
    		

    		try{
    			
    			if(strExecEventFlag == 1){
    				
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, strExecEventFlag));
    				expDatePattern = getTestData(testDataFilePathStatic, testComponentNameStatic, datePattern, gblrecordsCounterStatic);
    				startWithFromExcel = getTestData(testDataFilePathStatic, testComponentNameStatic, startFileNameValue, gblrecordsCounterStatic);
    				endWithFromExcel = getTestData(testDataFilePathStatic, testComponentNameStatic, endFileNameValue, gblrecordsCounterStatic);
    			}

    			if(path==null || startWithFromExcel == null || endWithFromExcel == null || expDatePattern == null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			
    			Thread.sleep(3000);
    			directory = new File("//\\" +path);
    			listOfFile = directory.listFiles();
    			for(int i = 0; i<listOfFile.length; i++){
    				if(listOfFile[i].isFile()){
    					fileName = listOfFile[i].getName();
    					if(fileName.startsWith(startWithFromExcel) && fileName.endsWith(endWithFromExcel)){
    						log.info("FileName exact match : "+fileName);
    						
    						
    						String splittedVal1 = fileName.split("_")[1];
    						log.info("splitted value by reference of '_' special character :"+splittedVal1);
    						String splittedVal2 = splittedVal1.split("\\.")[0];
    						log.info("splitted value by reference of '.' special character :"+splittedVal2);
    						String actualSplittedDate = splittedVal2.substring(0, 8);
    						log.info("Split the date value from splitted filename :"+actualSplittedDate);
    						String chkhhmmss = splittedVal2.substring(8, 14);
    						log.info("Split the hh:mm:ss value from splitted filename :"+chkhhmmss);

    						Pattern pattern = Pattern.compile("\\d+");
    						Matcher matcher = pattern.matcher(chkhhmmss);
    						
    						DateFormat dateFormat = new SimpleDateFormat(expDatePattern);
    						java.util.Date date = new Date();
    						String currentDate = dateFormat.format(date);
    						
    						if(actualSplittedDate.equals(currentDate)){
    							
    							ExtentTestManager.reportStepPass("Actual splitted date '"+actualSplittedDate+"' from CSV file "+startWithFromExcel+endWithFromExcel+" is matched with the today's date '"+currentDate+"'");
    							functionStatus = true;
    							
    							while(matcher.find()){
    								
    								System.out.println("hh:mm:ss pattern is matched successfully :"+matcher.group());
    								String exphhmmssPattern = matcher.group();
    								ExtentTestManager.reportStepPass("Expected hh:mm:ss pattern is matched successfully '"+exphhmmssPattern+"' from the CSV file "+startWithFromExcel+endWithFromExcel+" ");
    								functionStatus = true;
    								
    							}
    							
    						}else{
    							
    							ExtentTestManager.reportStepFail(driver, "Actual splitted date '"+actualSplittedDate+"' from CSV file is not matched with the today's date '"+currentDate+"'", false);
    							functionStatus = false;
    						}
    						
    					}else{
    						
    						ExtentTestManager.reportStepFail(driver, "Expected filename '"+startWithFromExcel+endWithFromExcel+"' is not available in directory", false);
    						functionStatus = false;
    						
    					}
    						
    				}else{
    					
    					ExtentTestManager.reportStepFail(driver, "Expected file '"+startWithFromExcel+endWithFromExcel+"' is not available in directory", false);
    					functionStatus = false;
    					
    				}
    			
    			}		
    			
    		}catch(Exception e){
    			
    			ExtentTestManager.reportStepFail("Exception occurred while getting the filename from CSV file :"+e.getMessage() , false);
    			functionStatus = false;
    			
    		}
    		return functionStatus;
    			
    	}
    	
    	public synchronized boolean compareLogFilenameWithDate(String filePath,String startFileNameValue, String endFileNameValue, String datePattern, int strExecEventFlag){
    		
    		boolean functionStatus= false;
    		
    		String path = null;
    		String expDatePattern = null;
    		String startWithFromExcel=null;
    		String endWithFromExcel=null;

    		File[] listOfFile = null;
    		String fileName = null;
    		File directory = null;
    		

    		try{
    			
    			if(strExecEventFlag == 1){
    				
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, strExecEventFlag));
    				expDatePattern = getTestData(testDataFilePathStatic, testComponentNameStatic, datePattern, gblrecordsCounterStatic);
    				startWithFromExcel = getTestData(testDataFilePathStatic, testComponentNameStatic, startFileNameValue, gblrecordsCounterStatic);
    				endWithFromExcel = getTestData(testDataFilePathStatic, testComponentNameStatic, endFileNameValue, gblrecordsCounterStatic);
    			}

    			if(path==null || startWithFromExcel == null || endWithFromExcel == null || expDatePattern == null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			
    			Thread.sleep(3000);
    			directory = new File("//\\" +path);
    			listOfFile = directory.listFiles();
    			for(int i = 0; i<listOfFile.length; i++){
    				if(listOfFile[i].isFile()){
    					fileName = listOfFile[i].getName();
    					if(fileName.startsWith(startWithFromExcel) && fileName.endsWith(endWithFromExcel)){
    						log.info("FileName exact match : "+fileName);
    						
    						String splittedVal3 = fileName.split("_")[2];
    						String splittedVal4 = fileName.split("_")[3];
    						
    						
    						String actualSplittedDate = splittedVal3;
    						log.info("Split the date value from splitted filename :"+actualSplittedDate);

    						Pattern pattern = Pattern.compile("\\d+");
    						Matcher matcher = pattern.matcher(splittedVal4);
    						
    						DateFormat dateFormat = new SimpleDateFormat(expDatePattern);
    						java.util.Date date = new Date();
    						String currentDate = dateFormat.format(date);
    						
    						if(actualSplittedDate.equals(currentDate)){
    							
    							ExtentTestManager.reportStepPass("Actual splitted date '"+actualSplittedDate+"' from "+startWithFromExcel+endWithFromExcel+" file is matched with the today's date '"+currentDate+"'");
    							functionStatus = true;
    							
    							while(matcher.find()){
    								
    								log.info("hh:mm:ss pattern is matched successfully :"+matcher.group());
    								String exphhmmssPattern = matcher.group();
    								ExtentTestManager.reportStepPass("Expected hh:mm:ss pattern is matched successfully '"+exphhmmssPattern+"' from file "+startWithFromExcel+endWithFromExcel+" ");
    								functionStatus = true;
    								
    							}
    							
    						}else{
    							
    							ExtentTestManager.reportStepFail(driver, "Actual splitted date '"+actualSplittedDate+"' from "+startWithFromExcel+endWithFromExcel+" file is not matched with the today's date '"+currentDate+"'", false);
    							functionStatus = false;
    						}
    						
    					}else{
    						
    						ExtentTestManager.reportStepFail(driver, "Expected filename '"+startWithFromExcel+endWithFromExcel+"' is not available in directory", false);
    						functionStatus = false;
    						
    					}
    						
    				}else{
    					
    					ExtentTestManager.reportStepFail(driver, "Expected file '"+startWithFromExcel+endWithFromExcel+"' is not available in directory", false);
    					functionStatus = false;
    					
    				}
    			
    			}		
    			
    		}catch(Exception e){
    			
    			ExtentTestManager.reportStepFail("Exception occurred while getting the filename from CSV file :"+e.getMessage() , false);
    			functionStatus = false;
    			
    		}
    		return functionStatus;
    			
    	}	
    	
    	
    	public synchronized boolean Webelementjavascriptclick(String getValueFromPOM, String strTestObject) {
    		boolean Webelementjavascriptclick= false;
    		try {
    			((JavascriptExecutor)driver).executeScript("arguments[0].click()",selectByLocatorType(getValueFromPOM));
    			ExtentTestManager.reportStepPass("Element '"+strTestObject+"' is clicked successfully");
    			Webelementjavascriptclick=true;
    		} catch (Exception e) {
    			ExtentTestManager.reportStepFail(driver,"Element '"+strTestObject+"' is not clicked successfully", true); 
    			Webelementjavascriptclick=false;
    		}
    		return Webelementjavascriptclick;
    	}
    	
    	
    	public synchronized boolean WebButtonClickEnter(String getValueFromPOM, String strTestObject) {
    		boolean WebButtonClickEnter= false;
    		try {
    			selectByLocatorType(getValueFromPOM).sendKeys("\n");
    			Thread.sleep(1000);
    			ExtentTestManager.reportStepPass("'Button "+strTestObject+"' is clicked successfully.");
    			WebButtonClickEnter=true;
    		} catch (Exception e) {
    			ExtentTestManager.reportStepFail(driver,"'Button "+strTestObject+"' is not clicked. Exception is "+e, true); 	
    			WebButtonClickEnter=false;
    		}
    		return WebButtonClickEnter;
    	}
    	
    	
    	
    	public synchronized boolean javaScriptEnterText(String getValueFromPOM, String strTestObject, String strColumnName, int strExecEventFlag) throws Exception{
    		String elementValue = null;
    		try{
    			
    			String elementFromPOM=null;
    			elementFromPOM=getValueFromPOM;
    			int count=elementFromPOM.split("#").length;
    			//log.info("JS POM Count : "+count);
    			if(count==2){
    				getValueFromPOM=elementFromPOM.split("#")[1];
    				//log.info("changed getValueFromPOM is : "+getValueFromPOM);
    			}else{
    				//log.info("Not changed getValueFromPOM is : "+getValueFromPOM);
    			}
    			
    			if(strExecEventFlag==1){
    				elementValue = getTestData(testDataFilePathStatic, testComponentNameStatic,strColumnName, gblrecordsCounterStatic);
    			}
    			if(elementValue == null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    				return false;
    			}
    			JavascriptExecutor js = (JavascriptExecutor) driver;
    			js.executeScript("document.getElementById('"+getValueFromPOM+"').value = '"+elementValue+"'");
    			ExtentTestManager.reportStepPass("Text '"+elementValue+"' is entered successfully in the element "+strTestObject+" using JavaScript");	
    			return true;
    		}catch(Exception e){
    			ExtentTestManager.reportStepFail(driver,"Text '"+elementValue+"' is not entered in the element "+strTestObject+" using JavaScript", true);  
    			return false;
    		}
    	}
    	
    	
    	public synchronized boolean WebElementDisabled(String getValueFromPOM, String strTestObject) {

    		boolean elementenable;
    		boolean WebElementDisabled = false;
    		try {
    			elementenable=selectByLocatorType(getValueFromPOM).isEnabled();

    			if(elementenable){
    				WebElementDisabled=false;
    				ExtentTestManager.reportStepFail(driver, "The Element '"+strTestObject+"' is not disabled.", true);
    			}else{
    				WebElementDisabled = true;
    				ExtentTestManager.reportStepPass(  "The Element '"+strTestObject+"' is disabled as expected.");
    			}
    		} catch (Exception e) { 
    			WebElementDisabled=false;
    			ExtentTestManager.reportStepFail(driver, "Exception occured while checking WebElementDisabled."+e, true);
    		}
    		return WebElementDisabled;
    	}
    	
    	
    	public synchronized boolean WebElementTextStoreDynamicValue(String getValueFromPOM, String strTestObject,String strColumnName, int strExecEventFlag ){
    		String actualText="";
    		String strData=null;
    		boolean WebElementTextCompare=false;
    		try{
    			if(strExecEventFlag==1){
    				strData=getTestData(testDataFilePathStatic, testComponentNameStatic,strColumnName,gblrecordsCounterStatic);
    			}
    			if(strData==null){
    				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
    				return false;
    			}

    			actualText = selectByLocatorType(getValueFromPOM).getText();
    			if(actualText == null){
    				actualText="";
    				ExtentTestManager.reportStepPass("The Empty value '"+actualText+"' is stored in the '"+strTestObject+"' is stored in the Runtime variable '"+strData+"'");
    				return false;
    			}

    			Runtimevalue.setProperty(strData, actualText);
    			log.info("Value set to Runtime Property '"+strData+"' is => '"+Runtimevalue.getProperty(strData)+"'");
    			ExtentTestManager.reportStepPass("The Dynamic value '"+actualText+"' of Element '"+strTestObject+"' is successfully stored in the Runtime variable '"+strData+"'");
    			WebElementTextCompare=true;
    		} catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while getting the text from the WebElement '"+strTestObject+"'and the error description is "+e.getMessage(), true);
    			WebElementTextCompare=false;
    		}
    		return WebElementTextCompare;
    	}
    	
    	
    	public synchronized boolean JavaScriptWebEditEnterText(String getValueFromPOM, String strTestObject, String strColumnName, int strExecEventFlag) {
    		boolean elementStatus = false;
    		String elementValue = null;
    		try{
    			if(strExecEventFlag==1){
    				elementValue = getTestData(testDataFilePathStatic, testComponentNameStatic, strColumnName,gblrecordsCounterStatic);
    			}
    			if(elementValue == null){
    				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
    				return false;
    			}
    			
    			String elementFromPOM=null;
    			elementFromPOM=getValueFromPOM;
    			int count=elementFromPOM.split("#").length;
    			//log.info("JS POM Count : "+count);
    			if(count==2){
    				getValueFromPOM=elementFromPOM.split("#")[1];
    				//log.info("changed getValueFromPOM is : "+getValueFromPOM);
    			}else{
    				//log.info("Not changed getValueFromPOM is : "+getValueFromPOM);
    			}

    			JavascriptExecutor js = (JavascriptExecutor) driver;
    			log.info("Scrip is : document.getElementById(\""+getValueFromPOM+"\").value = \""+elementValue+"\"");
    			js.executeScript("document.getElementById(\""+getValueFromPOM+"\").value = \""+elementValue+"\"");
    			ExtentTestManager.reportStepPass("Text '"+elementValue+"' is entered for the Element "+strTestObject+" using JavaScript");	
    			elementStatus = true;
    		}catch(Exception e){
    			ExtentTestManager.reportStepFail(driver,"Text '"+elementValue+"' is not entered for "+strTestObject+"  using JavaScript. Exception is "+e , true);  
    			elementStatus = false;
    		}
    		return elementStatus;
    	}
    	
    	
    	public synchronized boolean EshopSQLDBUpdate(String sqltablename, String strsqlcolumnname,String strsqlcolumnvalue,String strsqlcondition,int strExecEventFlag){
    		String Table_name = null;
    		String Column_name = null;
    		String Column_Value = null;
    		String SQL_condition = null;

    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
    				Column_Value=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnvalue,gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
    			}

    			if(Table_name==null || Column_name==null || Column_Value==null || SQL_condition==null){
    				ExtentTestManager.reportStepFail(driver,"Required details are not provided in the data sheet." , false);
    				return false;
    			}

    			String query = "update "+Table_name+" set "+Column_name+"="+Column_Value+" where "+SQL_condition;
    			EShopstmt.execute(query);
    			ExtentTestManager.reportStepPass("ESHOP SQL Update Query  "+ query + " executed successfully.");
    			return true;
    		} catch (Exception e) {
    			ExtentTestManager.reportStepFail(driver, "Error occured while executing the ESHOP Update Query.Error description is : "+ e.getMessage() +".", false);
    			return false;
    		}
    	}
    	
    	
    	public synchronized boolean EshopSQLDBDelete(String sqltablename, String sqlcondition, int strExecEventFlag){
    		String tablename = null;
    		String condition = null;

    		try{
    			if(strExecEventFlag==1){
    				tablename=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
    				condition=getTestData(testDataFilePathStatic, testComponentNameStatic, sqlcondition,gblrecordsCounterStatic);
    			}
    			if(tablename==null || condition==null){
    				ExtentTestManager.reportStepFail(driver,"Required details are not provided in the data sheet.", false);
    				return false;
    			}
    			String check = "select * from "+tablename +" where "+condition;
    			String query = "Delete from "+ tablename +" where "+ condition;
    			ResultSet rs = null;
    			rs = EShopstmt.executeQuery(check);		
    			int temp=0;	
    			while(rs.next()){
    				temp++;
    			}
    			if(temp >= 1){
    				EShopstmt.execute(query);
    				ExtentTestManager.reportStepPass("ESHOP SQL Delete Query "+ query + " executed successfully.");
    				return true;
    			}else{
    				ExtentTestManager.reportStepPass("ESHOP SQL Delete Query "+ query +" has NO RECORDS available in DB");
    				return true;
    			}
    		}catch (Exception e) { 
    			ExtentTestManager.reportStepFail(driver,"Error occured while executing delete ESHOP SQL query. Error description is : "+ e.getMessage() +".", false);
    			return false;
    		}
    	}

    	
    	public synchronized boolean EShopSQLDBSelect(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strExpectedvalue,int strExecEventFlag){
    		boolean functionStatus=false;
    		String query;
    		String check;
    		String Table_name;
    		String Column_name;
    		String SQL_condition;
    		String Expected_value;
    		String Actual_Value;

    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
    				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedvalue, gblrecordsCounterStatic);
    			}else{
    				Table_name=sqltablename;
    				Column_name=strsqlcolumnname;
    				SQL_condition=strsqlcondition;
    				Expected_value=strExpectedvalue;
    			}

    			if(Table_name==null || Column_name==null || SQL_condition==null||Expected_value==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    				return false;
    			}

    			String pattern = "^Count\\((.*)\\)";
    			// Create a Pattern object
    			  Pattern r = Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
    			// Now create matcher object.
    			  Matcher m = r.matcher(Column_name);
    			  if (m.find( )) {
    				return ESHOPSQLDBCheckNoOfRowsExist(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
    			  }
    			  
    			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
    			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

    			//Check for Record Available
    			ResultSet rs_SQLServerCheck = EShopstmt.executeQuery(check);
    			int temp=0;	
    			while(rs_SQLServerCheck.next()){
    				temp++;
    			}

    			if(temp < 1){
    				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in ESHOP DB",false);
    				return false;
    			}

    			rs_SQLServerCheck = EShopstmt.executeQuery(check);
    			rs_SQLServerCheck.next();
    			rs_SQLServerCheck.getObject(Column_name);

    			if (rs_SQLServerCheck.wasNull()) {
    				if(Expected_value.equalsIgnoreCase("NULL")){
    					ExtentTestManager.reportStepPass("Actual value 'NULL' for the ESHOP SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
    					functionStatus= true;
    				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
    					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the ESHOP SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
    					functionStatus= false;
    				}
    			}else{

    				ResultSet rs_SQLServer = EShopstmt.executeQuery(query);
    				rs_SQLServer.next();
    				Actual_Value = rs_SQLServer.getString(1).trim();

    				if(Actual_Value.contains("E-10")){
    					Actual_Value = new BigDecimal(Actual_Value).toPlainString();
    				}
    				
    				if (Expected_value.contains("CURRENT_DATE")){
    					String []ExpectedvalueWithFormat=Expected_value.split("#");
    					String db_Date = Actual_Value.split(" ")[0];
    					Actual_Value=db_Date;
    					Date date=new Date();			
    					SimpleDateFormat dateformat=new SimpleDateFormat(ExpectedvalueWithFormat[1]);
    					Expected_value=dateformat.format(date);
    				}

    				//Newly added on  20-09-2016 to validate system IP against DB value
    				if (Expected_value.equalsIgnoreCase("GET_HOST_IP")){
    					InetAddress IP=InetAddress.getLocalHost();
    					Expected_value=	IP.getHostAddress();
    				}
    			
    				if(Actual_Value.equalsIgnoreCase(Expected_value)){
    					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the ESHOP SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
    					functionStatus= true;
    				}else if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
    					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the ESHOP SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
    					functionStatus= false;
    				}
    			}

    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values from ESHOP SQL query. Error description is : "+ e.getMessage(), false);
    			return false;
    		}
    		return functionStatus;
    	}
    	
    	
    	public synchronized boolean ESHOPSQLDBCheckNoOfRowsExist(String sqltablename, String strsqlcolumnname,String strsqlcondition,String  strNoOfRowsShouldBePresent,int strExecEventFlag){
    		boolean ESHOPSQLDBCheckNoOfRowsExist= false;
    		String query=null;
    		String Table_name = null;
    		String Column_name = null;
    		String SQL_condition = null;
    		String noOfRowsShouldBePresent=null;
    		int No_Of_Records = 0;

    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
    				noOfRowsShouldBePresent=getTestData(testDataFilePathStatic, testComponentNameStatic,strNoOfRowsShouldBePresent,gblrecordsCounterStatic);
    			}

    			if(Table_name==null || Column_name==null || SQL_condition==null){
    				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"";
    			ResultSet rs_SQLServer = EShopstmt.executeQuery(query);		

    			while(rs_SQLServer.next()){
    				No_Of_Records = Integer.parseInt(rs_SQLServer.getString(1));
    			}
    			
    			if(No_Of_Records==(Integer.parseInt(noOfRowsShouldBePresent))){
    				ExtentTestManager.reportStepPass("Actual No. of Rows '"+ No_Of_Records +"' for the Query "+query+" matches with expected No of Rows '"+noOfRowsShouldBePresent+"'");
    				ESHOPSQLDBCheckNoOfRowsExist=true;
    			}else{
    				ExtentTestManager.reportStepFail(driver, "Actual No. of Rows '"+ No_Of_Records +"' for the Query "+query+" does not match with expected No of Rows '"+noOfRowsShouldBePresent+"'", false);
    				ESHOPSQLDBCheckNoOfRowsExist=true;
    			}

    		}catch (NullPointerException e) {
    				ExtentTestManager.reportStepFail(driver,"Null Pointer exception occured while comparing the No.of Records", false);
    				ESHOPSQLDBCheckNoOfRowsExist=false;
    				
    		} catch (Exception e) {
    			ExtentTestManager.reportStepFail(driver,    "Error occured while checking whether the executed query has any records (or) not. Error description is : "+ e.getMessage() +".", false);
    			ESHOPSQLDBCheckNoOfRowsExist=false;
    		}
    		return ESHOPSQLDBCheckNoOfRowsExist;
    	}
    	
    	
    	
    	public synchronized boolean EShopSQLDBDateFormatCompare(String sqltablename, String strsqlcolumnname,String strsqlcondition,String dateFormatFromExcel,int strExecEventFlag){
    		boolean SQLDBDateCompare= false;
    		String query = null;  
    		String Table_name = null;
    		String Column_name = null;
    		String SQL_condition = null;
    		String Expected_value = null;
    		String Actual_Value = null;
    		String Current_Date=null;
    		String expected_db_Date = null;
    		String Date_Format=null;

    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
    				Date_Format=getTestData(testDataFilePathStatic, testComponentNameStatic,dateFormatFromExcel,gblrecordsCounterStatic);
    			}
    			
    			if(Table_name==null || Column_name==null || SQL_condition==null || Date_Format ==null){
    				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			//DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    			DateFormat dateFormat = new SimpleDateFormat(Date_Format);
    			Date date = new Date();
    			Current_Date = dateFormat.format(date);
    			Expected_value = Current_Date.trim();
    			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"";
    			ResultSet Eshop_SQLServer= EShopstmt.executeQuery(query);
    			Eshop_SQLServer.next();
    			Actual_Value = Eshop_SQLServer.getString(1);
    			String db_Date = Actual_Value.split(" ")[0];

    			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
    			Date dateToChange = dateFormat1.parse(db_Date);
    			SimpleDateFormat finalDateFormat = new SimpleDateFormat(Date_Format);
    			expected_db_Date = finalDateFormat.format(dateToChange);	

    			if(!Eshop_SQLServer.wasNull()){            // If some value is present in the fired Query
    				if(expected_db_Date.equalsIgnoreCase(Expected_value)){
    					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
    					SQLDBDateCompare=true;
    				}else if(!(expected_db_Date.equalsIgnoreCase(Expected_value))){
    					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);
    					SQLDBDateCompare=false;
    				}
    			}else if(Eshop_SQLServer.wasNull()){        // If "NULL" value is present in the fired Query
    				if(Expected_value.equalsIgnoreCase("NULL")){
    					ExtentTestManager.reportStepPass("Actual value 'NULL' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
    					SQLDBDateCompare=true;
    				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
    					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);  	 
    					SQLDBDateCompare=false;
    				}
    			}

    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,    "Error occured while EShopSQLDBDateFormatCompare. Error description is : "+ e.getMessage() +".", false);
    			SQLDBDateCompare=false;
    		}
    		return SQLDBDateCompare;
    	}

    	public synchronized boolean EShopSQLDBFutureDateCompare(String sqltablename, String strsqlcolumnname,String strsqlcondition,String Date_Format,String Days_to_add,int strExecEventFlag){
    		boolean SQLDBDateCompare= false;
    		String query = null;  
    		String Table_name = null;
    		String Column_name = null;
    		String SQL_condition = null;
    		String Expected_value = null;
    		String Actual_Value = null;
    		String Current_Date=null;
    		String expected_db_Date = null;
    		String daystoadd = null;
    		
    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
    				daystoadd = getTestData(testDataFilePathStatic, testComponentNameStatic, Days_to_add,gblrecordsCounterStatic);
    			}

    			if(Table_name==null || Column_name==null || SQL_condition==null){
    				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			
    			int Add_Days = Integer.parseInt(daystoadd);
    			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    			Date date = new Date();
    			Calendar expdate = Calendar.getInstance();
    			expdate.setTime(date);
    			expdate.add(Calendar.DATE, Add_Days);
    			Current_Date = dateFormat.format(expdate.getTime());
    			Expected_value = Current_Date.trim();
    			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"";
    			ResultSet Eshop_SQLServer= EShopstmt.executeQuery(query);
    			Eshop_SQLServer.next();
    			Actual_Value = Eshop_SQLServer.getString(1);
    			String db_Date = Actual_Value.split(" ")[0];

    			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
    			Date dateToChange = dateFormat1.parse(db_Date);
    			SimpleDateFormat finalDateFormat = new SimpleDateFormat(Date_Format);
    			expected_db_Date = finalDateFormat.format(dateToChange);	

    			if(!Eshop_SQLServer.wasNull()){            // If some value is present in the fired Query
    				if(expected_db_Date.equalsIgnoreCase(Expected_value)){
    					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
    					SQLDBDateCompare=true;
    				}else if(!(expected_db_Date.equalsIgnoreCase(Expected_value))){
    					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);
    					SQLDBDateCompare=false;
    				}
    			}else if(Eshop_SQLServer.wasNull()){        // If "NULL" value is present in the fired Query
    				if(Expected_value.equalsIgnoreCase("NULL")){
    					ExtentTestManager.reportStepPass("Actual value 'NULL' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
    					SQLDBDateCompare=true;
    				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
    					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);  	 
    					SQLDBDateCompare=false;
    				}
    			}

    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,    "Error occured while EShopSQLDBFutureDateCompare. Error description is : "+ e.getMessage() +".", false);
    			log.info("SQLDBDateCompare Error : " + e);
    			SQLDBDateCompare=false;
    		}
    		return SQLDBDateCompare;
    	}
    	
    	
    	public synchronized boolean EShopSQLDBSelectFromEnv(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strEnvVariableColumn,int strExecEventFlag){
    		String query = null;
    		String check;
    		String Table_name = null;
    		String Column_name = null;
    		String SQL_condition = null;
    		String Expected_value = null;
    		String envVariable=null;
    		String Actual_Value = null;
    		boolean functionStatus=false;
    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
    				envVariable=getTestData(testDataFilePathStatic, testComponentNameStatic,strEnvVariableColumn,gblrecordsCounterStatic);
    			}

    			log.info("Excel COlumn Name is : "+strEnvVariableColumn);
    			log.info("Env name is : "+envVariable);

    			if(Table_name==null || Column_name==null || SQL_condition==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
    				return false;
    			}

    			Expected_value=Runtimevalue.getProperty(envVariable);

    			log.info("Expected_value from env is : "+Expected_value);

    			if(Expected_value==null){
    				ExtentTestManager.reportStepFail(driver,"Dynamic Variable '"+envVariable+"' has NO VALUE", false);
    				return false;
    			}
    			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
    			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

    			//Check for Record Available
    			ResultSet rs_SQLServerCheck = EShopstmt.executeQuery(check);
    			int temp=0;	
    			while(rs_SQLServerCheck.next()){
    				temp++;
    			}

    			if(temp < 1){
    				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the ESHOP SQL Query  "+ query + "  in DB",false);
    				return false;
    			}

    			rs_SQLServerCheck = EShopstmt.executeQuery(check);
    			rs_SQLServerCheck.next();
    			rs_SQLServerCheck.getObject(Column_name);

    			if (rs_SQLServerCheck.wasNull()) {
    				if(Expected_value.equalsIgnoreCase("NULL")){
    					ExtentTestManager.reportStepPass("Actual value 'NULL' for the ESHOP SQL Query "+query+" matches the expected value from ENV Variable '"+Expected_value+"'");
    					functionStatus= true;
    				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
    					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the ESHOP SQL Query "+query+" does not match with the expected value from ENV Variable '"+Expected_value+"'", false);
    					functionStatus= false;
    				}
    			}else{
    				ResultSet rs_SQLServer = EShopstmt.executeQuery(query);
    				rs_SQLServer.next();
    				Actual_Value = rs_SQLServer.getString(1).trim();
    				if(Actual_Value.equalsIgnoreCase(Expected_value)){
    					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the ESHOP SQL Query "+query+" matches the expected value from ENV Variable '"+Expected_value+"'");
    					functionStatus= true;
    				}else if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
    					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the ESHOP SQL Query "+query+" does not match with the expected value from ENV Variable '"+Expected_value+"'", false);
    					functionStatus= false;
    				}
    			}

    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
    			return false;
    		}
    		return functionStatus;
    	}
    	
    	
    	
    	public synchronized boolean ESHOPSQLDBSelectConditionEnvvar1(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strenvironmentvariable,String strExpectedvalue,int strExecEventFlag){
    		boolean ESHOPSQLDBSelectConditionEnvvar= false;
    		String query = null;
    		String Table_name = null;
    		String Column_name = null;
    		String SQL_condition = null;
    		String SQL_condition_value = null;		
    		String Expected_value = "";
    		String Actual_Value = null;
    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
    				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic,strExpectedvalue,gblrecordsCounterStatic);
    				SQL_condition_value = Runtimevalue.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic,strenvironmentvariable,strExecEventFlag));
    			}

    			if(Table_name==null || Column_name==null || SQL_condition==null){
    				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+ SQL_condition_value +"'";
    			ResultSet Eshop_SQLServer = EShopstmt.executeQuery(query);
    			//Newly added on  20-09-2016 to validate system IP against DB value
    			if (Expected_value.equalsIgnoreCase("GET_HOST_IP")){
    				InetAddress IP=InetAddress.getLocalHost();
    				Expected_value=	IP.getHostAddress();
    			}
    			Eshop_SQLServer.next();
    			Actual_Value = Eshop_SQLServer.getString(1).trim();

    			if(!Eshop_SQLServer.wasNull()){            // If some value is present in the fired Query
    				if(Actual_Value.equalsIgnoreCase(Expected_value)){
    					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
    					ESHOPSQLDBSelectConditionEnvvar=true;
    				}else if(!(Actual_Value.equals(Expected_value))){
    					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);
    					ESHOPSQLDBSelectConditionEnvvar=false;
    				}
    			}

    			else if(Eshop_SQLServer.wasNull()){        // If "NULL" value is present in the fired Query
    				if(Expected_value.equals("NULL")){
    					ExtentTestManager.reportStepPass("Actual value 'NULL' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
    					ESHOPSQLDBSelectConditionEnvvar=true;
    				}else if(!(Expected_value.equals("NULL"))){
    					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);  	 
    					ESHOPSQLDBSelectConditionEnvvar=false;
    				}
    			}
    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver, "Error occured while performing ESHOPSQLDBSelectConditionEnvvar1. Error description is : "+ e.getMessage() +".", true);
    			ESHOPSQLDBSelectConditionEnvvar=false;
    		}
    		return ESHOPSQLDBSelectConditionEnvvar;
    	}
    	
    	
    	public synchronized boolean SQLDBSelCondEnvVarReUse(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strenvironmentvariable,String strExpectedvalue,int strExecEventFlag){
    		
    		
    		boolean SQLDBSelectConditionEnvvar= false;
    		String query = null;
    		String Table_name = null;
    		String Column_name = null;
    		String SQL_condition = null;
    		String SQL_condition_value = null;		
    		String Actual_Value = null;
    		String getEnvValueExcel = null;
    		ResultSet rs_SQLServer=null; 
    		
    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
    				getEnvValueExcel = getTestData(testDataFilePathStatic, testComponentNameStatic,strenvironmentvariable,gblrecordsCounterStatic);
    				SQL_condition_value = Runtimevalue.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic,strenvironmentvariable,gblrecordsCounterStatic));
    			}

    			if(Table_name==null || Column_name==null || SQL_condition==null){
    				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+ SQL_condition_value +"'";
    			rs_SQLServer = stmt.executeQuery(query);
    			rs_SQLServer.next();
    			Actual_Value = rs_SQLServer.getString(1).trim();
    			
    		}catch (Exception e) {           // If no record is present in the fired Query
    			ExtentTestManager.reportStepFail(driver, "NO RECORD found for the query "+query, false);
    			return false;
    		}

    		try{
    			if(!rs_SQLServer.wasNull()){            // If some value is present in the fired Query
    				
    				
    				Runtimevalue.setProperty(getEnvValueExcel, Actual_Value);
    				log.info("Value set to Runtime Property '"+getEnvValueExcel+"' is => '"+Runtimevalue.getProperty(getEnvValueExcel)+"'");
        			ExtentTestManager.reportStepPass("The DB value '"+Actual_Value+"' is successfully stored in the Runtime variable '"+getEnvValueExcel+"'");
        			SQLDBSelectConditionEnvvar = true;
    			}
    			
    			else if(rs_SQLServer.wasNull()){        // If "NULL" value is present in the fired Query
    				if(Actual_Value.equals("NULL")){
    					ExtentTestManager.reportStepFail(driver, "Actual value 'NULL' for the Query '"+query+"', while store the DB value from runtime environment variable", false);
    					SQLDBSelectConditionEnvvar = false;
    				}
    			}
    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver, "Exception occured while comparing the values using SQLDBSelectConditionEnvvarReUse. Error description is : "+ e.getMessage() +".", true);
    			SQLDBSelectConditionEnvvar=false;
    		}
    		return SQLDBSelectConditionEnvvar;
    	}
    	
    	
    	public synchronized boolean EshopSQLDBOpenConnection(){
    		boolean elementStatus= false;
    		String dbUrl = "jdbc:sqlserver://"+ property.getProperty("ESHOP_SQL_Server") +";DatabaseName=" + property.getProperty("ESHOP_SQL_Server_DB_Name") +";";                  
    		String username = property.getProperty("ESHOP_SQL_Server_UID");   
    		String password = property.getProperty("ESHOP_SQL_Server_PWD"); 
    		if(username==null || password==null){
    			ExtentTestManager.reportStepFail(driver,"Required details are not provided in the datasheet." , false);
    			return false;
    		}
    		try {
    			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");         
    			EshopConnection = DriverManager.getConnection(dbUrl,username,password);
    			EShopstmt = EshopConnection.createStatement(); 
    			elementStatus=true;
    			ExtentTestManager.reportStepPass("Eshop SQL Connection is established Successfully.");
    		} catch (Exception e) { 
    			elementStatus=false;
    			ExtentTestManager.reportStepFail(driver, "Error occured while connecting to the ESHOP SQL Server. Error description is : "+ e.getMessage() +".", false);
    		}
    		return elementStatus;
    	}
    	
    	
    	public synchronized boolean SQLDBFutureDateUpdate(String sqltablename, String strsqlcolumnname,String strsqlcondition,String Date_Format,String Days_to_add,int strExecEventFlag){
    		boolean functionStatus= false;
    		String query = null;  
    		String check = null; 
    		String Table_name = null;
    		String Column_name = null;
    		String SQL_condition = null;
    		String Expected_value = null;
    		String Actual_Value = null;
    		String Current_Date=null;
    		String daystoadd = null;
    		String expDBDateFormat = null;


    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
    				expDBDateFormat = getTestData(testDataFilePathStatic, testComponentNameStatic, Date_Format, gblrecordsCounterStatic);
    				daystoadd=getTestData(testDataFilePathStatic, testComponentNameStatic, Days_to_add, gblrecordsCounterStatic);
    			}

    			if(Table_name==null || Column_name==null || SQL_condition==null || daystoadd==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    				return false;
    			}

    			int Add_Days = Integer.parseInt(daystoadd);
    			
    			DateFormat dateFormat = new SimpleDateFormat(expDBDateFormat);
    			Date date = new Date();
    			Calendar expdate = Calendar.getInstance();
    			expdate.setTime(date);
    			expdate.add(Calendar.DATE, Add_Days);
    			Current_Date = dateFormat.format(expdate.getTime());
    			Expected_value = Current_Date.trim();
    			
    			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
    			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

    			ResultSet rs_SQLServerCheck= stmt.executeQuery(check);

    			int temp=0;	
    			while(rs_SQLServerCheck.next()){
    				temp++;
    			}

    			if(temp < 1){
    				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
    				return false;
    			}

    			rs_SQLServerCheck = stmt.executeQuery(check);
    			rs_SQLServerCheck.next();
    			rs_SQLServerCheck.getObject(Column_name);

    			if (rs_SQLServerCheck.wasNull()) {
    				if(Expected_value.equalsIgnoreCase("NULL")){
    					ExtentTestManager.reportStepPass("Actual value 'NULL' for the RRBS Query "+query+" matches the expected value : '"+Expected_value+"'");
    					functionStatus= true;
    				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
    					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the RRBS Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
    					functionStatus= false;
    				}
    			}else if(!(rs_SQLServerCheck.wasNull())){

    				ResultSet rs_SQLServer= stmt.executeQuery(query);
    				rs_SQLServer.next();
    				Actual_Value = rs_SQLServer.getString(1);

    				String db_Dateddmmyy = Actual_Value.split(" ")[0];
    				String db_Datehhmmss = Actual_Value.split(" ")[1];
    				
    				db_Dateddmmyy = Expected_value;
    				String Column_Value = db_Dateddmmyy +" "+db_Datehhmmss;
    				
    				String updateQuery = "update "+Table_name+" set "+Column_name+"= '"+Column_Value+"' where "+SQL_condition;
    				
    				stmt.execute(updateQuery);
    				ExtentTestManager.reportStepPass("SQL Update Query  "+ query + " is executed successfully.");
    				functionStatus= true;
    			}

    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while update the values in SQL query.Error description is : "+ e.getMessage(), false);
    			return false;
    		}
    		return functionStatus;
    	}
    	
    	
    	public synchronized boolean WebElementEnterCurrentDate(String getValueFromPOM,  String strTestObject,String strdateFormatInDataSheet,String envVariable, int strExecEventFlag) throws Exception{
    		boolean functionStatus= false;
    		String strDateFormat=null;
    		String currentDate=null;
    		String envVariableName=null;
    		try {
    			
    			String elementFromPOM=null;
    			elementFromPOM=getValueFromPOM;
    			int count=elementFromPOM.split("#").length;
    			//log.info("JS POM Count : "+count);
    			if(count==2){
    				getValueFromPOM=elementFromPOM.split("#")[1];
    				//log.info("changed getValueFromPOM is : "+getValueFromPOM);
    			}else{
    				//log.info("Not changed getValueFromPOM is : "+getValueFromPOM);
    			}
    			
    			if(strExecEventFlag==1){
    				strDateFormat=getTestData(testDataFilePathStatic, testComponentNameStatic,strdateFormatInDataSheet,gblrecordsCounterStatic);
    				envVariableName=getTestData(testDataFilePathStatic, testComponentNameStatic,envVariable,gblrecordsCounterStatic);
    			}else{
    				strDateFormat=strdateFormatInDataSheet;
    				envVariableName=envVariable;
    			}

    			SimpleDateFormat dateformat = new SimpleDateFormat(strDateFormat);
    			Date date = new Date();
    			currentDate = dateformat.format(date);

    			if(!(envVariableName.equalsIgnoreCase("NA"))){
    				Runtimevalue.setProperty(envVariableName, currentDate);
    				ExtentTestManager.reportStepPass("Dynamic Date value '"+currentDate+"' is stored in the Runtime Variable  '"+envVariableName+"'");
    			}

    			JavascriptExecutor js = (JavascriptExecutor) driver;
    			js.executeScript("document.getElementById('"+getValueFromPOM+"').value = '"+currentDate+"'");
    			ExtentTestManager.reportStepPass("Current Date '"+currentDate+"' is entered in the '"+strTestObject+"'");
    			functionStatus=true;	
    		} catch (Exception e) { 	
    			ExtentTestManager.reportStepFail(driver, "Current Date '"+currentDate+"' is not entered in the '"+strTestObject+"'", true);
    			functionStatus=false;
    		}
    		return functionStatus;

    	}
    	
    	
    	public synchronized boolean WebElementFutureMonthValueComapre(String getValueFromPOM,  String strTestObject,String strdateFormatInDataSheet,String monthsToAddInSheet,String envVariable,int strExecEventFlag){

    		boolean functionStatus= false;
    		String strDateFormat=null;
    		String monthsToAdd=null;
    		String funtureMonthDate=null;
    		String actualResult=null;
    		String envVariableName=null;

    		try {
    			if(strExecEventFlag==1){
    				strDateFormat=getTestData(testDataFilePathStatic, testComponentNameStatic,strdateFormatInDataSheet,gblrecordsCounterStatic);
    				monthsToAdd=getTestData(testDataFilePathStatic, testComponentNameStatic,monthsToAddInSheet,gblrecordsCounterStatic);
    				envVariableName=getTestData(testDataFilePathStatic, testComponentNameStatic,envVariable,gblrecordsCounterStatic);
    			}else{
    				strDateFormat=strdateFormatInDataSheet;
    				monthsToAdd=monthsToAddInSheet;
    				envVariableName=envVariable;
    			}

    			SimpleDateFormat dateformat = new SimpleDateFormat(strDateFormat);
    			Calendar cal = Calendar.getInstance();
    			cal.add(Calendar.MONTH, +(Integer.parseInt(monthsToAdd)));
    			funtureMonthDate = dateformat.format(cal.getTime());

    			if(!(envVariableName.equalsIgnoreCase("NA"))){
    				Runtimevalue.setProperty(envVariableName, funtureMonthDate);
    				ExtentTestManager.reportStepPass("Dynamic Future date '"+funtureMonthDate+"' is stored in the Runtime Variable  '"+envVariableName+"'");
    			}

    			actualResult = selectByLocatorType(getValueFromPOM).getAttribute("value");

    			if((actualResult.trim()).equalsIgnoreCase(funtureMonthDate.trim())){
    				functionStatus=true;
    				ExtentTestManager.reportStepPass("'"+strTestObject+"'s  actual date '" + actualResult + "' matches the Expected future date '" + funtureMonthDate + "'");
    			}else{
    				functionStatus=false;
    				ExtentTestManager.reportStepFail(driver,"'"+strTestObject+"' actual date '" + actualResult + "' does not match the expected date '" + funtureMonthDate + "'", true);
    			}
    		} catch (Exception e) {
    			ExtentTestManager.reportStepFail(driver,"Exception occured while comparing the Future date.", true);
    			functionStatus=false;
    		}
    		return functionStatus;	
    	}
    	
    	
    	
    	public synchronized boolean WaitUntilPatternAppearsInLogDyn(String filePath, String startFileNameValue, String endFileNameValue, String strLineContains,String strPatterToCheck,String envVariableName ,String strdateFormat,int strExecEventFlag){
    		boolean result= false;
    		String path = null;
    		File[] listOfFile = null;
    		String fileName = null;
    		boolean found=false;
    		String lineContains=null;
    		String patterToCheck=null;
    		String dateFormat=null;
    		String envVariable=null;
    		String startFileNameFromExcel=null;
    		String endFileNameFromExcel=null;

    		try{
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, gblrecordsCounterStatic));
    				startFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, startFileNameValue,gblrecordsCounterStatic);
    				endFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, endFileNameValue,gblrecordsCounterStatic);
    				lineContains= getTestData(testDataFilePathStatic, testComponentNameStatic, strLineContains, gblrecordsCounterStatic);
    				patterToCheck= getTestData(testDataFilePathStatic, testComponentNameStatic, strPatterToCheck, gblrecordsCounterStatic);
    				dateFormat= getTestData(testDataFilePathStatic, testComponentNameStatic, strdateFormat, gblrecordsCounterStatic);
    				envVariable= getTestData(testDataFilePathStatic, testComponentNameStatic, envVariableName, gblrecordsCounterStatic);
    			}

    			if(path==null ||startFileNameFromExcel==null || endFileNameFromExcel == null || lineContains==null||patterToCheck==null||dateFormat==null){
    				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			if(startFileNameFromExcel.trim().equalsIgnoreCase("DateFormat"))
    				startFileNameFromExcel=dateFormatter(dateFormat,".txt");
    			log.info("File name to search is : "+startFileNameFromExcel);
    			File directory = new File("//\\" +path);

    			boolean fileexist=false;
    			int fileAppeartime=0;
    			while(fileAppeartime<10){
    				Thread.sleep(1000);
    				listOfFile = directory.listFiles();
    				if(listOfFile.length != 0){
    					log.info("Directory has files");
    					fileexist=true;
    					break;
    				}else{
    					log.info("No File is available in directory. looping again with 60 secs");
    				}
    				log.info("No File is available in directory with 60 secs");
    				fileAppeartime++;
    			}

    			if(fileexist){
    				log.info("Files avialble in the directiory");
    			}else{
    				log.info("No File is available in directory for 60secs");
    				ExtentTestManager.reportStepFail(driver,"No file is available in given directory "+path+"" , false);
    				return false;
    			}

    			boolean foundstatus=false;
    			int time=0;
    			while(time<10){
    				Thread.sleep(1000);	
    				listOfFile = directory.listFiles();
    				for(int i = 0; i<listOfFile.length; i++){
    					if(listOfFile[i].isFile()){
    						fileName = listOfFile[i].getName();
    						log.info("Found a file and name is : "+fileName);
    						
    						if(fileName.startsWith(startFileNameFromExcel) && fileName.endsWith(endFileNameFromExcel)){
    							log.info("FileName exact match : "+fileName);
    							fileName=listOfFile[i].getName();
    							foundstatus=true;
    							break;
    						}
    					}
    				}

    				if(foundstatus){
    					log.info("FileName exact match is found. Braking the loop");
    					break;
    				}else{
    					log.info("FileName not found in path. Continue the loop");
    				}
    				time++;
    			}

    			if(fileName == null){
    				ExtentTestManager.reportStepFail(driver,"'"+startFileNameFromExcel+endFileNameFromExcel+"' file is not available in the directory" , false);
    				log.info("Search File is not available in directory");
    				return false;
    			}

    			if(!(fileName.startsWith(startFileNameFromExcel) && fileName.endsWith(endFileNameFromExcel))){
    				ExtentTestManager.reportStepFail(driver,"'"+startFileNameFromExcel+endFileNameFromExcel+"' file is not available in the directory" , false);
    				log.info("Search File is not available in directory");
    				return false;
    			}

    			File file =new File("//\\" +path +fileName);
    			log.info(file.getAbsolutePath()+" || "+file.getName());
    			int i=0;
    			while(i<10){
    				Thread.sleep(1000);
    				try {
    						
    						String line = IOUtils.toString(file.toURI(),"UTF-8");
    							Pattern p = Pattern.compile(patterToCheck);
    							Matcher m = p.matcher(line);

    							while (m.find()){
    								found=true;
    								log.info("Pattern Match found in the Line!");
    								log.info("Match is : "+m.group(0));
    								
    								ExtentTestManager.reportStepPass("Line containing the word '"+patterToCheck+"' has the Matched Expected Pattern '"+m.group(0) +"' in the Log");
    								if(!(envVariable.trim().equalsIgnoreCase("NA"))){
    									log.info("Storing the Pattern Matched in the Env Variable '"+envVariable+"'");
    									Runtimevalue.setProperty(envVariable, m.group(0));
    									ExtentTestManager.reportStepPass("The Dynamic Value '"+m.group(0)+"' is successfully stored in the Runtime Varaible '"+envVariable+"'.");
    								}
    								break;
    							}
    							if(found){
    								log.info("Pattern Match found breaking the HasNext Loop");
    								result=true;
    								break;
    							}else{
    								log.info("Pattern Match not found. Checking teh next line that contains expected word");
    							}

    				} catch (FileNotFoundException e) {
    					log.info("FileNotFoundException occured match founder... :"+e);
    				}catch (Exception e) {
    					log.info("Excption occured match founder... : "+e);
    					ExtentTestManager.reportStepFail(driver, "Error occured while finding the pattern from Winservice Log. Error description is : "+ e.getLocalizedMessage() +".", false);
    					//e.printStackTrace();
    				}

    				i++;
    			}

    			if(result){
    				ExtentTestManager.reportStepPass("Log file '"+startFileNameFromExcel+endFileNameFromExcel+"' from Path '"+path+"' contains the Expected Log Pattern '"+patterToCheck+"'");
    			}else{
    				ExtentTestManager.reportStepFail(driver,"Log file '"+startFileNameFromExcel+endFileNameFromExcel+"' from Path '"+path+"' does not contains the Expected Log Pattern '"+patterToCheck+"' within 60 secs", false);
    			}

    		} catch(Exception e) { 
    			result=false;
    			ExtentTestManager.reportStepFail(driver,"Error occured in the WinserviceWaitUntilPatternAppears. Error description is : "+ e.getLocalizedMessage() +".", false);
    		}
    		return result;
    	}
    	
    	
	
    public synchronized boolean sqlDBSelectWaitForValue(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strExpectedvalue, String timeOutName, int strExecEventFlag){
    		
    		boolean functionStatus=false;
    		String query=null;
    		String check;
    		String Table_name;
    		String Column_name;
    		String SQL_condition;
    		String Expected_value;
    		String Actual_Value = null;
    		String timeOutValue = null;

    		try {
    			if(strExecEventFlag==1){
    				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
    				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
    				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
    				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedvalue, gblrecordsCounterStatic);
    				timeOutValue = getTestData(testDataFilePathStatic, testComponentNameStatic, timeOutName, gblrecordsCounterStatic);
    				
    			}else{
    				Table_name=sqltablename;
    				Column_name=strsqlcolumnname;
    				SQL_condition=strsqlcondition;
    				Expected_value=strExpectedvalue;
    			}

    			if(Table_name==null || Column_name==null || SQL_condition==null||Expected_value==null||timeOutValue==null){
    				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
    				return false;
    			}
    			
    			
    			switch (timeOutValue.toLowerCase()) {
				case "topupretry":
					timeOutValue = "120";
					break;
					
				case "simactivation":
					timeOutValue = "10";
					break;
					
				case "fca_based_winservice":
					timeOutValue = "10";
					break;
					
				case "simblock":
					timeOutValue = "300";
					break;
					
				case "hlr_notify_winservice":
					timeOutValue = "300";
					break;
					
				case "sendsmspinaccno_winservice":
					timeOutValue = "1000";
					break;
					
				case "voucheractivation":
					timeOutValue = "20";
					break;
					
				default:
					
					ExtentTestManager.reportStepFail( driver,"Given value is not available in timeout switch case",false);
					throw new IllegalArgumentException("Given value is not available in timeout switch case");
				}
    			

    			String pattern = "^Count\\((.*)\\)";
    			// Create a Pattern object
    			  Pattern r = Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
    			// Now create matcher object.
    			  Matcher m = r.matcher(Column_name);
    			  if (m.find( )) {
    				return SQLDBCheckNoOfRowsExist(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
    			  }
    				
    			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
    			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

    			//Check for Record Available
    			ResultSet rs_SQLServerCheck = stmt.executeQuery(check);
    			
//    			*********************************************************
    			
    			int temp=0;	
    			while(rs_SQLServerCheck.next()){
    				temp++;
    			}

    			if(temp < 1){
    				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
    				return false;
    			}

    			rs_SQLServerCheck = stmt.executeQuery(check);
    			rs_SQLServerCheck.next();
    			rs_SQLServerCheck.getObject(Column_name);

    			if (rs_SQLServerCheck.wasNull()) {
    				if(Expected_value.equalsIgnoreCase("NULL")){
    					ExtentTestManager.reportStepPass("Actual value 'NULL' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
    					functionStatus= true;
    				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
    					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
    					functionStatus= false;
    				}
    			}else{

    				
    				int iterateValue = Integer.parseInt(timeOutValue);
    				
    				log.info("Iterate value from excel sheet :"+iterateValue);
    				
    				for(int i = 0; i < iterateValue; i++){
    					
    				Thread.sleep(1000);	
    				
    				log.info("Waiting expected DB value to compare, looping :"+i);
    				
    				ResultSet rs_SQLServer = stmt.executeQuery(query);
    				rs_SQLServer.next();
    				Actual_Value = rs_SQLServer.getString(1).trim();
    				
    				if(Actual_Value.contains("E-10")){
    					Actual_Value = new BigDecimal(Actual_Value).toPlainString();
    				}

    				if (Expected_value.contains("CURRENT_DATE")){
    					String []ExpectedvalueWithFormat=Expected_value.split("#");
    					String db_Date = Actual_Value.split(" ")[0];
    					Actual_Value=db_Date;
    					Date date=new Date();			
    					SimpleDateFormat dateformat=new SimpleDateFormat(ExpectedvalueWithFormat[1]);
    					Expected_value=dateformat.format(date);
    				}
    				
    				
    				if(Actual_Value.equalsIgnoreCase(Expected_value)){
    					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
    					functionStatus= true;
    					log.info("DB value is matched ,breaking the loop @ :"+i);
    					break;
    								}
    				
    						}
    				
    				if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
					
    				}
    			}

    		}catch (Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query '"+query+"'.Error description is : "+ e.getMessage(), false);
    			return false;
    		}
    		return functionStatus;
    	}	
    	
    	
	public synchronized boolean WaitUntilElementClickable(String getValueFromPOM, String strTestObject) {
    		boolean Waituntilexpectedtext= false;
    		String Element_Text = null;
    		try{
    			FluentWait<WebDriver> fWait = new FluentWait<WebDriver>(driver);
    			fWait.withTimeout(300, TimeUnit.SECONDS).pollingEvery(5, TimeUnit.SECONDS).ignoring(StaleElementReferenceException.class).until(ExpectedConditions.elementToBeClickable(selectByLocatorType(getValueFromPOM)));
    			Element_Text = selectByLocatorType(getValueFromPOM).getText();
    		}catch(Exception e){
    			ExtentTestManager.reportStepFail(driver,"Error occured while getting the text from the element '"+strTestObject+"' .Error description is : "+ e.getMessage() +"." , true);
    			Waituntilexpectedtext=false;
    		}
    		if(!(Element_Text==null)){
    			ExtentTestManager.reportStepPass("Element '"+strTestObject+ "' is now Clickable");
    			Waituntilexpectedtext= true;
    		}else{
    			ExtentTestManager.reportStepFail(driver,"Element '"+strTestObject+ "' still not Clickable after certain period of time", false);
    			Waituntilexpectedtext= false;
    		}
    		return Waituntilexpectedtext;
    	}
    	
    	
	public synchronized boolean WaitUntilPatternGivenSecs(String filePath, String startFileNameValue, String endFileNameValue, String strLineContains,String strPatterToCheck,String envVariableName ,String strdateFormat, String timeoutValue, int strExecEventFlag){
    		
    		boolean result= false;
    		String path = null;
    		File[] listOfFile = null;
    		String fileName = null;
    		boolean found=false;
    		String lineContains=null;
    		String patterToCheck=null;
    		String dateFormat=null;
    		String envVariable=null;
    		String startFileNameFromExcel=null;
    		String endFileNameFromExcel=null;
    		String timeout = null;

    		try{
    			if(strExecEventFlag == 1){
    				path = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, filePath, gblrecordsCounterStatic));
    				startFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, startFileNameValue,gblrecordsCounterStatic);
    				endFileNameFromExcel= getTestData(testDataFilePathStatic, testComponentNameStatic, endFileNameValue,gblrecordsCounterStatic);
    				lineContains= getTestData(testDataFilePathStatic, testComponentNameStatic, strLineContains, gblrecordsCounterStatic);
    				patterToCheck= getTestData(testDataFilePathStatic, testComponentNameStatic, strPatterToCheck, gblrecordsCounterStatic);
    				dateFormat= getTestData(testDataFilePathStatic, testComponentNameStatic, strdateFormat, gblrecordsCounterStatic);
    				envVariable= getTestData(testDataFilePathStatic, testComponentNameStatic, envVariableName, gblrecordsCounterStatic);
    				timeout = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, timeoutValue, gblrecordsCounterStatic));
    			}

    			if(path==null ||startFileNameFromExcel==null || endFileNameFromExcel == null || lineContains==null||patterToCheck==null||dateFormat==null||timeout==null){
    				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			if(startFileNameFromExcel.trim().equalsIgnoreCase("DateFormat"))
    				startFileNameFromExcel=dateFormatter(dateFormat,".txt");
    			log.info("File name to search is : "+startFileNameFromExcel);
    			File directory = new File("//\\" +path);

    			boolean fileexist=false;
    			int fileAppeartime=0;
    			while(fileAppeartime<10){
    				Thread.sleep(1000);
    				listOfFile = directory.listFiles();
    				if(listOfFile.length != 0){
    					log.info("Directory has files");
    					fileexist=true;
    					break;
    				}else{
    					log.info("No File is available in directory. looping again with 60 secs");
    				}
    				log.info("No File is available in directory with 60 secs");
    				fileAppeartime++;
    			}

    			if(fileexist){
    				log.info("Files avialble in the directiory");
    			}else{
    				log.info("No File is available in directory for 60secs");
    				ExtentTestManager.reportStepFail(driver,"No file is available in given directory "+path+"" , false);
    				return false;
    			}

    			boolean foundstatus=false;
    			int time=0;
    			while(time<10){
    				Thread.sleep(1000);	
    				listOfFile = directory.listFiles();
    				for(int i = 0; i<listOfFile.length; i++){
    					if(listOfFile[i].isFile()){
    						fileName = listOfFile[i].getName();
    						log.info("Found a file and name is : "+fileName);
    						
    						if(fileName.startsWith(startFileNameFromExcel) && fileName.endsWith(endFileNameFromExcel)){
    							log.info("FileName exact match : "+fileName);
    							fileName=listOfFile[i].getName();
    							foundstatus=true;
    							break;
    						}
    					}
    				}

    				if(foundstatus){
    					log.info("FileName exact match is found. Braking the loop");
    					break;
    				}else{
    					log.info("FileName not found in path. Continue the loop");
    				}
    				time++;
    			}

    			if(fileName == null){
    				ExtentTestManager.reportStepFail(driver,"'"+startFileNameFromExcel+endFileNameFromExcel+"' file is not available in the directory" , false);
    				log.info("Search File is not available in directory");
    				return false;
    			}

    			if(!(fileName.startsWith(startFileNameFromExcel) && fileName.endsWith(endFileNameFromExcel))){
    				ExtentTestManager.reportStepFail(driver,"'"+startFileNameFromExcel+endFileNameFromExcel+"' file is not available in the directory" , false);
    				log.info("Search File is not available in directory");
    				return false;
    			}

    			File file =new File("//\\" +path +fileName);
    			log.info(file.getAbsolutePath()+" || "+file.getName());
    			int i=0;
    			
    			int iterateValue = Integer.parseInt(timeout);
    			log.info("Iteration value :"+iterateValue);
    			
    			while(i < iterateValue){
    				Thread.sleep(1000);
    				try {
    						
    						String line = IOUtils.toString(file.toURI(),"UTF-8");
    							Pattern p = Pattern.compile(patterToCheck);
    							Matcher m = p.matcher(line);

    							while (m.find()){
    								found=true;
    								log.info("Pattern Match found in the Line!");
    								log.info("Match is : "+m.group(0));
    								
    								ExtentTestManager.reportStepPass("Line containing the word '"+patterToCheck+"' has the Matched Expected Pattern '"+m.group(0) +"' in the Log");
    								if(!(envVariable.trim().equalsIgnoreCase("NA"))){
    									log.info("Storing the Pattern Matched in the Env Variable '"+envVariable+"'");
    									Runtimevalue.setProperty(envVariable, m.group(0));
    									ExtentTestManager.reportStepPass("The Dynamic Value '"+m.group(0)+"' is successfully stored in the Runtime Varaible '"+envVariable+"'.");
    								}
    								break;
    							}
    							if(found){
    								log.info("Pattern Match found breaking the HasNext Loop");
    								result=true;
    								break;
    							}else{
    								log.info("Pattern Match not found. Checking the next line that contains expected word, looping :"+i);
    							}

    				} catch (FileNotFoundException e) {
    					log.info("FileNotFoundException occured match founder... :"+e);
    				}catch (Exception e) {
    					log.info("Excption occured match founder... : "+e);
    					ExtentTestManager.reportStepFail(driver, "Error occured while finding the pattern from Winservice Log. Error description is : "+ e.getLocalizedMessage() +".", false);
    					//e.printStackTrace();
    				}

    				i++;
    			}

    			if(result){
    				ExtentTestManager.reportStepPass("Log file '"+startFileNameFromExcel+endFileNameFromExcel+"' from Path '"+path+"' contains the Expected Log Pattern '"+patterToCheck+"'");
    			}else{
    				ExtentTestManager.reportStepFail(driver,"Log file '"+startFileNameFromExcel+endFileNameFromExcel+"' from Path '"+path+"' does not contains the Expected Log Pattern '"+patterToCheck+"' within 60 secs", false);
    			}

    		} catch(Exception e) { 
    			result=false;
    			ExtentTestManager.reportStepFail(driver,"Error occured in the WinserviceWaitUntilPatternAppears. Error description is : "+ e.getLocalizedMessage() +".", false);
    		}
    		return result;
    	}
    	
    	
    	public synchronized boolean sleepFuncWithTimeout(String timeoutValue){
    		
    		String timeout = null;
    		boolean functionStatus = false;
    		
    		try{
    			
    			timeout = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, timeoutValue, gblrecordsCounterStatic));
    			
    			if(timeout==null){
    				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			
    			int sleepValue = Integer.parseInt(timeout);
    			log.info("Timeout value :"+sleepValue);
    			Thread.sleep(sleepValue);
    			ExtentTestManager.reportStepPass("Sleep function is waited for "+sleepValue+" seconds");
    			functionStatus = true;
    			
    			
    		}catch(Exception e){
    			log.info("Issue in Thread.sleep "+e.getMessage());
    			ExtentTestManager.reportStepFail(driver,"Exception occurred in 'sleepForFunction' reusable method", false);
    			functionStatus = false;
    		}
    		return functionStatus;
    	}
    	
    	
    	
    	public synchronized boolean postSoapServiceRequest(String webServiceURL, String webServiceXML, String xmlPattern, String runTimeVariable){
    		
    		boolean functionStatus = false;
    		String serviceURL = null;
    		String xmlService = null;
    		String patternToCheck = null;
    		String runTimeVar = null;
    		
    		PostMethod post = null;
    		
    		try{
    			
    			serviceURL = property.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, webServiceURL, gblrecordsCounterStatic));
    			xmlService = getTestData(testDataFilePathStatic, testComponentNameStatic, webServiceXML, gblrecordsCounterStatic);
    			patternToCheck = getTestData(testDataFilePathStatic, testComponentNameStatic, xmlPattern, gblrecordsCounterStatic);
    			runTimeVar = getTestData(testDataFilePathStatic, testComponentNameStatic, runTimeVariable, gblrecordsCounterStatic);
    			
    			
    			if(serviceURL == null||xmlService == null||patternToCheck == null||runTimeVar == null){
    				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
    				return false;
    			}
    			
    			
    			String getRunTimeValue = Runtimevalue.getProperty(runTimeVar);
    			String replaceXMLService = xmlService.replaceAll("dynamicBundlePin", getRunTimeValue);
    			xmlService = replaceXMLService;
    			log.info("**********Replaced XML Service Request *********");
    			log.info(xmlService);
    			post = new PostMethod(serviceURL);
    			post.setRequestEntity(new StringRequestEntity(xmlService, "text/xml", "ISO-8859-1"));
    			post.setRequestHeader("Content-type","text/xml");
    			HttpClient httpClient = new HttpClient();
    			
    			int result = httpClient.executeMethod(post);
    			log.info("Response status code: " + result);
    			log.info("Response body: "+post.getResponseBodyAsString());
    			
    			String xmlOutput = post.getResponseBodyAsString();
    			
    			Pattern pattern = Pattern.compile(patternToCheck);
    			Matcher matcher = pattern.matcher(xmlOutput);
    			
    			while(matcher.find()){
    				
    				log.info("Expected pattern is matched successfully in XML Output Respone");
    				ExtentTestManager.reportStepPass("Response status code '"+result+"'");
    				ExtentTestManager.reportStepPass("Expected pattern '"+patternToCheck+"' is matched successfully in XML output response '"+xmlOutput+"'");
    				return true;
    				
    			}
    			
    			ExtentTestManager.reportStepFail(driver,"Expected pattern '"+patternToCheck+"' is not matched in XML output response '"+xmlOutput+"'", false);
    			functionStatus = false;
    			
    		}catch(Exception e){
    			
    			e.printStackTrace();
    			ExtentTestManager.reportStepFail(driver,"Exception occurred, while sending the request in XML file", false);
    			functionStatus = false;
    			
    		}finally{
    			
    			post.releaseConnection();
    			log.info("Post Method Connection is closed successfully");
    			
    		}
    		
    		return functionStatus;
    		
    	}
    	
    	
    	public synchronized boolean Verify_XML_Response_Data(String soapURL, String Request_Name, String soapInputRequest, String soapOutputResponse,String excelDbQuery,int strExecEventFlag)throws Exception  {

    		boolean Executionstatus=false;
    		
    		String apiName = null;
    		String Input_DATAXML = null;
    		String XLDB_Input_Query = null;
    		String Output_DATAXML = null;
    		String serviceURL = null;
    		String gbstrXMLResponseData = null;
    		
    		String XML_Request = null;
    		int result=0;
    		
    		DocumentBuilderFactory factory = null;
    		Document document = null;
    		XPath xpath = null;
    		XPathFactory xpathfactory = null;
    		
    		if(strExecEventFlag==1){
    			
    			serviceURL = property.getProperty(RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, soapURL, gblrecordsCounterStatic));
    			apiName = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, Request_Name, gblrecordsCounterStatic);
    			Input_DATAXML= RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, soapInputRequest, gblrecordsCounterStatic);
    			XLDB_Input_Query = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, excelDbQuery, gblrecordsCounterStatic);
    			Output_DATAXML = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, soapOutputResponse, gblrecordsCounterStatic);
    			
    		}
    		
    		if(apiName == null || serviceURL == null || Input_DATAXML == null || XLDB_Input_Query == null || Output_DATAXML == null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
				return false;
			}
    		
    		//Concatenate Service URl with API name
    		String concServiceURL = serviceURL+"?op="+apiName;
    		serviceURL = concServiceURL;
    		
    		try{
    			//Reading testdata from XMLTemplate
    			XML_Request = ReadExcel.RetrieveValueFromTestDataBasedOnQuery(property.getProperty("SupportFiles_Location"), property.getProperty("XML_Template_File_Name"), "Input_XML", XLDB_Input_Query);
    			
    			log.info("Retrieved Excel from Template:"+XML_Request);
    			factory=DocumentBuilderFactory.newInstance();
    			//factory.setNamespaceAware(true);
    			DocumentBuilder builder=factory.newDocumentBuilder();
    			StringBuilder xmlBuilder=new StringBuilder();
    			xmlBuilder.append(XML_Request);
    			log.info("xmlBuilder::"+xmlBuilder.toString());
    			ByteArrayInputStream  is;
    			try{
    				is=new ByteArrayInputStream(xmlBuilder.toString().getBytes("UTF-8"));
    				document=builder.parse(is);
    			}catch(Exception e){
    				e.printStackTrace();
    			}
    			//updating node values from XMLtemplate based on input data from testdata sheet
    			log.info("Input_DATAXML:"+Input_DATAXML);
    			updateNodeValue(document,Input_DATAXML);
    			String Updated_XML_Request = DocumentToString(document);

    			try{
    				log.info("Before post method");
    				PostMethod post = new PostMethod(serviceURL);
    				log.info("Updated_XML_Request:"+Updated_XML_Request);
    				
    				HttpClient httpclient = new HttpClient();
    				log.info("httpclient::"+Updated_XML_Request);
    		    	post.setRequestEntity(new StringRequestEntity(Updated_XML_Request, "text/xml", "ISO-8859-1"));
    		    	post.setRequestHeader("Content-type","text/xml");
    				try{
    					result = httpclient.executeMethod(post);
    					log.info("result::"+result);

    					ExtentTestManager.reportStepPass("UPDATED XML REQUEST : '"+ Updated_XML_Request + "' has been sent successfully.");
    				}catch(Exception httpException){
    					log.info("Exception::"+httpException.getMessage());

    					httpException.printStackTrace();
    					ExtentTestManager.reportStepFail(driver,"httpException:Error occured while sending the request to the server."+httpException.getMessage(), false);
    				}
    				
    				gbstrXMLResponseData= post.getResponseBodyAsString();
    				log.info("Response:"+gbstrXMLResponseData);
    				//To Enable SOAP XML Header Validations
    				log.info("Result:"+result);
    				if(result==200){
    					Executionstatus=true;
    					ExtentTestManager.reportStepPass("XML RESPONSE : '"+ gbstrXMLResponseData.toString() + "' received successfully.");
    					//validating XML headers and footers
    					if(property.getProperty("SOAP_Validation_Enable").equalsIgnoreCase("True")){

    						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_Envelope"), gbstrXMLResponseData);
    						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_LastLine"), gbstrXMLResponseData);
    						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_LastsecondLine"), gbstrXMLResponseData);
    						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_OpeningBody"), gbstrXMLResponseData);
    					}
    					try{
    						xpathfactory = XPathFactory.newInstance();
    						log.info("xpathfactory :"+xpathfactory);
    						xpath = XPathFactory.newInstance().newXPath();
    						factory=DocumentBuilderFactory.newInstance();
    						builder=factory.newDocumentBuilder();
    						document=builder.parse(new ByteArrayInputStream(gbstrXMLResponseData.getBytes("UTF-8")));

    						String[] Output_data = Output_DATAXML.split(";");

    						for (int i = 0; i < Output_data.length; i++) {
    							String[] Output_XML_Info = Output_data[i].split("=",2);
    							String node_value=(String)xpath.compile("*//"+Output_XML_Info[0]).evaluate(document,XPathConstants.STRING);

    							Executionstatus = StringValidator(node_value,Output_XML_Info[1]);
    							
    							if(Executionstatus==true){
    								ExtentTestManager.reportStepPass("The actual node value of  : '//"+ Output_XML_Info[0] + "' is '"+ node_value +"' and matched with the expected value '"+ Output_XML_Info[1] +"'.");
    								Executionstatus=true;;
    							} else{
    								ExtentTestManager.reportStepFail(driver,"The actual node value of  : '//"+ Output_XML_Info[0] + "' is '"+ node_value +"' and no matching with the expected value '"+ Output_XML_Info[1] +"'.", false);
    								Executionstatus=false;
    							}
    						}

    					}catch(Exception responseXMLException){
    						responseXMLException.printStackTrace();
    						ExtentTestManager.reportStepFail(driver,"responseXMLException:Error in Parsing response XML.:"+responseXMLException.getMessage(), false);
    						return Executionstatus;
    					}
    				}
    			}catch(Exception xmlFormException){
    				xmlFormException.printStackTrace();
    				log.info(xmlFormException.getMessage());
    				
    			}


    		}catch(Exception e){
    			
    			ExtentTestManager.reportStepFail(driver,"Exception occurred in Parsing response XML.:"+e.getMessage(), false);
    			return Executionstatus;
    			
    		}

    		return Executionstatus;

    	}
    	
    	
    	
    	public static void updateNodeValue(Document document, String Inputdata) throws Exception {
    		XPath xpath=null;
    		
    		try{
    		xpath = XPathFactory.newInstance().newXPath();
    		NodeList nodes =null;
    		String[] Input_data = Inputdata.split(";");

    		for (int i = 0; i < Input_data.length; i++) {
    			String[] XML_Info = Input_data[i].split("=");
    			nodes=(NodeList)xpath.compile("*//"+XML_Info[0]).evaluate(document,XPathConstants.NODESET);
    			nodes.item(0).setTextContent(XML_Info[1]);
    				}
    		}catch(Exception e){
    			e.printStackTrace();
    			}
    		
    		}
    	
    	
    	public static String DocumentToString(Document doc){
    		try{
    			log.info("DocumentToString");
    				TransformerFactory tf = TransformerFactory.newInstance();
    				Transformer transformer = tf.newTransformer();
    				StringWriter writer = new StringWriter();
    				transformer.transform(new DOMSource(doc), new StreamResult(writer));
    				String output = writer.getBuffer().toString();
    				log.info("output:"+output);
    				return output;
    		}catch(Exception e ){
    			log.info(e.getMessage());
    			return "Error occured:";
    		}
    			}
    	
    	
    	public synchronized boolean Verify_XML_Header_Footer_Validation(String XML_Validation_Part,String XML_To_Validate) throws Exception{
    		boolean Executionstatus=false;
    		
    		boolean matchFoundPattern=RegExpValidator(XML_To_Validate, XML_Validation_Part);
    		if(matchFoundPattern){
    			ExtentTestManager.reportStepPass("'"+XML_Validation_Part+"' is  Present in the Response XML");
    			Executionstatus=true;
    		}else{
    			ExtentTestManager.reportStepFail(driver,"'"+XML_Validation_Part+"' is not Present in the Response XML", false);
    			Executionstatus=false;
    		}
    		return Executionstatus;

    	}
    	
    	public static boolean RegExpValidator(String ActualValue,String ExpectedValue){
    		boolean Executionstatus=false;
    		
    		try{
    		
    		Pattern regPatter=Pattern.compile(ExpectedValue.trim());
    		Matcher matches = regPatter.matcher(ActualValue.trim());
    		boolean statusMatch=matches.find();
    		if (statusMatch) {
    			Executionstatus=true;
    			return statusMatch;
    		}
    		else{
    			Executionstatus=false;
    			}
    		}catch(Exception e){
    			e.printStackTrace();
    		}
    		return Executionstatus;
    	}
    	
    	
    	public static boolean StringValidator(String ActualValue,String ExpectedValue){

    		boolean Executionstatus=false;
    		
    		try{

    		boolean statusMatch=ActualValue.contentEquals(ExpectedValue);
    		if (statusMatch) {
    			Executionstatus=true;
    			return statusMatch;
    		}
    		else{
    			Executionstatus=false;
    			}
    		}catch(Exception e){
    			e.printStackTrace();
    		}
    		
    		return Executionstatus;

    	}
    	
    	
    	public synchronized boolean Verify_XML_Response_Data_Env(String soapURL, String Request_Name, String soapInputRequest, String soapOutputResponse,String excelDbQuery, String envVar, int strExecEventFlag)throws Exception  {

    		boolean Executionstatus=false;
    		
    		String apiName = null;
    		String Input_DATAXML = null;
    		String XLDB_Input_Query = null;
    		String Output_DATAXML = null;
    		String serviceURL = null;
    		String gbstrXMLResponseData = null;
    		String storedEnvVar = null;
    		
    		String XML_Request = null;
    		int result=0;
    		
    		DocumentBuilderFactory factory = null;
    		Document document = null;
    		XPath xpath = null;
    		XPathFactory xpathfactory = null;
    		
    		if(strExecEventFlag==1){
    			
    			serviceURL = property.getProperty(RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, soapURL, gblrecordsCounterStatic));
    			apiName = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, Request_Name, gblrecordsCounterStatic);
    			Input_DATAXML= RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, soapInputRequest, gblrecordsCounterStatic);
    			XLDB_Input_Query = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, excelDbQuery, gblrecordsCounterStatic);
    			Output_DATAXML = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, soapOutputResponse, gblrecordsCounterStatic);
    			storedEnvVar = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, envVar, gblrecordsCounterStatic);
    			
    		}
    		
    		if(apiName == null || serviceURL == null || Input_DATAXML == null || XLDB_Input_Query == null || Output_DATAXML == null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
				return false;
			}
    		
    		//Concatenate Service URl with API name
    		String concServiceURL = serviceURL+"?op="+apiName;
    		serviceURL = concServiceURL;
    		
    		//Get the environment variable for xml test data
    		String xmlDataEnvVar = Runtimevalue.getProperty(storedEnvVar);
    		
    		try{
    			//Reading testdata from XMLTemplate
    			XML_Request = ReadExcel.RetrieveValueFromTestDataBasedOnQuery(property.getProperty("SupportFiles_Location"), property.getProperty("XML_Template_File_Name"), "Input_XML", XLDB_Input_Query);
    			
    			log.info("Retrieved Excel from Template:"+XML_Request);
    			factory=DocumentBuilderFactory.newInstance();
    			//factory.setNamespaceAware(true);
    			DocumentBuilder builder=factory.newDocumentBuilder();
    			StringBuilder xmlBuilder=new StringBuilder();
    			xmlBuilder.append(XML_Request);
    			log.info("xmlBuilder::"+xmlBuilder.toString());
    			ByteArrayInputStream  is;
    			try{
    				is=new ByteArrayInputStream(xmlBuilder.toString().getBytes("UTF-8"));
    				document=builder.parse(is);
    			}catch(Exception e){
    				e.printStackTrace();
    			}
    			//updating node values from XMLtemplate based on input data from testdata sheet
    			log.info("Input_DATAXML:"+Input_DATAXML);
    			updateNodeValue(document,Input_DATAXML);
    			String Updated_XML_Request = DocumentToString(document);
    			
    			//Replace the XML test data by stored env variable
    			String changeXMLTestData = Updated_XML_Request.replace("dynamicValue", xmlDataEnvVar);
    			Updated_XML_Request = changeXMLTestData;
    			log.info("XML test data is changed successfully :"+Updated_XML_Request);
    			
    			try{
    				log.info("Before post method");
    				PostMethod post = new PostMethod(serviceURL);
    				log.info("Updated_XML_Request:"+Updated_XML_Request);
    				
    				HttpClient httpclient = new HttpClient();
    				log.info("httpclient::"+Updated_XML_Request);
    		    	post.setRequestEntity(new StringRequestEntity(Updated_XML_Request, "text/xml", "ISO-8859-1"));
    		    	post.setRequestHeader("Content-type","text/xml");
    				try{
    					result = httpclient.executeMethod(post);
    					log.info("result::"+result);

    					ExtentTestManager.reportStepPass("UPDATED XML REQUEST : '"+ Updated_XML_Request + "' has been sent successfully.");
    				}catch(Exception httpException){
    					log.info("Exception::"+httpException.getMessage());

    					httpException.printStackTrace();
    					ExtentTestManager.reportStepFail(driver,"httpException:Error occured while sending the request to the server."+httpException.getMessage(), false);
    				}
    				
    				gbstrXMLResponseData= post.getResponseBodyAsString();
    				log.info("Response:"+gbstrXMLResponseData);
    				//To Enable SOAP XML Header Validations
    				log.info("Result:"+result);
    				if(result==200){
    					Executionstatus=true;
    					ExtentTestManager.reportStepPass("XML RESPONSE : '"+ gbstrXMLResponseData.toString() + "' received successfully.");
    					//validating XML headers and footers
    					if(property.getProperty("SOAP_Validation_Enable").equalsIgnoreCase("True")){

    						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_Envelope"), gbstrXMLResponseData);
    						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_LastLine"), gbstrXMLResponseData);
    						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_LastsecondLine"), gbstrXMLResponseData);
    						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_OpeningBody"), gbstrXMLResponseData);
    					}
    					try{
    						xpathfactory = XPathFactory.newInstance();
    						log.info("xpathfactory :"+xpathfactory);
    						xpath = XPathFactory.newInstance().newXPath();
    						factory=DocumentBuilderFactory.newInstance();
    						builder=factory.newDocumentBuilder();
    						document=builder.parse(new ByteArrayInputStream(gbstrXMLResponseData.getBytes("UTF-8")));

    						String[] Output_data = Output_DATAXML.split(";");

    						for (int i = 0; i < Output_data.length; i++) {
    							String[] Output_XML_Info = Output_data[i].split("=",2);
    							String node_value=(String)xpath.compile("*//"+Output_XML_Info[0]).evaluate(document,XPathConstants.STRING);

    							Executionstatus = StringValidator(node_value,Output_XML_Info[1]);
    							
    							if(Executionstatus==true){
    								ExtentTestManager.reportStepPass("The actual node value of  : '//"+ Output_XML_Info[0] + "' is '"+ node_value +"' and matched with the expected value '"+ Output_XML_Info[1] +"'.");
    								Executionstatus=true;;
    							} else{
    								ExtentTestManager.reportStepFail(driver,"The actual node value of  : '//"+ Output_XML_Info[0] + "' is '"+ node_value +"' and no matching with the expected value '"+ Output_XML_Info[1] +"'.", false);
    								Executionstatus=false;
    							}
    						}

    					}catch(Exception responseXMLException){
    						responseXMLException.printStackTrace();
    						ExtentTestManager.reportStepFail(driver,"responseXMLException:Error in Parsing response XML.:"+responseXMLException.getMessage(), false);
    						return Executionstatus;
    					}
    				}
    			}catch(Exception xmlFormException){
    				xmlFormException.printStackTrace();
    				log.info(xmlFormException.getMessage());
    				
    			}


    		}catch(Exception e){
    			
    			ExtentTestManager.reportStepFail(driver,"Exception occurred in Parsing response XML.:"+e.getMessage(), false);
    			return Executionstatus;
    			
    		}

    		return Executionstatus;

    	}
    	
    	 public synchronized boolean sqlWaitSelCondEnvVar(String sqltablename, String strsqlcolumnname, String strsqlcondition, String envVar,String strExpectedvalue, String timeOutName, int strExecEventFlag){
     		
     		boolean functionStatus = false;
     		String query = null;
     		String check = null;
     		String Table_name = null;
     		String Column_name = null;
     		String Expected_value = null;
     		String Actual_Value = null;
     		String timeOutValue = null;
     		String condEnvVar = null;
     		String SQL_condition = null;

     		try {
     			if(strExecEventFlag==1){
     				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
     				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
     				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
     				condEnvVar=getTestData(testDataFilePathStatic, testComponentNameStatic, envVar, gblrecordsCounterStatic);
     				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedvalue, gblrecordsCounterStatic);
     				timeOutValue = getTestData(testDataFilePathStatic, testComponentNameStatic, timeOutName, gblrecordsCounterStatic);
     				
     			}

     			if(Table_name==null || Column_name==null || SQL_condition == null || condEnvVar==null||Expected_value==null||timeOutValue==null){
     				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
     				return false;
     			}
     			
     			
     			String getValueFromEnv = Runtimevalue.getProperty(condEnvVar);
     			condEnvVar = getValueFromEnv;
     			
     			String replaceCondFromEnv = SQL_condition.replace("envVar", condEnvVar);
     			SQL_condition = replaceCondFromEnv;
     			log.info("Replaced condition name with environment variable :"+SQL_condition);
     			
     			switch (timeOutValue.toLowerCase()) {
 					
 				case "freesimsubscriber":
 					timeOutValue = "45";
 					break;
 					
 				default:
 					
 					ExtentTestManager.reportStepFail( driver,"Given value is not available in timeout switch case",false);
 					throw new IllegalArgumentException("Given value is not available in timeout switch case");
 				}

     			String pattern = "^Count\\((.*)\\)";
     			// Create a Pattern object
     			  Pattern r = Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
     			// Now create matcher object.
     			  Matcher m = r.matcher(Column_name);
     			  if (m.find( )) {
     				return SQLDBCheckNoOfRowsExist(sqltablename, strsqlcolumnname, strsqlcondition, strExpectedvalue, strExecEventFlag);
     			  }
     				
     			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
     			
     			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

     			//Check for Record Available
     			ResultSet rs_SQLServerCheck = stmt.executeQuery(check);
     			
//     			*********************************************************
     			
     			int temp=0;	
     			while(rs_SQLServerCheck.next()){
     				temp++;
     			}

     			if(temp < 1){
     				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
     				return false;
     			}

     			rs_SQLServerCheck = stmt.executeQuery(check);
     			rs_SQLServerCheck.next();
     			rs_SQLServerCheck.getObject(Column_name);

     			if (rs_SQLServerCheck.wasNull()) {
     				if(Expected_value.equalsIgnoreCase("NULL")){
     					ExtentTestManager.reportStepPass("Actual value 'NULL' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
     					functionStatus= true;
     				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
     					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
     					functionStatus= false;
     				}
     			}else{

     				
     				int iterateValue = Integer.parseInt(timeOutValue);
     				
     				log.info("Iterate value from excel sheet :"+iterateValue);
     				
     				for(int i = 0; i < iterateValue; i++){
     					
     				Thread.sleep(1000);	
     				
     				log.info("Waiting expected DB value to compare, looping :"+i);
     				
     				ResultSet rs_SQLServer = stmt.executeQuery(query);
     				rs_SQLServer.next();
     				Actual_Value = rs_SQLServer.getString(1).trim();
     				
     				if(Actual_Value.contains("E-10")){
     					Actual_Value = new BigDecimal(Actual_Value).toPlainString();
     				}

     				if (Expected_value.contains("CURRENT_DATE")){
     					String []ExpectedvalueWithFormat=Expected_value.split("#");
     					String db_Date = Actual_Value.split(" ")[0];
     					Actual_Value=db_Date;
     					Date date=new Date();			
     					SimpleDateFormat dateformat=new SimpleDateFormat(ExpectedvalueWithFormat[1]);
     					Expected_value=dateformat.format(date);
     				}
     				
     				
     				if(Actual_Value.equalsIgnoreCase(Expected_value)){
     					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
     					functionStatus= true;
     					log.info("DB value is matched ,breaking the loop @ :"+i);
     					break;
     								}
     				
     						}
     				
     				if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
 					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
 					functionStatus= false;
 					
     				}
     			}

     		}catch (Exception e){
     			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query '"+query+"'.Error description is : "+ e.getMessage(), false);
     			return false;
     		}
     		return functionStatus;
     	}	
    	
    	 
    	 public synchronized boolean verifyRestXmlResponse(String soapURL, String Request_Name, String soapInputRequest, String soapOutputResponse,String excelDbQuery,int strExecEventFlag)throws Exception  {

     		boolean Executionstatus=false;
     		
     		String apiName = null;
     		String Input_DATAXML = null;
     		String XLDB_Input_Query = null;
     		String Output_DATAXML = null;
     		String serviceURL = null;
     		String gbstrXMLResponseData = null;
     		
     		String XML_Request = null;
     		int result=0;
     		
     		DocumentBuilderFactory factory = null;
     		Document document = null;
     		XPath xpath = null;
     		XPathFactory xpathfactory = null;
     		
     		if(strExecEventFlag==1){
     			
     			serviceURL = property.getProperty(RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, soapURL, gblrecordsCounterStatic));
     			apiName = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, Request_Name, gblrecordsCounterStatic);
     			Input_DATAXML= RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, soapInputRequest, gblrecordsCounterStatic);
     			XLDB_Input_Query = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, excelDbQuery, gblrecordsCounterStatic);
     			Output_DATAXML = RetrieveTestDataValue(testDataFilePathStatic, testComponentNameStatic, soapOutputResponse, gblrecordsCounterStatic);
     			
     		}
     		
     		if(apiName == null || serviceURL == null || Input_DATAXML == null || XLDB_Input_Query == null || Output_DATAXML == null){
 				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
 				return false;
 			}
     		
     		//Concatenate Service URl with API name
     		String concServiceURL = serviceURL+"?op="+apiName;
     		serviceURL = concServiceURL;
     		
     		try{
     			//Reading testdata from XMLTemplate
     			XML_Request = ReadExcel.RetrieveValueFromTestDataBasedOnQuery(property.getProperty("SupportFiles_Location"), property.getProperty("XML_Template_File_Name"), "Input_XML", XLDB_Input_Query);
     			
     			log.info("Retrieved Excel from Template:"+XML_Request);
     			factory=DocumentBuilderFactory.newInstance();
     			//factory.setNamespaceAware(true);
     			DocumentBuilder builder=factory.newDocumentBuilder();
     			StringBuilder xmlBuilder=new StringBuilder();
     			xmlBuilder.append(XML_Request);
     			log.info("xmlBuilder::"+xmlBuilder.toString());
     			ByteArrayInputStream  is;
     			try{
     				is=new ByteArrayInputStream(xmlBuilder.toString().getBytes("UTF-8"));
     				document=builder.parse(is);
     			}catch(Exception e){
     				e.printStackTrace();
     			}
     			//updating node values from XMLtemplate based on input data from testdata sheet
     			log.info("Input_DATAXML:"+Input_DATAXML);
     			updateNodeValue(document,Input_DATAXML);
     			String Updated_XML_Request = DocumentToString(document);

     			try{
     				log.info("Before post method");
     				PostMethod post = new PostMethod(serviceURL);
     				log.info("Updated_XML_Request:"+Updated_XML_Request);
     				
     				
     				HttpClient httpclient = new HttpClient();
     				log.info("httpclient::"+Updated_XML_Request);
     		    	post.setRequestEntity(new StringRequestEntity(Updated_XML_Request, "text/xml", "ISO-8859-1"));
     		    	post.addRequestHeader("SOAPAction", "http://tempuri.org/IServiceIVR/"+apiName+"");
     		    	post.setRequestHeader("Content-type","text/xml");
     		    	
     				try{
     					result = httpclient.executeMethod(post);
     					log.info("result::"+result);

     					ExtentTestManager.reportStepPass("UPDATED XML REQUEST : '"+ Updated_XML_Request + "' has been sent successfully.");
     				}catch(Exception httpException){
     					log.info("Exception::"+httpException.getMessage());

     					httpException.printStackTrace();
     					ExtentTestManager.reportStepFail(driver,"httpException:Error occured while sending the request to the server."+httpException.getMessage(), false);
     				}
     				
     				gbstrXMLResponseData= post.getResponseBodyAsString();
     				log.info("Response:"+gbstrXMLResponseData);
     				//To Enable SOAP XML Header Validations
     				log.info("Result:"+result);
     				if(result==200){
     					Executionstatus=true;
     					ExtentTestManager.reportStepPass("XML RESPONSE : '"+ gbstrXMLResponseData.toString() + "' received successfully.");
     					//validating XML headers and footers
     					if(property.getProperty("SOAP_Validation_Enable").equalsIgnoreCase("True")){

     						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_Envelope"), gbstrXMLResponseData);
     						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_LastLine"), gbstrXMLResponseData);
     						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_LastsecondLine"), gbstrXMLResponseData);
     						Executionstatus=Verify_XML_Header_Footer_Validation(property.getProperty("XML_OpeningBody"), gbstrXMLResponseData);
     					}
     					try{
     						xpathfactory = XPathFactory.newInstance();
     						log.info("xpathfactory :"+xpathfactory);
     						xpath = XPathFactory.newInstance().newXPath();
     						factory=DocumentBuilderFactory.newInstance();
     						builder=factory.newDocumentBuilder();
     						document=builder.parse(new ByteArrayInputStream(gbstrXMLResponseData.getBytes("UTF-8")));

     						String[] Output_data = Output_DATAXML.split(";");

     						for (int i = 0; i < Output_data.length; i++) {
     							String[] Output_XML_Info = Output_data[i].split("=",2);
     							String node_value=(String)xpath.compile("*//"+Output_XML_Info[0]).evaluate(document,XPathConstants.STRING);

     							Executionstatus = StringValidator(node_value,Output_XML_Info[1]);
     							
     							if(Executionstatus==true){
     								ExtentTestManager.reportStepPass("The actual node value of  : '//"+ Output_XML_Info[0] + "' is '"+ node_value +"' and matched with the expected value '"+ Output_XML_Info[1] +"'.");
     								Executionstatus=true;;
     							} else{
     								ExtentTestManager.reportStepFail(driver,"The actual node value of  : '//"+ Output_XML_Info[0] + "' is '"+ node_value +"' and no matching with the expected value '"+ Output_XML_Info[1] +"'.", false);
     								Executionstatus=false;
     							}
     						}

     					}catch(Exception responseXMLException){
     						responseXMLException.printStackTrace();
     						ExtentTestManager.reportStepFail(driver,"responseXMLException:Error in Parsing response XML.:"+responseXMLException.getMessage(), false);
     						return Executionstatus;
     					}
     				}
     			}catch(Exception xmlFormException){
     				xmlFormException.printStackTrace();
     				log.info(xmlFormException.getMessage());
     				
     			}


     		}catch(Exception e){
     			
     			ExtentTestManager.reportStepFail(driver,"Exception occurred in Parsing response XML.:"+e.getMessage(), false);
     			return Executionstatus;
     			
     		}

     		return Executionstatus;

     	}
    	 
    	 
    	 public synchronized boolean SQLDBUpdateCondEnv(String sqltablename, String strsqlcolumnname,String strsqlcolumnvalue,String sqlConditionEnv, String envCondColName, int strExecEventFlag){
 			String Table_name = null;
 			String Column_name = null;
 			String Column_Value = null;
 			String SQL_conditionEnv = null;
 			String query = null;
 			String envCondColumnName = null;

 			try {
 				if(strExecEventFlag==1){
 					Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
 					Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
 					Column_Value=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnvalue, gblrecordsCounterStatic);
 					SQL_conditionEnv=getTestData(testDataFilePathStatic, testComponentNameStatic, sqlConditionEnv, gblrecordsCounterStatic);
 					envCondColumnName=getTestData(testDataFilePathStatic, testComponentNameStatic, envCondColName, gblrecordsCounterStatic);
 					
 				}else{
 					Table_name=sqltablename;
 					Column_name=strsqlcolumnname;
 					Column_Value=strsqlcolumnvalue;
 					SQL_conditionEnv=sqlConditionEnv;
 					envCondColumnName = envCondColName;
 				}

 				if(Table_name==null || Column_name==null || Column_Value==null || SQL_conditionEnv==null){
 					ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
 					return false;
 				}
 				
 				String condFromEnv = Runtimevalue.getProperty(SQL_conditionEnv);

 				if(Column_Value.equalsIgnoreCase("NULL")){
 					query = "update "+Table_name+" set "+Column_name+"=NULL where "+condFromEnv;
 				}else{
 					String singleQu = "'";
 					query = "update "+Table_name+" set "+Column_name+"="+Column_Value+" where "+envCondColumnName+" = '"+condFromEnv+singleQu;
 				}

 				stmt.execute(query);
 				ExtentTestManager.reportStepPass("SQL Update Query Condition from Environment "+ query + " executed successfully.");
 				return true;

 			} catch (Exception e) {
 				e.printStackTrace();
 				ExtentTestManager.reportStepFail(driver,"Error occured while executing to the SQL Update query. Error description is : "+ e.getMessage(), false);
 				return false;
 			}
 		}
    	 
    	 
    
    	 public synchronized boolean SQLDBDateDigitUpdate(String sqltablename, String strsqlcolumnname,  String strsqlcondition, String envCondColName, String strDaysdifference, int strExecEventFlag){
    			
    		 boolean SQLDBPastDateUpdate= false;
    			String Table_name = null;
    			String Column_name = null;
    			String SQL_conditionEnv = null;
    			int Days_Difference = 0;
    			String query = null;
    			String envCondColumnName = null;
    		
    			try {
    				if(strExecEventFlag==1){
    					Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
    					Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
    					Days_Difference  = Integer.parseInt(getTestData(testDataFilePathStatic, testComponentNameStatic, strDaysdifference,gblrecordsCounterStatic));
    					SQL_conditionEnv=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
     					envCondColumnName=getTestData(testDataFilePathStatic, testComponentNameStatic, envCondColName, gblrecordsCounterStatic);
    					
    				}

    				if(Table_name==null || Column_name==null || SQL_conditionEnv==null ){
    					ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
    					return false;
    				}

    				String condFromEnv = Runtimevalue.getProperty(SQL_conditionEnv);
    				
    				DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
    				Date date = new Date();
    				Calendar expdate = Calendar.getInstance();
    				expdate.setTime(date);
    				expdate.add(Calendar.DATE, 0);
    				expdate.add(Calendar.MINUTE, Days_Difference);
    				String Required_Date = dateFormat.format(expdate.getTime());
    				
    				String singleQu = "'";
    				query = "update "+Table_name+" set "+ Column_name + " = '"+ Required_Date +"' where "+envCondColumnName+" = '"+condFromEnv+singleQu;
    				stmt.execute(query);
    				SQLDBPastDateUpdate=true;
    				ExtentTestManager.reportStepPass("SQL DB Update Query : "+ query + " executed successfully.");

    			} catch (Exception e) {
    				SQLDBPastDateUpdate=false;
    				ExtentTestManager.reportStepFail(driver, "Error occured while executing the SQL query using SQLDBPastDateUpdate. Error description is : "+ e.getMessage() +".", false);
    			}
    			return SQLDBPastDateUpdate;
    		} 
    	 
    	 
    	/***************************************************PRAVEEN CODE COMPLETED**********************************************************/
    	
 	public synchronized boolean SQLDBSelectPatternMatcher(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strExpectedvalue,int strExecEventFlag){
		boolean functionStatus=false;
		String query=null;
		String check;
		String Table_name=null;
		String Column_name=null;
		String SQL_condition=null;
		String Expected_Pattern=null;
		String Actual_Value=null;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				Expected_Pattern=getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedvalue, gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null||Expected_Pattern==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			// Create a Pattern object
			  Pattern r = Pattern.compile(Expected_Pattern,Pattern.CASE_INSENSITIVE);
				
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;

			//Check for Record Available
			ResultSet rs_SQLServerCheck = stmt.executeQuery(check);
			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = stmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_Pattern.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the SQL Query "+query+" matches the expected pattern : '"+Expected_Pattern+"'");
					functionStatus= true;
				}else if(!(Expected_Pattern.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the SQL Query "+query+" does not match with the expected pattern '"+Expected_Pattern+"'", false);
					functionStatus= false;
				}
			}else{

				ResultSet rs_SQLServer = stmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1).trim();

				Matcher m = r.matcher(Actual_Value);

				if(m.find()){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the SQL Query "+query+" matches the expected pattern : '"+Expected_Pattern+"'");
					functionStatus= true;
				}else {
					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the SQL Query "+query+" does not match with the expected pattern '"+Expected_Pattern+"'", false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query '"+query+"'.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean SQLCheckUniqueValues(String sqltablename, String strsqlcolumnname,String strsqlcondition,int strExecEventFlag){
		boolean SQLCheckUniqueValues= false;
		String query = null;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		int iflag = 0;
		
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the Data Sheet.", false);
				return false;
			}
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"";
			ResultSet rs_SQLServer = stmt.executeQuery(query);
			List<Integer> rowValues = new ArrayList<Integer>();
			while (rs_SQLServer.next()) {
				rowValues.add(rs_SQLServer.getInt(1));
			}   
			
		    for (int i = 0 ; i < rowValues.size() ; i++) {
		        for (int j = i+1; j < rowValues.size() ; j++) {
		             if (rowValues.get(i) == rowValues.get(j)) {
		                 iflag = 1;
		                 break;
		             }
		        }
		        if(iflag == 1){
		        	break;
		        }
		    }              

			if(iflag == 0){
				ExtentTestManager.reportStepPass("All the values under the column : '"+ Column_name +"' are unique for the query : '"+ query +"'.");
				SQLCheckUniqueValues = true;
			}else {
				ExtentTestManager.reportStepFail(driver,"All the values under the column : '"+ Column_name +"' are not unique for the query : '"+ query +"'.", false);
				SQLCheckUniqueValues = false;
			}


		} catch (Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while performing WeblistSQLDBitemsverify. Error description is : "+ e.getMessage() +".", true);
			SQLCheckUniqueValues=false;
		}
		return SQLCheckUniqueValues;
	}
	
	public synchronized boolean webTableVerifyDetailssimsubmitenvvar(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailssimsubmitenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			int findPrimaryColumn = 0;

			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				
				if(headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 8){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
				}

				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					break;
				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if(headercolumn >= 2 && headercolumn <= 8){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}
					
					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername)){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						if(hstableheaders.get(headernames[hdrcount]) != 0){
						
							if(hstableheaders.get(headernames[hdrcount]) == 11){
								actualvalue = new Select(driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/select"))).getFirstSelectedOption().getText();
							} else if(hstableheaders.get(headernames[hdrcount]) == 9 || hstableheaders.get(headernames[hdrcount]) == 10 || hstableheaders.get(headernames[hdrcount]) == 15 ){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/input")).getAttribute("value");
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}	catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailssimsubmitenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailssimsubmitenvvar = true;
		}
		return webTableVerifyDetailssimsubmitenvvar;
	}

	public synchronized boolean WebElementDynamicStringVerify(String getValueFromPOM, String strTestObject, String strPattern,int strExecEventFlag){
		boolean WebElementDynamicStringVerify=false;
		boolean matchedStatus=false;
		Matcher matchedPattern = null;
		String Pattern_String = null;
		String RetrievedMessage=null;
		try{
			if(strExecEventFlag==1){
				Pattern_String=getTestData(testDataFilePathStatic, testComponentNameStatic,strPattern,gblrecordsCounterStatic);
			}

			if(Pattern_String==null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
				return false;
			}
			Pattern_String = Pattern_String.trim();
			RetrievedMessage=selectByLocatorType(getValueFromPOM).getText().trim();
			Pattern expPattern=Pattern.compile(Pattern_String);
			matchedPattern = expPattern.matcher(RetrievedMessage);
			matchedStatus=matchedPattern.find();
		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Error occured while matching the Expected pattern-matchedPattern.find() "+e.getMessage(), true);
			WebElementDynamicStringVerify=false;
		}

		try{
			if(matchedStatus==true){
				log.info("Matched status pass:"+matchedStatus);
				ExtentTestManager.reportStepPass("The Expected pattern '"+Pattern_String+"' in the webElement '"+strTestObject+"' matches with the actual pattern '"+RetrievedMessage+"' successfully");
				WebElementDynamicStringVerify=true;
			}else if(matchedStatus==false){
				log.info("Matched status fail:"+matchedStatus);
				ExtentTestManager.reportStepFail(driver,"The Expected pattern '"+Pattern_String+"' in the webElement '"+strTestObject+"' does not match with the actual pattern '"+RetrievedMessage+"'", true);
				WebElementDynamicStringVerify=false;
			}
		} catch (Exception e){
			ExtentTestManager.reportStepFail(driver, "Error occured while finding the Pattern. Error description is  "+ e.getMessage() +".", true);
			log.info("WebElementDynamicStringVerify Error : " + e);
			WebElementDynamicStringVerify=false;
		}
		return WebElementDynamicStringVerify;
	}
	
	public synchronized boolean WebElementRetrieveValuesEnvVar(String getValueFromPOM, String strTestObject,String strSplitString,int NumberOfCharacters,String EnvVariableName,int strExecEventFlag) {
		boolean WebElementRetrieveValuesEnvVar=false;
		String SplitString = null;
		String ContentToStore = null;
		String strEnvVariableName = null;
		try{
			if(strExecEventFlag==1){
				SplitString = getTestData(testDataFilePathStatic, testComponentNameStatic,strSplitString,gblrecordsCounterStatic);
				strEnvVariableName = getTestData(testDataFilePathStatic, testComponentNameStatic,EnvVariableName,gblrecordsCounterStatic);
			}
			if(SplitString==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in test data sheet.", false);
				return false;
			}
			String RetrievedMessage=selectByLocatorType(getValueFromPOM).getText().trim();
			String[] split1Content=RetrievedMessage.split(SplitString);
			ContentToStore=split1Content[1].substring(0,NumberOfCharacters);
			Runtimevalue.setProperty(strEnvVariableName, ContentToStore);
		}catch(Exception e){
			ExtentTestManager.reportStepFail(driver,"Error in retrieving the value from webelement  :'"+strTestObject+"'and the error description is :"+e.getMessage(), true);
			WebElementRetrieveValuesEnvVar=false;
		}
		if(!(ContentToStore==null)){
			ExtentTestManager.reportStepPass("The Value '" +ContentToStore+ "' is stored in the Environment Variable: '"+ strEnvVariableName +"' successfully");
			WebElementRetrieveValuesEnvVar=true;
		}else{
			ExtentTestManager.reportStepFail(driver, "No Value is stored in Environment Variable: '"+ strEnvVariableName +"'", true);
			WebElementRetrieveValuesEnvVar=false;
		}
		return WebElementRetrieveValuesEnvVar;
	}
	
	public synchronized boolean webTableVerifyDetailsgbrsimsubmitenvvar(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailsgbrsimsubmitenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			int findPrimaryColumn = 0;

			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				
				if((headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 10) || headerCounterPrimaryColumn == 12){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
				}

				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					break;
				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if((headercolumn >= 2 && headercolumn <= 10) || headercolumn == 12){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}

					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername.trim().toString())){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						if(hstableheaders.get(headernames[hdrcount]) != 0){
						
							if(hstableheaders.get(headernames[hdrcount]) == 11){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/a")).getText();
							} else if(hstableheaders.get(headernames[hdrcount]) == 13 ){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/input")).getAttribute("value");
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}	catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailscreditcheckenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailsgbrsimsubmitenvvar = true;
		}
		return webTableVerifyDetailsgbrsimsubmitenvvar;
	}
	

	public synchronized boolean webTableVerifyDetailsgbrsimauthoriseenvvar(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailsgbrsimauthoriseenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			int findPrimaryColumn = 0;

			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				
				if((headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 10) || headerCounterPrimaryColumn == 12){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
				}

				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					break;
				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if((headercolumn >= 2 && headercolumn <= 10) || headercolumn == 12){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}

					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername.trim().toString())){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						if(hstableheaders.get(headernames[hdrcount]) != 0){
						
							if(hstableheaders.get(headernames[hdrcount]) == 11){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/a")).getText();
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}	catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailscreditcheckenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailsgbrsimauthoriseenvvar = true;
		}
		return webTableVerifyDetailsgbrsimauthoriseenvvar;
	}
	
   	public synchronized boolean SQL_Job_Execution(String strJobName, String sqltablename, String strsqlcolumnname, String strsqlcondition, String strExpectedvalue, int strExecEventFlag){
		
	    boolean SQL_Job_Execution = false;
	    String JobName = null;
	    String Table_name = null;
	    String Column_name = null;
	    String SQL_condition = null;
	    String Expected_value = null;
	    ResultSet rs_SQLServer = null;
	    String Actual_Message = null;

	    int iflag = 0;
	    
		try {
			if(strExecEventFlag==1){
				JobName= getTestData(testDataFilePathStatic, testComponentNameStatic, strJobName, gblrecordsCounterStatic);
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic, strExpectedvalue, gblrecordsCounterStatic);
			}
	
			if(JobName==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				SQL_Job_Execution = false;
			}
	
			String Job_query = "exec "+ JobName;
			String query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition;
			try{
				
				for(int i=1;i<=15;i++){
					stmt.execute(Job_query);

					rs_SQLServer = stmt.executeQuery(query);
					rs_SQLServer.next();
					Actual_Message = rs_SQLServer.getString(1).trim();

					if(Actual_Message.equals(Expected_value)){
						  System.out.println("SQL Job '"+Job_query+"' is executed successfully till the required column reaches the expected value.");
					      iflag=1;
						  break;
					}
					
					Thread.sleep(2000L);
				}
				if(iflag==1){
				ExtentTestManager.reportStepPass("SQL Job '"+ JobName +"' is executed successfully.");
			    SQL_Job_Execution = true;
				} else {
					ExtentTestManager.reportStepFail(driver,"SQL Job '"+ JobName + "'  is not executed successfully.", false);
				    SQL_Job_Execution = false;
				}
			}catch (Exception e) { 
				ExtentTestManager.reportStepFail(driver,"SQL Job '"+ JobName + "'  is not executed successfully. Error description is : "+ e.getMessage(), false);
				SQL_Job_Execution = false;
			}
			
		
		}catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver,"Error occured while executing the SQL Job Query. Error description is : "+ e.getMessage(), false);
			SQL_Job_Execution = false;
		}
		return SQL_Job_Execution;
   }
   	
  	public synchronized boolean SQLDBDeleteConditionEnvvar(String sqltablename, String sqlcondition, String environmentvariable, int strExecEventFlag){
		String tablename = null;
		String condition = null;
		String strenvvar = null;
		
		try {
		if(strExecEventFlag==1){
			tablename= getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
			condition= getTestData(testDataFilePathStatic, testComponentNameStatic, sqlcondition, gblrecordsCounterStatic);
			strenvvar= getTestData(testDataFilePathStatic, testComponentNameStatic, environmentvariable, gblrecordsCounterStatic);
		}else{
			tablename= sqltablename;
			condition= sqlcondition;
		}

		if(tablename==null || condition==null || strenvvar==null){
			ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
			return false;
		}
	
			String check = "select * from "+tablename +" where "+condition +"= '"+ Runtimevalue.getProperty(strenvvar) +"'";
			String query = "Delete from "+ tablename +" where "+ condition +"= '"+ Runtimevalue.getProperty(strenvvar) +"'";
			ResultSet rs = stmt.executeQuery(check);		
			int temp=0;	

			while(rs.next()){
				temp++;
			}
			if(temp >= 1){
				stmt.execute(query);
				ExtentTestManager.reportStepPass("SQL Delete Query  "+ query + "  executed successfully.");
				return true;
			}else{
				ExtentTestManager.reportStepPass( "SQL Delete Query  "+ query + "  has NO RECORDS in DB");
				return true;
			}

		}catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver,"Error occured while deleting to the SQL query. Error description is : "+ e.getMessage(), false);
			return false;
		}
	}   	
    	
 	public synchronized boolean SQLDBSelectMultipleConditionEnvvar(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strenvironmentvariable, String strsqlcondition2, String strExpectedvalue,int strExecEventFlag){
		boolean functionStatus= false;
		String query = null;
		String check=null;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String SQL_condition_value = null;		
		String Expected_value = "";
		String Actual_Value = null;
		String environmentvariable=null;
		String SQL_condition_2 = null;
		
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic,strExpectedvalue,gblrecordsCounterStatic);
				environmentvariable=getTestData(testDataFilePathStatic, testComponentNameStatic,strenvironmentvariable,gblrecordsCounterStatic);
				SQL_condition_value = Runtimevalue.getProperty(environmentvariable);
				SQL_condition_2=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition2,gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null || SQL_condition_2==null){
				ExtentTestManager.reportStepFail(driver,"Required details are not provided in test data sheet.", false);
				return false;
			}

			//Query to Execute 
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+ SQL_condition_value +"' and "+ SQL_condition_2;
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+ SQL_condition_value +"' and "+ SQL_condition_2;
			log.info("query is : "+query);

			//Check for Record Available
			ResultSet rs_SQLServerCheck = stmt.executeQuery(check);
			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = stmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
				if(Expected_value.equalsIgnoreCase("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"'");
					functionStatus= true;
				}else if(!(Expected_value.equalsIgnoreCase("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"'", false);
					functionStatus= false;
				}
			}else{

				ResultSet rs_SQLServer = stmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1).trim();

				if (Expected_value.contains("CURRENT_DATE")){
					String[] ExpectedvalueWithFormat=Expected_value.split("#");
					String db_Date = Actual_Value.split(" ")[0];
					Actual_Value=db_Date;
					Date date=new Date();			
					SimpleDateFormat dateformat=new SimpleDateFormat(ExpectedvalueWithFormat[1]);
					Expected_value=dateformat.format(date);
				}

				if(Actual_Value.equalsIgnoreCase(Expected_value)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' for the SQL Query "+query+" matches the expected value : '"+Expected_value+"' where Condition value from ENV Variable '"+environmentvariable+"'");
					functionStatus= true;
				}else if(!(Actual_Value.equalsIgnoreCase(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value '"+Actual_Value+"' for the SQL Query "+query+" does not match with the expected value '"+Expected_value+"' where Condition value from ENV Variable '"+environmentvariable+"'", false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}
	
	public synchronized boolean RRBSDBSelectMultipleConditionEnvvar(String sqltablename, String strsqlcolumnname,String strsqlconditionCol,String envVariableColumnName,String strsqlcondition2,String strExpectedvalue,int strExecEventFlag){
		boolean RRBSDBSelect= false;
		String query = null;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String SQL_condition_2 = null;		
		String Expected_value = "";
		String Actual_Value = null;
		String envVariable=null;
		String evnCondtion=null;
		
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlconditionCol,gblrecordsCounterStatic);
				Expected_value=getTestData(testDataFilePathStatic, testComponentNameStatic,strExpectedvalue,gblrecordsCounterStatic);
				SQL_condition_2=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition2,gblrecordsCounterStatic);
				envVariable=getTestData(testDataFilePathStatic, testComponentNameStatic,envVariableColumnName,gblrecordsCounterStatic);
				evnCondtion=Runtimevalue.getProperty(envVariable);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null||envVariable==null||evnCondtion==null||SQL_condition_2==null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
				return false;
			}
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"='"+evnCondtion+"' and "+SQL_condition_2 +"";
			ResultSet rrbsresultset = rrbsstatement.executeQuery(query);
			rrbsresultset.next();
			Actual_Value = rrbsresultset.getString(1).trim();

			if(!rrbsresultset.wasNull()){      
				if(Actual_Value.equalsIgnoreCase(Expected_value)){
					ExtentTestManager.reportStepPass("Actual value : '"+Actual_Value+"' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
					RRBSDBSelect=true;
				}else if(!(Actual_Value.equals(Expected_value))){
					ExtentTestManager.reportStepFail(driver,"Actual value : '"+Actual_Value+"' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);
					RRBSDBSelect=false;
				}
			}
			else if(rrbsresultset.wasNull()){        // If "NULL" value is present in the fired Query
				if(Expected_value.equals("NULL")){
					ExtentTestManager.reportStepPass("Actual value 'NULL' for the Query '"+query+"' matches the expected value : '"+Expected_value+"'");
					RRBSDBSelect=true;
				}else if(!(Expected_value.equals("NULL"))){
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' for the Query '"+query+"' does not match the expected value : '"+Expected_value+"'", false);  	 
					RRBSDBSelect=false;
				}
			}
		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while RRBSDBSelectFromEnvCondition query. Error description is : "+ e.getMessage() +".", true);
			RRBSDBSelect=false;
		}
		return RRBSDBSelect;
	}

		public synchronized boolean webTableVerifyDetailssimsubmitenvvar_2(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailssimsubmitenvvar_2 = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			int findPrimaryColumn = 0;

			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				
				if(headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 8){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
				}

				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					break;
				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if(headercolumn >= 2 && headercolumn <= 8){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}
					
					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername)){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						if(hstableheaders.get(headernames[hdrcount]) != 0){
						
							if(hstableheaders.get(headernames[hdrcount]) == 11 || hstableheaders.get(headernames[hdrcount]) == 13){
								actualvalue = new Select(driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/select"))).getFirstSelectedOption().getText();
							} else if(hstableheaders.get(headernames[hdrcount]) == 9 || hstableheaders.get(headernames[hdrcount]) == 10 || hstableheaders.get(headernames[hdrcount]) == 15 ){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/input")).getAttribute("value");
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}	catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailssimsubmitenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailssimsubmitenvvar_2 = true;
		}
		return webTableVerifyDetailssimsubmitenvvar_2;
	}

public synchronized boolean webTableVerifyDetailsgbrsimsubmitenvvar_2(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
    
	boolean webTableVerifyDetailsgbrsimsubmitenvvar_2 = false;
	int itemexist = 0;
	int testcasestatus = 0;
	String primaryColumnName = null;
	String secColumnName = null;
	String expectedRowValue = null;
	String expectedTextFromTable = null;
	String attributeID = null;
	String actualValueFromTable = null;
	String actualvalue = null;
	String Expected_value = null;
	String Current_Date=null;
	String GetTitleHeaders = null;
	String headername = null;
	String dummyheadername = null;
	
	
	try{	
		if(strExecEventFlag == 1){
			primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
			secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
			expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
			expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

		}

		if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
			ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
			return false;
		}
		
		expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
		attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
		List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
		int findPrimaryColumn = 0;

		for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
			
			if((headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 10) || headerCounterPrimaryColumn == 12){
				GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
			} else{
				GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
			}

			if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
				findPrimaryColumn = headerCounterPrimaryColumn;
				break;
			}
		}

		if(findPrimaryColumn == 0){
			ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
			return false;
		}

		String[] headernames=secColumnName.split("\\|");
		String[] headervalues=expectedTextFromTable.split("\\|");
		Hashtable<String, String> hstable = new Hashtable<String, String>();
		for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
		{
			hstable.put(headernames[hdrcount], headervalues[hdrcount]);
		}

		Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
		for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
		{
			int iheaderexist = 0;
			for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
			{
				if(headercolumn >= 2 && headercolumn <= 12){
					headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
				} else{
					headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
				}

				dummyheadername = headernames[hdrcount].replace("_1", "");
				dummyheadername = dummyheadername.replace("_2", "");
				
				if(dummyheadername.equalsIgnoreCase(headername.trim().toString())){
					if(!hstableheaders.containsValue(headercolumn)){
						hstableheaders.put(headernames[hdrcount], headercolumn);
						iheaderexist = 1;
						break;
					}
				}
			}

			if(iheaderexist == 0){
				hstableheaders.put(headernames[hdrcount], 0);
			}
		}

		List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
		for(int row=2; row <= rows.size(); row++)
		{
			actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
			if(actualValueFromTable.equals(expectedRowValue)){
				for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
					if(hstableheaders.get(headernames[hdrcount]) != 0){
					
						if(hstableheaders.get(headernames[hdrcount]) == 11){
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/a")).getText();
						} else if(hstableheaders.get(headernames[hdrcount]) == 13 ){
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/input")).getAttribute("value");
						} else{
						actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
						}
						
						if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

							DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
							Date date = new Date();
							Current_Date = dateFormat.format(date);
							Expected_value = Current_Date.trim();
							actualvalue = actualvalue.split(" ")[0];
							if(actualvalue.equals(Expected_value)){
								ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
							}else{
								ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
								testcasestatus = 1;
							}

						} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

							DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
							Date date = new Date();
							Calendar expdate = Calendar.getInstance();
							expdate.setTime(date);
							expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
							Current_Date = dateFormat.format(expdate.getTime());
							Expected_value = Current_Date.trim();

							actualvalue = actualvalue.split(" ")[0];
							if(actualvalue.equals(Expected_value)){
								ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
							}else{
								ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
								testcasestatus = 1;
							}
						} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

							String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
							Expected_value = Runtimevalue.getProperty(strenvvar);
							if(Expected_value != null){
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else {

								ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
								testcasestatus = 1;

							}
						}	else {
							if(actualvalue.equals(hstable.get(headernames[hdrcount]).trim())){
								ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
							}else{
								ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
								testcasestatus = 1;
							}
						}
					}else{
						ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
						testcasestatus = 1;
					}
				}
				itemexist = 1;
				break;
			}
		}

		if(itemexist == 0){
			ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
			testcasestatus = 1;
		}


	}	catch(Exception e){
		ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailscreditcheckenvvar. Error message is : "+ e +"'.", true);
		testcasestatus = 1;	 
	}
	if(testcasestatus == 0){
		webTableVerifyDetailsgbrsimsubmitenvvar_2 = true;
	}
	return webTableVerifyDetailsgbrsimsubmitenvvar_2;
}

public synchronized boolean webTableVerifyDetailsgbrsimauthoriseenvvar_2(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
    
	boolean webTableVerifyDetailsgbrsimauthoriseenvvar_2 = false;
	int itemexist = 0;
	int testcasestatus = 0;
	String primaryColumnName = null;
	String secColumnName = null;
	String expectedRowValue = null;
	String expectedTextFromTable = null;
	String attributeID = null;
	String actualValueFromTable = null;
	String actualvalue = null;
	String Expected_value = null;
	String Current_Date=null;
	String GetTitleHeaders = null;
	String headername = null;
	String dummyheadername = null;
	
	
	try{	
		if(strExecEventFlag == 1){
			primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
			secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
			expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
			expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

		}

		if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
			ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
			return false;
		}
		
		expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
		attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
		List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
		int findPrimaryColumn = 0;

		for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
			
			if((headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 10) || headerCounterPrimaryColumn == 12){
				GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
			} else{
				GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
			}

			if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
				findPrimaryColumn = headerCounterPrimaryColumn;
				break;
			}
		}

		if(findPrimaryColumn == 0){
			ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
			return false;
		}

		String[] headernames=secColumnName.split("\\|");
		String[] headervalues=expectedTextFromTable.split("\\|");
		Hashtable<String, String> hstable = new Hashtable<String, String>();
		for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
		{
			hstable.put(headernames[hdrcount], headervalues[hdrcount]);
		}

		Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
		for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
		{
			int iheaderexist = 0;
			for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
			{
				if(headercolumn >= 2 && headercolumn <= 12){
					headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
				} else{
					headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
				}

				dummyheadername = headernames[hdrcount].replace("_1", "");
				dummyheadername = dummyheadername.replace("_2", "");
				
				if(dummyheadername.equalsIgnoreCase(headername.trim().toString())){
					if(!hstableheaders.containsValue(headercolumn)){
						hstableheaders.put(headernames[hdrcount], headercolumn);
						iheaderexist = 1;
						break;
					}
				}
			}

			if(iheaderexist == 0){
				hstableheaders.put(headernames[hdrcount], 0);
			}
		}

		List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
		for(int row=2; row <= rows.size(); row++)
		{
			actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
			if(actualValueFromTable.equals(expectedRowValue)){
				for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
					if(hstableheaders.get(headernames[hdrcount]) != 0){
					
						if(hstableheaders.get(headernames[hdrcount]) == 11){
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/a")).getText();
						} else{
						actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
						}
						
						if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

							DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
							Date date = new Date();
							Current_Date = dateFormat.format(date);
							Expected_value = Current_Date.trim();
							actualvalue = actualvalue.split(" ")[0];
							if(actualvalue.equals(Expected_value)){
								ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
							}else{
								ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
								testcasestatus = 1;
							}

						} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

							DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
							Date date = new Date();
							Calendar expdate = Calendar.getInstance();
							expdate.setTime(date);
							expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
							Current_Date = dateFormat.format(expdate.getTime());
							Expected_value = Current_Date.trim();

							actualvalue = actualvalue.split(" ")[0];
							if(actualvalue.equals(Expected_value)){
								ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
							}else{
								ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
								testcasestatus = 1;
							}
						} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

							String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
							Expected_value = Runtimevalue.getProperty(strenvvar);
							if(Expected_value != null){
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else {

								ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
								testcasestatus = 1;

							}
						}	else {
							if(actualvalue.equals(hstable.get(headernames[hdrcount]).trim())){
								ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
							}else{
								ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
								testcasestatus = 1;
							}
						}
					}else{
						ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
						testcasestatus = 1;
					}
				}
				itemexist = 1;
				break;
			}
		}

		if(itemexist == 0){
			ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
			testcasestatus = 1;
		}


	}	catch(Exception e){
		ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailscreditcheckenvvar. Error message is : "+ e +"'.", true);
		testcasestatus = 1;	 
	}
	if(testcasestatus == 0){
		webTableVerifyDetailsgbrsimauthoriseenvvar_2 = true;
	}
	return webTableVerifyDetailsgbrsimauthoriseenvvar_2;
}
   	
	public synchronized boolean WebElementisNotVisible(String getValueFromPOM, String strTestObject) {
		boolean WebElementisNotVisible = false;
		try {
			int elementcount=listSelectByLocatorType(getValueFromPOM).size();
	
			if(elementcount > 0){
				boolean elementvisible=selectByLocatorType(getValueFromPOM).isDisplayed();
				if(!elementvisible){
					WebElementisNotVisible = true;
					ExtentTestManager.reportStepPass("'"+strTestObject+"' is not displayed");	
				} else {
					WebElementisNotVisible = false;
					ExtentTestManager.reportStepFail(driver, "'"+strTestObject+"' is Displayed(visible)", true);
				}
			} else{
				WebElementisNotVisible = true;
				ExtentTestManager.reportStepPass("'"+strTestObject+"' is not displayed");
			}
	
		} catch (org.openqa.selenium.NoSuchElementException e) { 	
	
			WebElementisNotVisible = true;
			ExtentTestManager.reportStepPass("'"+strTestObject+"' is not Displayed");
	
		} catch (NullPointerException e){
	
			WebElementisNotVisible = true;
			ExtentTestManager.reportStepPass("'"+strTestObject+"' is not Displayed");
		}
	
		catch (Exception e) { 	
			ExtentTestManager.reportStepFail(driver, "Exception occured while checking WebElementisNotVisible. Exception is "+e, true);
			WebElementisNotVisible=false;
		}
	
		return WebElementisNotVisible;
	}	

	/**********************************************murali code started******************************************************************/
	
	/**
 * Author Muralimohan M
 * Description : This method is applicable only for USA SIM Activation Module
 *  * */
    	
public synchronized boolean webTableVerifyDetails_USAsimsubmitenvvar1(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailssimsubmitenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			log.info("Total Number of column present in the table:"+headerColumns.size());
			log.info("Records :"+headerColumns);

			
			int findPrimaryColumn = 0;
			
			
			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				System.out.println("headerCounterPrimaryColumn:"+headerCounterPrimaryColumn);
				if(headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 11 || headerCounterPrimaryColumn ==13){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
					System.out.println("GetTitleHeaders1:"+GetTitleHeaders);
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
					System.out.println("GetTitleHeaders2:"+GetTitleHeaders);
				}
				
				log.info("Retrieved Column from Table:::'"+GetTitleHeaders+"'-------------'"+primaryColumnName+"'");
				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					log.info("Retrieved Column from Table and matched:'"+GetTitleHeaders+"'------'"+primaryColumnName+"'");
					break;
				}else{
					log.info("Retrieved Column from Table and not matched:'"+GetTitleHeaders+"'");

				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if(headercolumn >= 2 && headercolumn <= 11 || headercolumn==13){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}
					
					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername)){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				log.info("actualValueFromTable:"+actualValueFromTable+"'-->Expected Row '"+expectedRowValue+"'");
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						log.info("hstableheaders:"+actualValueFromTable+"'-->Expected Row '"+headernames[hdrcount]+"'");

						if(hstableheaders.get(headernames[hdrcount]) != 0)
						{
						
							if(hstableheaders.get(headernames[hdrcount]) == 14/*||(hstableheaders.get(headernames[hdrcount]) == 13)*/){
							//	actualvalue = new Select(driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]//td["+ hstableheaders.get(headernames[hdrcount]) +"]//select"))).getFirstSelectedOption().getText();
							//} else if(/*hstableheaders.get(headernames[hdrcount]) == 9 || hstableheaders.get(headernames[hdrcount]) == 10 ||hstableheaders.get(headernames[hdrcount]) == 13||*/ hstableheaders.get(headernames[hdrcount]) == 16 ){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/input")).getAttribute("value");
							
							
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}catch(StaleElementReferenceException staleException){
			log.info("Stale Exception caught in the Method webTableVerifyDetailssimsubmitenvvar");
			return webTableVerifyDetailssimsubmitenvvar(getValueFromPOM, strTestObject, primaryColumnName, secondaryCol, expRowValue, expTextFromTable, strExecEventFlag);
			}
		
		catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailssimsubmitenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailssimsubmitenvvar = true;
		}
		return webTableVerifyDetailssimsubmitenvvar;
	}
	
	/**
 * Author Muralimohan M
 * Description : This method is applicable only for USA SIM Activation Module
 *  * */
    	
public synchronized boolean webTableVerifyDetails_USAsimsubmitenvvar2(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailssimsubmitenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			log.info("Total Number of column present in the table:"+headerColumns.size());
			log.info("Records :"+headerColumns);

			
			int findPrimaryColumn = 0;
			
			
			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				System.out.println("headerCounterPrimaryColumn:"+headerCounterPrimaryColumn);
				if(headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 11 || headerCounterPrimaryColumn ==13){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
					System.out.println("GetTitleHeaders1:"+GetTitleHeaders);
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
					System.out.println("GetTitleHeaders2:"+GetTitleHeaders);
				}
				
				log.info("Retrieved Column from Table:::'"+GetTitleHeaders+"'-------------'"+primaryColumnName+"'");
				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					log.info("Retrieved Column from Table and matched:'"+GetTitleHeaders+"'------'"+primaryColumnName+"'");
					break;
				}else{
					log.info("Retrieved Column from Table and not matched:'"+GetTitleHeaders+"'");

				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if(headercolumn >= 2 && headercolumn <= 11 || headercolumn==13){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}
					
					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername)){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				log.info("actualValueFromTable:"+actualValueFromTable+"'-->Expected Row '"+expectedRowValue+"'");
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						log.info("hstableheaders:"+actualValueFromTable+"'-->Expected Row '"+headernames[hdrcount]+"'");

						if(hstableheaders.get(headernames[hdrcount]) != 0)
						{
						
							if(hstableheaders.get(headernames[hdrcount]) == 14/*||(hstableheaders.get(headernames[hdrcount]) == 13)*/){
							//	actualvalue = new Select(driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]//td["+ hstableheaders.get(headernames[hdrcount]) +"]//select"))).getFirstSelectedOption().getText();
							//} else if(/*hstableheaders.get(headernames[hdrcount]) == 9 || hstableheaders.get(headernames[hdrcount]) == 10 ||hstableheaders.get(headernames[hdrcount]) == 13||*/ hstableheaders.get(headernames[hdrcount]) == 16 ){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/textarea")).getAttribute("value");
							
							
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}catch(StaleElementReferenceException staleException){
			log.info("Stale Exception caught in the Method webTableVerifyDetailssimsubmitenvvar");
			return webTableVerifyDetailssimsubmitenvvar(getValueFromPOM, strTestObject, primaryColumnName, secondaryCol, expRowValue, expTextFromTable, strExecEventFlag);
			}
		
		catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailssimsubmitenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailssimsubmitenvvar = true;
		}
		return webTableVerifyDetailssimsubmitenvvar;
	}

	/**
 * Author Muralimohan M
 * Description : This method is applicable only for USA SIM Activation Module
 *  * */
    	
public synchronized boolean webTableVerifyDetails_USAsimsubmitenvvar(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailssimsubmitenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			log.info("Total Number of column present in the table:"+headerColumns.size());
			log.info("Records :"+headerColumns);

			
			int findPrimaryColumn = 0;
			
			
			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				System.out.println("headerCounterPrimaryColumn:"+headerCounterPrimaryColumn);
				if(headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 11 || headerCounterPrimaryColumn ==13){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
					System.out.println("GetTitleHeaders1:"+GetTitleHeaders);
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
					System.out.println("GetTitleHeaders2:"+GetTitleHeaders);
				}
				
				log.info("Retrieved Column from Table:::'"+GetTitleHeaders+"'-------------'"+primaryColumnName+"'");
				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					log.info("Retrieved Column from Table and matched:'"+GetTitleHeaders+"'------'"+primaryColumnName+"'");
					break;
				}else{
					log.info("Retrieved Column from Table and not matched:'"+GetTitleHeaders+"'");

				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if(headercolumn >= 2 && headercolumn <= 11 || headercolumn==13){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}
					
					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername)){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				log.info("actualValueFromTable:"+actualValueFromTable+"'-->Expected Row '"+expectedRowValue+"'");
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						log.info("hstableheaders:"+actualValueFromTable+"'-->Expected Row '"+headernames[hdrcount]+"'");

						if(hstableheaders.get(headernames[hdrcount]) != 0)
						{
						
							if(hstableheaders.get(headernames[hdrcount]) == 11||(hstableheaders.get(headernames[hdrcount]) == 13)){
								actualvalue = new Select(driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]//td["+ hstableheaders.get(headernames[hdrcount]) +"]//select"))).getFirstSelectedOption().getText();
							} else if(hstableheaders.get(headernames[hdrcount]) == 9 || hstableheaders.get(headernames[hdrcount]) == 10 ||hstableheaders.get(headernames[hdrcount]) == 13|| hstableheaders.get(headernames[hdrcount]) == 16 ){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/input")).getAttribute("value");
								
							
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}catch(StaleElementReferenceException staleException){
			log.info("Stale Exception caught in the Method webTableVerifyDetailssimsubmitenvvar");
			return webTableVerifyDetailssimsubmitenvvar(getValueFromPOM, strTestObject, primaryColumnName, secondaryCol, expRowValue, expTextFromTable, strExecEventFlag);
			}
		
		catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailssimsubmitenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailssimsubmitenvvar = true;
		}
		return webTableVerifyDetailssimsubmitenvvar;
	}
	
	
		public synchronized boolean jsh_Unix_Open_Connection(String strserver, String strusername, String strpassword) {
			boolean Executionstatus=false;
			jsch=new JSch();
			String ipaddress=property.getProperty(strserver);
			String username =property.getProperty(strusername);
			String password =property.getProperty(strpassword);

			try {
				JSHsession=jsch.getSession(username, ipaddress);
				JSHsession.setPassword(password);
				Properties JSHProperties=new Properties();
				JSHProperties.put("StrictHostKeyChecking", "no");
				JSHsession.setConfig("PreferredAuthentications","publickey,keyboard-interactive,password");
				JSHsession.setConfig(JSHProperties);
				JSHsession.connect();

			
				if(JSHsession.isConnected()){
					ExtentTestManager.reportStepPass("UNIX Server with IP Address '"+ipaddress+"' has been connected successfully");
					Executionstatus=true;
				}else{
					ExtentTestManager.reportStepFail(driver, "Unable to connect to the UNIX Server with IP Address "+ipaddress+".", false);
					Executionstatus=true;
				}

			} catch (JSchException e) {
				ExtentTestManager.reportStepFail(driver,"Unable to connect to the UNIX Server with IP Address==> "+ipaddress+"."+e.getMessage(), false);
				return Executionstatus;
			}
			return Executionstatus;
	}

	public synchronized boolean Jsh_closeUnixSession() {
			boolean Executionstatus=false;
			try{
				JSHsession.disconnect();
				if(JSHsession.isConnected()){
					ExtentTestManager.reportStepFail(driver, "Unable to disconnect  UNIX Server with IP Address==> "+property.getProperty("Unix_ITG_Server_IP")+".", false);
					Executionstatus=false;
				}else{
					ExtentTestManager.reportStepPass("Unix Connection disconnected successfully");
					Executionstatus=true;
				}
			}catch(Exception e){
				ExtentTestManager.reportStepFail(driver, "Unable to disconnect  UNIX Server with IP Address "+property.getProperty("Unix_ITG_Server_IP")+".Exception Occured:"+e.getMessage(), false);
				return Executionstatus;
			}
			return Executionstatus;
	}
	
	public synchronized boolean Unix_Start_Instance(String strfilepath, String strcommand, String strexpectedtext, int strExecEventFlag) {
		
		boolean Executionstatus=false;
		
		String File_Path = null;
		String Command_To_Execute = null;
		String Expected_Text = null;
		ChannelExec channelExec = null;
		
		try {

   			if(strExecEventFlag==1){
   				Expected_Text=getTestData(testDataFilePathStatic, testComponentNameStatic, strexpectedtext, gblrecordsCounterStatic);
   			}
   			
   			File_Path = "cd "+ property.getProperty(strfilepath);
   			Command_To_Execute = property.getProperty(strcommand);
   			
   			if(File_Path==null || Command_To_Execute==null || Expected_Text==null){
   				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet or in properties file.", false);
   				return false;
   			}
			
					Channel channel=JSHsession.openChannel("exec");
		
					channelExec = (ChannelExec)channel ;
					
					channelExec.setCommand(File_Path + ";"+ Command_To_Execute);
		
					channelExec.connect();

				 	BufferedReader reader = new BufferedReader(new InputStreamReader(channelExec.getInputStream()));
		            String line;
	            
		            while ((line = reader.readLine()) != null) {

		            	Pattern pattern = Pattern.compile(Expected_Text);
						Matcher match = pattern.matcher(line);
		            	
		            	if(match.find()){
		            		break;
		            	}

		            }

		            reader.close();
		            
					ExtentTestManager.reportStepPass("The command "+ Command_To_Execute +" in the path : "+ property.getProperty(strfilepath) +" has been executed successfully.");
					Executionstatus=true;
		            
			 } catch(Exception e){
					ExtentTestManager.reportStepFail(driver,"Unable to execute the command "+ Command_To_Execute +"."+e.getMessage(), false);
					return Executionstatus;
			 }
			
			channelExec.disconnect();


		return Executionstatus;
	}	
	
	
	public synchronized boolean SQLDBWaituntilrecordinsert(String sqltablename, String strsqlcolumnname,String strsqlcondition, int strExecEventFlag){
		boolean SQLDBWaituntilrecordinsert= false;
		String query=null;
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		ResultSet rs_SQLServer = null;
		int No_Of_Records = 0;
		int i = 0;
		
		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic,sqltablename,gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcolumnname,gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic,strsqlcondition,gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in test data sheet.", false);
				return false;
			}
			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+"";
			
			
				int iterateValue = 500;
				
				for(i = 0; i < iterateValue; i++){
					
				Thread.sleep(1000);	
				
				rs_SQLServer = stmt.executeQuery(query);
				
					while(rs_SQLServer.next()){
						No_Of_Records = Integer.parseInt(rs_SQLServer.getString(1));
					}
					
					if(No_Of_Records > 0){
						break;
					}

				}
			
			if(No_Of_Records > 0){
				ExtentTestManager.reportStepPass("Records has been inserted into the table : "+ Table_name +". Number of records inserted is : "+ No_Of_Records +".");
				SQLDBWaituntilrecordinsert=true;
			}else{
				ExtentTestManager.reportStepFail(driver, "Records not inserted into the table : "+ Table_name +" after waiting for : "+ i +" seconds.", false);
				SQLDBWaituntilrecordinsert=true;
			}

		}catch (NullPointerException e) {
				ExtentTestManager.reportStepFail(driver,"Null Pointer exception occured while comparing the No.of Records", false);
				SQLDBWaituntilrecordinsert=false;
				
		} catch (Exception e) {
			ExtentTestManager.reportStepFail(driver,    "Error occured while checking whether the executed query has any records (or) not. Error description is : "+ e.getMessage() +".", false);
			SQLDBWaituntilrecordinsert=false;
		}
		return SQLDBWaituntilrecordinsert;
	}
	
	public synchronized boolean Unix_File_Update_Old_Date(String strfilepath, String strPropertyName, String strfilename, int strExecEventFlag) {
		
		boolean Executionstatus=false;
		
		String Source_File_Path = null;
		String File_Name = null;
		String Destination_File_Path = null;
		ChannelSftp sftpChannel = null;
		
		try {

   			if(strExecEventFlag==1){
   				File_Name = getTestData(testDataFilePathStatic, testComponentNameStatic, strfilename, gblrecordsCounterStatic);
   			}
   			
   			Source_File_Path = property.getProperty(strfilepath) + File_Name;
   			Destination_File_Path = System.getProperty("user.dir")+ property.getProperty(strPropertyName) + File_Name;
   			
   			if(File_Name==null || Source_File_Path==null || property.getProperty(strPropertyName)==null){
   				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet or in properties file.", false);
   				return false;
   			}
			
		   			sftpChannel = (ChannelSftp)JSHsession.openChannel("sftp");
		   	        sftpChannel.connect();
		   	        
		   	        sftpChannel.get(Source_File_Path, Destination_File_Path);
		   			
		   	        Date date = new Date();
		   	        
		   			SimpleDateFormat dateformat = new SimpleDateFormat("dd-MM-yyyy");
		   			Calendar expdate = Calendar.getInstance();
		   			expdate.setTime(date);
		   			expdate.add(Calendar.DATE, -1);
		   			String currentDate = dateformat.format(expdate.getTime());
		
		   	        FileOutputStream fileOut = new FileOutputStream(Destination_File_Path);
		   	        fileOut.write(currentDate.getBytes());
		   	        fileOut.close();
		   	        
		   	        sftpChannel.put(Destination_File_Path,Source_File_Path);
		            
					ExtentTestManager.reportStepPass("The text "+ currentDate +" is updated in the file : "+ File_Name +" present in the path : "+ property.getProperty(strfilepath) +".");
					Executionstatus=true;
		            
			 } catch(Exception e){
					ExtentTestManager.reportStepFail(driver,"Unable to update the text in the file : "+ File_Name +" present in the path : "+ property.getProperty(strfilepath) +"."+e.getMessage(), false);
					return Executionstatus;
			 }
			
		sftpChannel.disconnect();


		return Executionstatus;
	}	
	
	public synchronized boolean Unix_XML_File_Update(String strfilepath, String strcommand, String strPropertyName, String strfilename, String strxpath, int strExecEventFlag) {
		
		boolean Executionstatus=false;
		String xpath_to_update = null;
		String Source_File_Path = null;
		String File_Name = null;
		String Destination_File_Path = null;
		ChannelSftp sftpChannel = null;
		
		try {

   			if(strExecEventFlag==1){
   				File_Name = getTestData(testDataFilePathStatic, testComponentNameStatic, strfilename, gblrecordsCounterStatic);
   				xpath_to_update = getTestData(testDataFilePathStatic, testComponentNameStatic, strxpath, gblrecordsCounterStatic);
   			}
   			
   			Source_File_Path = property.getProperty(strfilepath) + File_Name;
   			Destination_File_Path = System.getProperty("user.dir")+ property.getProperty(strPropertyName) + "TempConfigData.xml";
   			
   			if(File_Name==null || Source_File_Path==null || property.getProperty(strPropertyName)==null){
   				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet or in properties file.", false);
   				return false;
   			}
			
   			String File_Path = "cd "+ property.getProperty(strfilepath);
   			String Command_To_Execute = property.getProperty(strcommand);
   			
   			Channel channel=JSHsession.openChannel("exec");
			
			ChannelExec channelExec = (ChannelExec)channel ;
			
			channelExec.setCommand(File_Path + ";"+ Command_To_Execute);
	
			channelExec.connect();
	
			BufferedReader reader = new BufferedReader(new InputStreamReader(channelExec.getInputStream()));
					
		    String line = reader.readLine();
	         
		    reader.close();
		    
			channelExec.disconnect();
			
			sftpChannel = (ChannelSftp)JSHsession.openChannel("sftp");
			
	        sftpChannel.connect();
	        
	        sftpChannel.get(Source_File_Path, Destination_File_Path);
			
			DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
			DocumentBuilder builder=factory.newDocumentBuilder();;
			File file=new File(Destination_File_Path);
			
	        Document document=builder.parse(file);
			document.getDocumentElement().normalize();
			NodeList nodeList=null;
			XPath xpath=XPathFactory.newInstance().newXPath();
			nodeList=(NodeList)xpath.compile(xpath_to_update).evaluate(document,XPathConstants.NODESET);
			nodeList.item(0).setTextContent(line);
			TransformerFactory transFormerFactory = TransformerFactory.newInstance();
			Transformer transFormer = transFormerFactory.newTransformer();
			
			DOMSource source = new DOMSource(document);

			StreamResult result = new StreamResult(file);
			transFormer.transform(source, result);
				        
			Thread.sleep(5000);

	        sftpChannel.put(Destination_File_Path,Source_File_Path);
		            
			ExtentTestManager.reportStepPass("The text "+ line +" is updated for the xpath : "+ xpath_to_update +" in the file : "+ File_Name +" present in the path : "+ property.getProperty(strfilepath) +".");
			Executionstatus=true;
		            
			 } catch(Exception e){
					ExtentTestManager.reportStepFail(driver,"Unable to update the text in the file : "+ File_Name +" present in the path : "+ property.getProperty(strfilepath) +"."+e.getMessage(), false);
					return Executionstatus;
			 }
			
		sftpChannel.disconnect();


		return Executionstatus;
	}	
	
	
	public synchronized boolean RRBSDBDateUpdate(String sqltablename, String strsqlcolumnname,String strsqlcondition,String Date_Format,String Days_to_add,int strExecEventFlag){
		boolean functionStatus= false;
		String query = null;  
		String check = null; 
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String Current_Date=null;
		String daystoadd = null;
		String date_format = null;


		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				daystoadd=getTestData(testDataFilePathStatic, testComponentNameStatic, Days_to_add, gblrecordsCounterStatic);
				date_format=getTestData(testDataFilePathStatic, testComponentNameStatic, Date_Format, gblrecordsCounterStatic);
			}

			if(Table_name==null || Column_name==null || SQL_condition==null || daystoadd==null || date_format==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			int Substract_Days = Integer.parseInt(daystoadd);
			
			DateFormat dateFormat = new SimpleDateFormat(date_format);
			Date date = new Date();
			Calendar expdate = Calendar.getInstance();
			expdate.setTime(date);
			expdate.add(Calendar.DATE, Substract_Days);
			Current_Date = dateFormat.format(expdate.getTime());
			Expected_value = Current_Date;
		
			query = "update "+Table_name+" set "+Column_name+"=to_date('"+Expected_value+"', 'YYYY-MM-DD HH24:MI:SS') where "+SQL_condition;
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";

			ResultSet rs_SQLServerCheck= rrbsstatement.executeQuery(check);

			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ check + "  in DB",false);
				return false;
			}

			rrbsstatement.executeQuery(query);
			
			ExtentTestManager.reportStepPass("RRBS Update Query  "+ query + "  executed successfully.");
			functionStatus = true;
			

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while updating the values using query.Error description is : "+ e.getMessage(), false);
			return functionStatus;
		}
		return functionStatus;
	}
	
	public synchronized boolean EshopSQLDBOpenConnection(String sqlserver, String sqldbname, String sqlusername, String sqlpassword){
		String dbUrl = "jdbc:sqlserver://"+ sqlserver +";DatabaseName=" + sqldbname +";";                  
		String username = sqlusername;   
		String password = sqlpassword; 

		if(sqldbname==null || sqlusername==null || sqlpassword==null || sqlserver==null){
			ExtentTestManager.reportStepFail(driver,"Required details are not provided in the datasheet.", false);
			return false;
		}
		try {
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
			EshopConnection = DriverManager.getConnection(dbUrl,username,password);
			EShopstmt = EshopConnection.createStatement(); 
			ExtentTestManager.reportStepPass("ESHOP SQL Connection for GBR is established successfully with DB Name '"+sqldbname+"' and Server '"+sqlserver+"'.");
			return true;
		} catch (Exception e) { 
			ExtentTestManager.reportStepPass("Error while establishing the ESHOP SQL Connection for GBR with DB Name '"+sqldbname+"' and Server '"+sqlserver+"'.");
			return false;
		}
	}
	
	
	public synchronized boolean EshopSQLDBCloseConnection(){
		try {
			EshopConnection.close(); 
			ExtentTestManager.reportStepPass("ESHOP SQL DB Connection disconnected successfully.");
			return true;
		} catch (Exception e) { 
			ExtentTestManager.reportStepFail(driver,"Error occured while closing the ESHOP SQL DB connection. Error description is : "+ e.getMessage() +".", false);
			return false;
		}
	}


	public synchronized boolean Unix_Stop_Instance(String strcommand1, String strcommand2, int strExecEventFlag) {
		
		boolean Executionstatus=false;
		String Command_To_Execute_1 = null;
		String Command_To_Execute_2 = null;
		
		ChannelExec channelExec = null;
		
		try {

   			if(strExecEventFlag==1){
   				Command_To_Execute_1=getTestData(testDataFilePathStatic, testComponentNameStatic, strcommand1, gblrecordsCounterStatic);
   				Command_To_Execute_2=getTestData(testDataFilePathStatic, testComponentNameStatic, strcommand2, gblrecordsCounterStatic);
   			}
   			
   			if(Command_To_Execute_1==null || Command_To_Execute_2 == null){
   				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
   				return false;
   			}
			
					Channel channel=JSHsession.openChannel("exec");
		
					channelExec = (ChannelExec)channel ;
					
					channelExec.setCommand(Command_To_Execute_1 +";"+ Command_To_Execute_2);
		
					channelExec.connect();

					while (channelExec.getExitStatus() == -1){
					     try{
					    	 Thread.sleep(1000);
					     }catch(Exception e){
					    	 System.out.println(e);
					     }
					  }
		            
					ExtentTestManager.reportStepPass("The commands "+ Command_To_Execute_1 +" and "+ Command_To_Execute_2 +" has been executed successfully.");
					Executionstatus=true;
		            
			 } catch(Exception e){
					ExtentTestManager.reportStepFail(driver,"Unable to execute the commands "+ Command_To_Execute_1 +" and "+ Command_To_Execute_2 +"."+e.getMessage(), false);
					return Executionstatus;
			 }
			
			channelExec.disconnect();


		return Executionstatus;
	}
	

	public synchronized boolean eShopSQLDBCheckValueExist(String sqltablename, String strsqlcolumnname,String strsqlcondition,int strExecEventFlag){
		boolean functionStatus=false;
		String query;
		String check;
		String Table_name;
		String Column_name;
		String SQL_condition;
		String Actual_Value;

		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
			}else{
				Table_name=sqltablename;
				Column_name=strsqlcolumnname;
				SQL_condition=strsqlcondition;
			}

			if(Table_name==null || Column_name==null || SQL_condition==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			query = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";
			check = "select "+Column_name+" from "+Table_name+" where "+SQL_condition+" order by 1 desc";

			//Check for Record Available
			ResultSet rs_SQLServerCheck = EShopstmt.executeQuery(check);
			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ query + "  in DB",false);
				return false;
			}

			rs_SQLServerCheck = EShopstmt.executeQuery(check);
			rs_SQLServerCheck.next();
			rs_SQLServerCheck.getObject(Column_name);

			if (rs_SQLServerCheck.wasNull()) {
					ExtentTestManager.reportStepFail(driver,"Actual value 'NULL' exist for the SQL Query "+query+".", false);
					functionStatus= false;
			}else{
				ResultSet rs_SQLServer = EShopstmt.executeQuery(query);
				rs_SQLServer.next();
				Actual_Value = rs_SQLServer.getString(1).trim();

				if(!(Actual_Value==null)){
					ExtentTestManager.reportStepPass("Actual value '"+Actual_Value+"' exist for the SQL Query "+query+".");
					functionStatus= true;
				}else if(Actual_Value==null){
					ExtentTestManager.reportStepFail(driver,"Value does not exist for the SQL Query "+query+"'", false);
					functionStatus= false;
				}
			}

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while comparing the values in SQL query.Error description is : "+ e.getMessage(), false);
			return false;
		}
		return functionStatus;
	}

	public synchronized boolean WebElementTextCompareFromEnv(String getValueFromPOM, String strTestObject,String strColumnName,int strExecEventFlag ){
		String actualResult=null;
		String strData=null;
		String envVariable=null;
		boolean WebElementTextCompareFromEnv=false;
		try{
			if (strExecEventFlag==1){
				envVariable=getTestData(testDataFilePathStatic, testComponentNameStatic,strColumnName,gblrecordsCounterStatic);
				strData=Runtimevalue.getProperty(envVariable);
			}
			if(envVariable==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			actualResult = selectByLocatorType(getValueFromPOM).getText();
		} catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while getting the text from the WebElement '"+strTestObject+"' and the error description is "+e.getLocalizedMessage()+"", true);
			WebElementTextCompareFromEnv=false;
		}

		try{
			if((actualResult.trim()).equalsIgnoreCase(strData.trim())){
				ExtentTestManager.reportStepPass("Actual value of the element '" +actualResult+ "' matches with the Expected value '"+strData+ "' retrievd from Runtime Variable '"+envVariable+ "' in the input field '"+strTestObject+"'");
				WebElementTextCompareFromEnv=true;
			}else{
				ExtentTestManager.reportStepFail(driver,"Actual value of the element '" +actualResult+ "' does not match with the Expected value '"+strData+ "' retrievd from Runtime Variable '"+envVariable+ "' in the input field '"+strTestObject+"'", true);
				WebElementTextCompareFromEnv=false;
			}
		} catch (Exception e){
			ExtentTestManager.reportStepFail(driver, "Error occured while comparing actual and expected values. Error description is "+e.getLocalizedMessage()+"", true);
			WebElementTextCompareFromEnv=false;
		}
		return WebElementTextCompareFromEnv;
	}


	public synchronized boolean RRBSDBDateUpdateConditionEnvvar(String sqltablename, String strsqlcolumnname,String strsqlcondition,String strenvironmentvariable, String Date_Format,String Days_to_add,int strExecEventFlag){
		boolean functionStatus= false;
		String query = null;  
		String check = null; 
		String Table_name = null;
		String Column_name = null;
		String SQL_condition = null;
		String Expected_value = null;
		String Current_Date=null;
		String daystoadd = null;
		String date_format = null;
		String condition_value = null;


		try {
			if(strExecEventFlag==1){
				Table_name=getTestData(testDataFilePathStatic, testComponentNameStatic, sqltablename, gblrecordsCounterStatic);
				Column_name=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcolumnname, gblrecordsCounterStatic);
				SQL_condition=getTestData(testDataFilePathStatic, testComponentNameStatic, strsqlcondition, gblrecordsCounterStatic);
				daystoadd=getTestData(testDataFilePathStatic, testComponentNameStatic, Days_to_add, gblrecordsCounterStatic);
				date_format=getTestData(testDataFilePathStatic, testComponentNameStatic, Date_Format, gblrecordsCounterStatic);
				condition_value = Runtimevalue.getProperty(getTestData(testDataFilePathStatic, testComponentNameStatic, strenvironmentvariable, gblrecordsCounterStatic));
			}

			if(Table_name==null || Column_name==null || SQL_condition==null || daystoadd==null || date_format==null || condition_value==null){
				ExtentTestManager.reportStepFail(driver, "Required details are not provided in the data sheet.", false);
				return false;
			}

			int Substract_Days = Integer.parseInt(daystoadd);
			
			DateFormat dateFormat = new SimpleDateFormat(date_format);
			Date date = new Date();
			Calendar expdate = Calendar.getInstance();
			expdate.setTime(date);
			expdate.add(Calendar.DATE, Substract_Days);
			Current_Date = dateFormat.format(expdate.getTime());
			Expected_value = Current_Date;
		
			query = "update "+Table_name+" set "+Column_name+"=to_date('"+Expected_value+"', 'YYYY-MM-DD HH24:MI:SS') where "+ SQL_condition +" = '"+ condition_value +"'";
			check = "select "+Column_name+" from "+Table_name+" where "+ SQL_condition +" = '"+ condition_value +"' order by 1 desc";

			ResultSet rs_SQLServerCheck= rrbsstatement.executeQuery(check);

			int temp=0;	
			while(rs_SQLServerCheck.next()){
				temp++;
			}

			if(temp < 1){
				ExtentTestManager.reportStepFail( driver,"NO RECORDS available for the Query  "+ check + "  in DB",false);
				return false;
			}

			rrbsstatement.executeQuery(query);
			
			ExtentTestManager.reportStepPass("RRBS Update Query  "+ query + "  executed successfully.");
			functionStatus = true;
			

		}catch (Exception e){
			ExtentTestManager.reportStepFail(driver,"Error occured while updating the values using query.Error description is : "+ e.getMessage(), false);
			return functionStatus;
		}
		return functionStatus;
	}
	
	public synchronized boolean webTableVerifyDetailsvouchersubmitenvvar(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailsvouchersubmitenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			int findPrimaryColumn = 0;

			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();

				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					break;
				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
										
					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername)){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						if(hstableheaders.get(headernames[hdrcount]) != 0){
						
							if(hstableheaders.get(headernames[hdrcount]) == 8){
								actualvalue =driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/a")).getText();
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.trim().equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}	catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailsvouchersubmitenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailsvouchersubmitenvvar = true;
		}
		return webTableVerifyDetailsvouchersubmitenvvar;
	}	

	
	public synchronized boolean webTableVerifyDetailsgbrvouchersubmitenvvar(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailsgbrvouchersubmitenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			int findPrimaryColumn = 0;

			for(int headerCounterPrimaryColumn = 1;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				
				if((headerCounterPrimaryColumn >= 1 && headerCounterPrimaryColumn <= 10) || headerCounterPrimaryColumn == 14 || headerCounterPrimaryColumn == 15 ){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
				}

				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					break;
				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 1; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if((headercolumn >= 1 && headercolumn <= 10) || headercolumn == 14 || headercolumn == 15 ){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}

					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername.trim().toString())){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						if(hstableheaders.get(headernames[hdrcount]) != 0){
						
							if(hstableheaders.get(headernames[hdrcount]) == 7){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/a")).getText();
							} else if(hstableheaders.get(headernames[hdrcount]) >= 11 &&  hstableheaders.get(headernames[hdrcount]) <= 13){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/input")).getAttribute("value");
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.trim().equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}	catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailsgbrvouchersubmitenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailsgbrvouchersubmitenvvar = true;
		}
		return webTableVerifyDetailsgbrvouchersubmitenvvar;
	}
	

	public synchronized boolean webTableVerifyDetailsgbrvoucherccenvvar(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailsgbrvoucherccenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			int findPrimaryColumn = 0;

			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				
				if((headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 12) || headerCounterPrimaryColumn == 14 || headerCounterPrimaryColumn == 15 ){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
				}

				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					break;
				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if((headercolumn >= 2 && headercolumn <= 12) || headercolumn == 14 || headercolumn == 15 ){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}

					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername.trim().toString())){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						if(hstableheaders.get(headernames[hdrcount]) != 0){
						
							if(hstableheaders.get(headernames[hdrcount]) == 5){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/a")).getText();
							} else if(hstableheaders.get(headernames[hdrcount]) == 13){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/input")).getAttribute("value");
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.trim().equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}	catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailsgbrvoucherccenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailsgbrvoucherccenvvar = true;
		}
		return webTableVerifyDetailsgbrvoucherccenvvar;
	}
	

	
	public synchronized boolean webTableVerifyDetailsgbrvoucherautenvvar(String getValueFromPOM, String strTestObject, String primaryCol, String secondaryCol, String expRowValue, String expTextFromTable, int strExecEventFlag) {
        
		boolean webTableVerifyDetailsgbrvoucherautenvvar = false;
		int itemexist = 0;
		int testcasestatus = 0;
		String primaryColumnName = null;
		String secColumnName = null;
		String expectedRowValue = null;
		String expectedTextFromTable = null;
		String attributeID = null;
		String actualValueFromTable = null;
		String actualvalue = null;
		String Expected_value = null;
		String Current_Date=null;
		String GetTitleHeaders = null;
		String headername = null;
		String dummyheadername = null;
		
		
		try{	
			if(strExecEventFlag == 1){
				primaryColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, primaryCol,gblrecordsCounterStatic);
				secColumnName = getTestData(testDataFilePathStatic, testComponentNameStatic, secondaryCol,gblrecordsCounterStatic);
				expectedRowValue = getTestData(testDataFilePathStatic, testComponentNameStatic, expRowValue,gblrecordsCounterStatic);
				expectedTextFromTable = getTestData(testDataFilePathStatic, testComponentNameStatic, expTextFromTable,gblrecordsCounterStatic);

			}

			if(primaryColumnName == null || secColumnName == null || expectedRowValue == null || expectedTextFromTable == null){
				ExtentTestManager.reportStepFail(driver,    "Required details are not provided in the data sheet.", false);
				return false;
			}
			
			expectedRowValue = Runtimevalue.getProperty(expectedRowValue);
			attributeID = selectByLocatorType(getValueFromPOM).getAttribute("id");
			List<WebElement> headerColumns = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th"));
			int findPrimaryColumn = 0;

			for(int headerCounterPrimaryColumn = 2;headerCounterPrimaryColumn <= headerColumns.size(); headerCounterPrimaryColumn++){
				
				if(headerCounterPrimaryColumn >= 2 && headerCounterPrimaryColumn <= 14){
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]")).getText();
				} else{
					GetTitleHeaders = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headerCounterPrimaryColumn +"]/span")).getText();	
				}

				if(GetTitleHeaders.equalsIgnoreCase(primaryColumnName)){
					findPrimaryColumn = headerCounterPrimaryColumn;
					break;
				}
			}

			if(findPrimaryColumn == 0){
				ExtentTestManager.reportStepFail(driver, "Primary key column : '"+ primaryColumnName +"' in not available in the table : "+ strTestObject +"'.", true);
				return false;
			}

			String[] headernames=secColumnName.split("\\|");
			String[] headervalues=expectedTextFromTable.split("\\|");
			Hashtable<String, String> hstable = new Hashtable<String, String>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				hstable.put(headernames[hdrcount], headervalues[hdrcount]);
			}

			Hashtable<String, Integer> hstableheaders = new Hashtable<String, Integer>();
			for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++)
			{
				int iheaderexist = 0;
				for( int headercolumn = 2; headercolumn <= headerColumns.size(); headercolumn++)
				{
					if(headercolumn >= 2 && headercolumn <= 14){
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]")).getText();
					} else{
						headername = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr[1]/th["+ headercolumn +"]/span")).getText();	
					}

					dummyheadername = headernames[hdrcount].replace("_1", "");
					dummyheadername = dummyheadername.replace("_2", "");
					
					if(dummyheadername.equalsIgnoreCase(headername.trim().toString())){
						if(!hstableheaders.containsValue(headercolumn)){
							hstableheaders.put(headernames[hdrcount], headercolumn);
							iheaderexist = 1;
							break;
						}
					}
				}

				if(iheaderexist == 0){
					hstableheaders.put(headernames[hdrcount], 0);
				}
			}

			List<WebElement> rows = driver.findElements(By.xpath("//*[@id='"+attributeID+"']//tbody/tr"));
			for(int row=2; row <= rows.size(); row++)
			{
				actualValueFromTable = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+findPrimaryColumn+"]")).getText();
				if(actualValueFromTable.equals(expectedRowValue)){
					for( int hdrcount = 0; hdrcount <= headernames.length - 1; hdrcount++) {
						if(hstableheaders.get(headernames[hdrcount]) != 0){
						
							if(hstableheaders.get(headernames[hdrcount]) == 5){
								actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]/a")).getText();
							} else{
							actualvalue = driver.findElement(By.xpath("//*[@id='"+attributeID+"']//tbody/tr["+row+"]/td["+ hstableheaders.get(headernames[hdrcount]) +"]")).getText();
							}
							
							if(hstable.get(headernames[hdrcount]).contains("CURRENT_DATE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Current_Date = dateFormat.format(date);
								Expected_value = Current_Date.trim();
								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass( "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}

							} else if(hstable.get(headernames[hdrcount]).contains("FUTUREDATECOMPARE")){

								DateFormat dateFormat = new SimpleDateFormat(hstable.get(headernames[hdrcount]).split("\\;")[1]);
								Date date = new Date();
								Calendar expdate = Calendar.getInstance();
								expdate.setTime(date);
								expdate.add(Calendar.DATE, Integer.parseInt(hstable.get(headernames[hdrcount]).split("\\;")[2]) - 1);
								Current_Date = dateFormat.format(expdate.getTime());
								Expected_value = Current_Date.trim();

								actualvalue = actualvalue.split(" ")[0];
								if(actualvalue.equals(Expected_value)){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver, "Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
									testcasestatus = 1;
								}
							} else if(hstable.get(headernames[hdrcount]).contains("ENVVARCOMPARE")){

								String strenvvar = hstable.get(headernames[hdrcount]).split("\\;")[1];
								Expected_value = Runtimevalue.getProperty(strenvvar);
								if(Expected_value != null){
									if(actualvalue.equals(Expected_value)){
										ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ Expected_value +"'.");
									}else{
										ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ Expected_value +"'.", true);
										testcasestatus = 1;
									}
								} else {

									ExtentTestManager.reportStepFail(driver, "The Value in the environment variable : '"+ strenvvar +"' is empty.", true);
									testcasestatus = 1;

								}
							}	else {
								if(actualvalue.trim().equals(hstable.get(headernames[hdrcount]).trim())){
									ExtentTestManager.reportStepPass("Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.");
								}else{
									ExtentTestManager.reportStepFail(driver,"Actual value : '"+ actualvalue +"' in the table : "+ strTestObject +"' doesnot matches with the expected value : '"+ hstable.get(headernames[hdrcount]) +"'.", true);
									testcasestatus = 1;
								}
							}
						}else{
							ExtentTestManager.reportStepFail(driver, "Required header : '"+ headernames[hdrcount] +"' is not present in the table : '"+ strTestObject +"'.", true);
							testcasestatus = 1;
						}
					}
					itemexist = 1;
					break;
				}
			}

			if(itemexist == 0){
				ExtentTestManager.reportStepFail(driver, "The Value : '"+ expectedRowValue +"' is not present in the table : '"+ strTestObject +"'.", true);
				testcasestatus = 1;
			}


		}	catch(Exception e){
			ExtentTestManager.reportStepFail(driver, "Exception occured while webTableVerifyDetailsgbrvoucherccenvvar. Error message is : "+ e +"'.", true);
			testcasestatus = 1;	 
		}
		if(testcasestatus == 0){
			webTableVerifyDetailsgbrvoucherautenvvar = true;
		}
		return webTableVerifyDetailsgbrvoucherautenvvar;
	}

	
/*********************************************************MURALI CODE ENDED*********************************************************************************/
	
	
	
	
	
}



